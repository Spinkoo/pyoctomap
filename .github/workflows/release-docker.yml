name: Release to PyPI (Docker)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 0.1.16)'
        required: false
        default: '0.1.16'

jobs:
  build-wheels:
    runs-on: ubuntu-latest
    environment: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Display release info
      run: |
        echo "üöÄ Building manylinux wheels for PyPI release using Docker"
        echo "üê≥ Using Docker for consistent, reproducible builds"
        if [ -n "${{ github.event.inputs.version }}" ]; then
          echo "üì¶ Version: ${{ github.event.inputs.version }}"
        fi
        if [ -n "${{ github.event.release.tag_name }}" ]; then
          echo "üè∑Ô∏è  Release tag: ${{ github.event.release.tag_name }}"
        fi

    - name: Build wheel with Docker
      run: |
        echo "üê≥ Building wheels using Docker (multi-version)..."
        docker build -f docker/Dockerfile.wheel -t pyoctomap-wheel .
        
        echo "üì¶ Extracting wheel from container..."
        docker run --name temp-container pyoctomap-wheel
        docker cp temp-container:/wheels/ ./wheels/
        docker rm temp-container
        
        echo "‚úÖ Built wheels:"
        ls -la wheels/
        
        echo "üîç Filtering to only manylinux wheels..."
        mkdir -p ./manylinux-wheels
        cp wheels/*manylinux*.whl ./manylinux-wheels/ || echo "No manylinux wheels found"
        echo "Manylinux wheels:"
        ls -la ./manylinux-wheels/
    
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheel-docker
        path: ./manylinux-wheels

  build-sdist:
    runs-on: ubuntu-latest
    environment: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build setuptools wheel numpy cython
    
    - name: Generate PyPI README
      run: |
        python github2pypi/generate_pypi_readme.py
        
        if [ -f "README_pypi_preview.md" ]; then
          echo "‚úÖ PyPI README generated successfully"
        else
          echo "‚ùå PyPI README generation failed"
          exit 1
        fi
    
    - name: Build source distribution
      run: |
        python -m build --sdist
        echo "‚úÖ Built source distribution:"
        ls -la dist/
    
    - name: Upload source distribution
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  publish:
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    environment: release
    
    steps:
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        name: wheel-docker
        path: ./wheels
    
    - name: Download source distribution
      uses: actions/download-artifact@v4
      with:
        name: sdist
        path: ./dist
    
    - name: Combine packages for upload
      run: |
        echo "üì¶ Combining wheels and source distribution..."
        mkdir -p ./packages
        cp ./wheels/*.whl ./packages/
        cp ./dist/*.tar.gz ./packages/
        echo "Packages to upload:"
        ls -la ./packages/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: ./packages
        skip_existing: true
