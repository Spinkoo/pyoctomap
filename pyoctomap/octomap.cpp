/* Generated by Cython 3.0.8 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "NPY_NO_DEPRECATED_API",
                "NPY_1_7_API_VERSION"
            ]
        ],
        "depends": [
            "/home/lespi/.local/lib/python3.12/site-packages/numpy/_core/include/numpy/arrayobject.h",
            "/home/lespi/.local/lib/python3.12/site-packages/numpy/_core/include/numpy/arrayscalars.h",
            "/home/lespi/.local/lib/python3.12/site-packages/numpy/_core/include/numpy/ndarrayobject.h",
            "/home/lespi/.local/lib/python3.12/site-packages/numpy/_core/include/numpy/ndarraytypes.h",
            "/home/lespi/.local/lib/python3.12/site-packages/numpy/_core/include/numpy/ufuncobject.h",
            "pyoctomap/include_and_setting.h",
            "src/octomap/dynamicEDT3D/include/dynamicEDT3D/dynamicEDTOctomap.h",
            "src/octomap/octomap/include/octomap/OcTree.h",
            "src/octomap/octomap/include/octomap/OcTreeKey.h",
            "src/octomap/octomap/include/octomap/OcTreeNode.h",
            "src/octomap/octomap/include/octomap/Pointcloud.h",
            "src/octomap/octomap/include/octomap/math/Vector3.h",
            "src/octomap/octomap/include/octomap/octomap_types.h"
        ],
        "extra_compile_args": [
            "-O2",
            "-DNDEBUG",
            "-fPIC",
            "-Wno-deprecated-declarations",
            "-Wno-deprecated",
            "-Wno-unused-function"
        ],
        "extra_link_args": [
            "-fPIC",
            "-Wl,-rpath,$ORIGIN/lib"
        ],
        "include_dirs": [
            "pyoctomap",
            "src/octomap/octomap/include",
            "src/octomap/octomap/include/octomap",
            "src/octomap/dynamicEDT3D/include",
            "/home/lespi/.local/lib/python3.12/site-packages/numpy/_core/include"
        ],
        "language": "c++",
        "libraries": [
            "dynamicedt3d",
            "octomap",
            "octomath"
        ],
        "library_dirs": [
            "src/octomap/lib"
        ],
        "name": "pyoctomap.octomap",
        "sources": [
            "pyoctomap/octomap.pyx"
        ]
    },
    "module_name": "pyoctomap.octomap"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_8" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030008F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__pyoctomap__octomap
#define __PYX_HAVE_API__pyoctomap__octomap
/* Early includes */
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <iostream>
#include <sstream>
#include "math/Vector3.h"
#include "octomap_types.h"
#include "Pointcloud.h"
#include "OcTreeNode.h"
#include "OcTreeKey.h"
#include "include_and_setting.h"
#include "octomap/math/Vector3.h"
#include "octomap/octomap_types.h"
#include "octomap/OcTreeKey.h"
#include "octomap/OcTree.h"
#include "dynamicEDT3D/dynamicEDTOctomap.h"
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "<stringsource>",
  "pyoctomap/octomap.pyx",
  "__init__.cython-30.pxd",
  "type.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* BufferFormatStructs.proto */
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* #### Code section: numeric_typedefs ### */

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":743
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":744
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":745
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * 
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":746
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_uint8      uint8_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":748
 * ctypedef npy_int64      int64_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":749
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":750
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * 
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":751
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_float32    float32_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":753
 * ctypedef npy_uint64     uint64_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":754
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":761
 * ctypedef double complex complex128_t
 * 
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":762
 * 
 * ctypedef npy_longlong   longlong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":764
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":765
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef float complex       cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "pyoctomap/octomap.pyx":9
 * import numpy as np
 * cimport numpy as np
 * ctypedef np.float64_t DOUBLE_t             # <<<<<<<<<<<<<<
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator* tree_iterator_ptr
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator* leaf_iterator_ptr
 */
typedef __pyx_t_5numpy_float64_t __pyx_t_9pyoctomap_7octomap_DOUBLE_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< long double > __pyx_t_long_double_complex;
  #else
    typedef long double _Complex __pyx_t_long_double_complex;
  #endif
#else
    typedef struct { long double real, imag; } __pyx_t_long_double_complex;
#endif
static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double, long double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey;
struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode;
struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator;
struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator;
struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator;
struct __pyx_obj_9pyoctomap_7octomap_OcTree;

/* "pyoctomap/octomap.pyx":10
 * cimport numpy as np
 * ctypedef np.float64_t DOUBLE_t
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator* tree_iterator_ptr             # <<<<<<<<<<<<<<
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator* leaf_iterator_ptr
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator* leaf_bbx_iterator_ptr
 */
typedef octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::tree_iterator *__pyx_t_9pyoctomap_7octomap_tree_iterator_ptr;

/* "pyoctomap/octomap.pyx":11
 * ctypedef np.float64_t DOUBLE_t
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator* tree_iterator_ptr
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator* leaf_iterator_ptr             # <<<<<<<<<<<<<<
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator* leaf_bbx_iterator_ptr
 * 
 */
typedef octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_iterator *__pyx_t_9pyoctomap_7octomap_leaf_iterator_ptr;

/* "pyoctomap/octomap.pyx":12
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator* tree_iterator_ptr
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator* leaf_iterator_ptr
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator* leaf_bbx_iterator_ptr             # <<<<<<<<<<<<<<
 * 
 * class NullPointerException(Exception):
 */
typedef octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_bbx_iterator *__pyx_t_9pyoctomap_7octomap_leaf_bbx_iterator_ptr;

/* "pyoctomap/octomap.pyx":21
 *         pass
 * 
 * cdef class OcTreeKey:             # <<<<<<<<<<<<<<
 *     """
 *     OcTreeKey is a container class for internal key addressing.
 */
struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey {
  PyObject_HEAD
  struct octomap::OcTreeKey thisptr;
};


/* "pyoctomap/octomap.pyx":67
 *         return OcTreeKey(result.k[0], result.k[1], result.k[2])
 * 
 * cdef class OcTreeNode:             # <<<<<<<<<<<<<<
 *     """
 *     Nodes to be used in OcTree.
 */
struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode {
  PyObject_HEAD
  octomap::OcTreeNode *thisptr;
};


/* "pyoctomap/octomap.pyx":141
 * # Simplified iterator classes that work around Cython template limitations
 * 
 * cdef class SimpleTreeIterator:             # <<<<<<<<<<<<<<
 *     """
 *     Robust wrapper around octomap C++ tree_iterator.
 */
struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator {
  PyObject_HEAD
  PyObject *_tree;
  __pyx_t_9pyoctomap_7octomap_tree_iterator_ptr _it;
  __pyx_t_9pyoctomap_7octomap_tree_iterator_ptr _end;
  int _is_end;
  unsigned long _expected_version;
  PyObject *_current_node;
  PyObject *_current_coord;
  double _current_size;
  int _current_depth;
};


/* "pyoctomap/octomap.pyx":238
 * 
 * 
 * cdef class SimpleLeafIterator:             # <<<<<<<<<<<<<<
 *     """
 *     Robust wrapper around octomap C++ leaf_iterator.
 */
struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator {
  PyObject_HEAD
  PyObject *_tree;
  __pyx_t_9pyoctomap_7octomap_leaf_iterator_ptr _it;
  __pyx_t_9pyoctomap_7octomap_leaf_iterator_ptr _end;
  int _is_end;
  unsigned long _expected_version;
  PyObject *_current_node;
  PyObject *_current_coord;
  double _current_size;
  int _current_depth;
};


/* "pyoctomap/octomap.pyx":339
 *         return self._current_node
 * 
 * cdef class SimpleLeafBBXIterator:             # <<<<<<<<<<<<<<
 *     """
 *     Robust wrapper around octomap C++ leaf_bbx_iterator.
 */
struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator {
  PyObject_HEAD
  PyObject *_tree;
  __pyx_t_9pyoctomap_7octomap_leaf_bbx_iterator_ptr _it;
  __pyx_t_9pyoctomap_7octomap_leaf_bbx_iterator_ptr _end;
  int _is_end;
  unsigned long _expected_version;
  PyObject *_current_node;
  PyObject *_current_coord;
  double _current_size;
  int _current_depth;
};


/* "pyoctomap/octomap.pyx":470
 *     return tree
 * 
 * cdef class OcTree:             # <<<<<<<<<<<<<<
 *     """
 *     octomap main map data structure, stores 3D occupancy grid map in an OcTree.
 */
struct __pyx_obj_9pyoctomap_7octomap_OcTree {
  PyObject_HEAD
  struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *__pyx_vtab;
  octomap::OcTree *thisptr;
  DynamicEDTOctomap *edtptr;
  int owner;
  unsigned long _mod_version;
};



struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree {
  bool (*_add_single_point_optimized)(struct __pyx_obj_9pyoctomap_7octomap_OcTree *, PyArrayObject *, PyArrayObject *);
  void (*_mark_free_space_optimized)(struct __pyx_obj_9pyoctomap_7octomap_OcTree *, PyArrayObject *, PyArrayObject *);
  int (*_process_points_vectorized)(struct __pyx_obj_9pyoctomap_7octomap_OcTree *, PyArrayObject *, PyArrayObject *, int);
  void (*_build_pointcloud_and_insert)(struct __pyx_obj_9pyoctomap_7octomap_OcTree *, PyArrayObject *, PyArrayObject *, double, int, int);
};
static struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *__pyx_vtabptr_9pyoctomap_7octomap_OcTree;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    char* as_c_string;
    Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
    as_c_string = PyBytes_AS_STRING(string);
    size = PyBytes_GET_SIZE(string);
#else
    if (PyBytes_AsStringAndSize(string, &as_c_string, &size) < 0) {
        return NULL;
    }
#endif
    return __Pyx_decode_c_bytes(
        as_c_string, size,
        start, stop, encoding, errors, decode_func);
}

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_8
#define __PYX_HAVE_RT_ImportType_proto_3_0_8
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_8(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_8 {
   __Pyx_ImportType_CheckSize_Error_3_0_8 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_8 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_8 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size);
#endif

/* Py3UpdateBases.proto */
static PyObject* __Pyx_PEP560_update_bases(PyObject *bases);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* FetchCommonType.proto */
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#else
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *typesModule=NULL, *methodType=NULL, *result=NULL;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    typesModule = PyImport_ImportModule("types");
    if (!typesModule) return NULL;
    methodType = PyObject_GetAttrString(typesModule, "MethodType");
    Py_DECREF(typesModule);
    if (!methodType) return NULL;
    result = PyObject_CallFunctionObjArgs(methodType, func, self, NULL);
    Py_DECREF(methodType);
    return result;
}
#elif PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc);
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_long__double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_long__double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_long__double(a, b) ((a)-(b))
    #define __Pyx_c_prod_long__double(a, b) ((a)*(b))
    #define __Pyx_c_quot_long__double(a, b) ((a)/(b))
    #define __Pyx_c_neg_long__double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_long__double(z) ((z)==(long double)0)
    #define __Pyx_c_conj_long__double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (::std::abs(z))
        #define __Pyx_c_pow_long__double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_long__double(z) ((z)==0)
    #define __Pyx_c_conj_long__double(z)    (conjl(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (cabsl(z))
        #define __Pyx_c_pow_long__double(a, b)  (cpowl(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex);
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex);
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE octomap::key_type __Pyx_PyInt_As_octomap_3a__3a_key_type(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_octomap_3a__3a_key_type(octomap::key_type value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_intp(npy_intp value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/
static bool __pyx_f_9pyoctomap_7octomap_6OcTree__add_single_point_optimized(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_point, PyArrayObject *__pyx_v_sensor_origin); /* proto*/
static void __pyx_f_9pyoctomap_7octomap_6OcTree__mark_free_space_optimized(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_origin, PyArrayObject *__pyx_v_end_point); /* proto*/
static int __pyx_f_9pyoctomap_7octomap_6OcTree__process_points_vectorized(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_origin, int __pyx_v_num_points); /* proto*/
static void __pyx_f_9pyoctomap_7octomap_6OcTree__build_pointcloud_and_insert(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_point_cloud, PyArrayObject *__pyx_v_sensor_origin, double __pyx_v_max_range, int __pyx_v_discretize, int __pyx_v_lazy_eval); /* proto*/

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp" */

/* Module declarations from "octomap_defs" */

/* Module declarations from "dynamicEDT3D_defs" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "pyoctomap.octomap" */
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t = { "DOUBLE_t", NULL, sizeof(__pyx_t_9pyoctomap_7octomap_DOUBLE_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, __PYX_IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', __PYX_IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), { 0 }, 0, __PYX_IS_UNSIGNED(__pyx_t_5numpy_int64_t) ? 'U' : 'I', __PYX_IS_UNSIGNED(__pyx_t_5numpy_int64_t), 0 };
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "pyoctomap.octomap"
extern int __pyx_module_is_main_pyoctomap__octomap;
int __pyx_module_is_main_pyoctomap__octomap = 0;

/* Implementation of "pyoctomap.octomap" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__3[] = ", ";
static const char __pyx_k__4[] = ")";
static const char __pyx_k__6[] = "*";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_it[] = "it";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_pc[] = "pc";
static const char __pyx_k_pt[] = "pt";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_chk[] = "chk";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_hit[] = "hit";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_iss[] = "iss";
static const char __pyx_k_itr[] = "itr";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_oss[] = "oss";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_ret[] = "_ret";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k__194[] = "?";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_full[] = "full";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_keep[] = "keep";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_node[] = "node";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_ones[] = "ones";
static const char __pyx_k_prob[] = "prob";
static const char __pyx_k_read[] = "read";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tree[] = "tree";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_child[] = "child";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_coord[] = "coord";
static const char __pyx_k_depth[] = "depth";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_end_2[] = "_end";
static const char __pyx_k_inBBX[] = "inBBX";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_point[] = "point";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ret_2[] = "ret";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_utf_8[] = "utf-8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_Number[] = "Number";
static const char __pyx_k_OcTree[] = "OcTree";
static const char __pyx_k_bbxSet[] = "bbxSet";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_isLeaf[] = "isLeaf";
static const char __pyx_k_key_in[] = "key_in";
static const char __pyx_k_labels[] = "labels";
static const char __pyx_k_linalg[] = "linalg";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_origin[] = "origin";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_bbx_max[] = "bbx_max";
static const char __pyx_k_bbx_min[] = "bbx_min";
static const char __pyx_k_castRay[] = "castRay";
static const char __pyx_k_checked[] = "checked";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_getRoot[] = "getRoot";
static const char __pyx_k_getSize[] = "getSize";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_key_out[] = "key_out";
static const char __pyx_k_maxdist[] = "maxdist";
static const char __pyx_k_newaxis[] = "newaxis";
static const char __pyx_k_nonzero[] = "nonzero";
static const char __pyx_k_numbers[] = "numbers";
static const char __pyx_k_point64[] = "_point64";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_success[] = "success";
static const char __pyx_k_addValue[] = "addValue";
static const char __pyx_k_end_tree[] = "end_tree";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getDepth[] = "getDepth";
static const char __pyx_k_getValue[] = "getValue";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_maxDepth[] = "maxDepth";
static const char __pyx_k_maxRange[] = "maxRange";
static const char __pyx_k_maxrange[] = "maxrange";
static const char __pyx_k_new_tree[] = "new_tree";
static const char __pyx_k_occupied[] = "occupied";
static const char __pyx_k_origin64[] = "_origin64";
static const char __pyx_k_origin_2[] = "_origin";
static const char __pyx_k_origin_c[] = "origin_c";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_setValue[] = "setValue";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_OcTreeKey[] = "OcTreeKey(";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_dimension[] = "dimension";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_distances[] = "distances";
static const char __pyx_k_empty_arr[] = "empty_arr";
static const char __pyx_k_end_leafs[] = "end_leafs";
static const char __pyx_k_end_point[] = "end_point";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_getBBXMax[] = "getBBXMax";
static const char __pyx_k_getBBXMin[] = "getBBXMin";
static const char __pyx_k_getLabels[] = "getLabels";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_key_tuple[] = "key_tuple";
static const char __pyx_k_lazy_eval[] = "lazy_eval";
static const char __pyx_k_max_range[] = "max_range";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_num_steps[] = "num_steps";
static const char __pyx_k_pruneNode[] = "pruneNode";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ret_prune[] = "_ret_prune";
static const char __pyx_k_setBBXMax[] = "setBBXMax";
static const char __pyx_k_setBBXMin[] = "setBBXMin";
static const char __pyx_k_step_size[] = "step_size";
static const char __pyx_k_thresProb[] = "thresProb";
static const char __pyx_k_OcTreeNode[] = "OcTreeNode";
static const char __pyx_k_begin_tree[] = "begin_tree";
static const char __pyx_k_c_filename[] = "c_filename";
static const char __pyx_k_coordToKey[] = "coordToKey";
static const char __pyx_k_deleteNode[] = "deleteNode";
static const char __pyx_k_discretize[] = "discretize";
static const char __pyx_k_expandNode[] = "expandNode";
static const char __pyx_k_found_node[] = "found_node";
static const char __pyx_k_getLogOdds[] = "getLogOdds";
static const char __pyx_k_getProbHit[] = "getProbHit";
static const char __pyx_k_keyToCoord[] = "keyToCoord";
static const char __pyx_k_num_points[] = "num_points";
static const char __pyx_k_pointcloud[] = "pointcloud";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_ray_length[] = "ray_length";
static const char __pyx_k_readBinary[] = "readBinary";
static const char __pyx_k_resolution[] = "resolution";
static const char __pyx_k_search_key[] = "search_key";
static const char __pyx_k_setLogOdds[] = "setLogOdds";
static const char __pyx_k_setProbHit[] = "setProbHit";
static const char __pyx_k_startswith[] = "startswith";
static const char __pyx_k_updateNode[] = "updateNode";
static const char __pyx_k_update_key[] = "update_key";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_OcTreeKey_2[] = "OcTreeKey";
static const char __pyx_k_OcTree_read[] = "OcTree.read";
static const char __pyx_k_OcTree_size[] = "OcTree.size";
static const char __pyx_k_begin_leafs[] = "begin_leafs";
static const char __pyx_k_childExists[] = "childExists";
static const char __pyx_k_concatenate[] = "concatenate";
static const char __pyx_k_direction_2[] = "_direction";
static const char __pyx_k_getProbMiss[] = "getProbMiss";
static const char __pyx_k_getTreeType[] = "getTreeType";
static const char __pyx_k_hasChildren[] = "hasChildren";
static const char __pyx_k_is_occupied[] = "is_occupied";
static const char __pyx_k_memoryUsage[] = "memoryUsage";
static const char __pyx_k_mro_entries[] = "__mro_entries__";
static const char __pyx_k_octree_read[] = "_octree_read";
static const char __pyx_k_point_cloud[] = "point_cloud";
static const char __pyx_k_setProbMiss[] = "setProbMiss";
static const char __pyx_k_unique_keys[] = "unique_keys";
static const char __pyx_k_updateNodes[] = "updateNodes";
static const char __pyx_k_useBBXLimit[] = "useBBXLimit";
static const char __pyx_k_writeBinary[] = "writeBinary";
static const char __pyx_k_OcTree_clear[] = "OcTree.clear";
static const char __pyx_k_OcTree_inBBX[] = "OcTree.inBBX";
static const char __pyx_k_OcTree_write[] = "OcTree.write";
static const char __pyx_k_calcNumNodes[] = "calcNumNodes";
static const char __pyx_k_column_stack[] = "column_stack";
static const char __pyx_k_getBBXBounds[] = "getBBXBounds";
static const char __pyx_k_getBBXCenter[] = "getBBXCenter";
static const char __pyx_k_getMetricMax[] = "getMetricMax";
static const char __pyx_k_getMetricMin[] = "getMetricMin";
static const char __pyx_k_getNodeChild[] = "getNodeChild";
static const char __pyx_k_getOccupancy[] = "getOccupancy";
static const char __pyx_k_getTreeDepth[] = "getTreeDepth";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_occupied_arr[] = "occupied_arr";
static const char __pyx_k_sample_point[] = "sample_point";
static const char __pyx_k_search_point[] = "search_point";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_OcTree_bbxSet[] = "OcTree.bbxSet";
static const char __pyx_k_OcTree_search[] = "OcTree.search";
static const char __pyx_k_OcTree_volume[] = "OcTree.volume";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_end_leafs_bbx[] = "end_leafs_bbx";
static const char __pyx_k_getCoordinate[] = "getCoordinate";
static const char __pyx_k_getMetricSize[] = "getMetricSize";
static const char __pyx_k_getProbHitLog[] = "getProbHitLog";
static const char __pyx_k_getResolution[] = "getResolution";
static const char __pyx_k_init_subclass[] = "__init_subclass__";
static const char __pyx_k_raw_dimension[] = "raw_dimension";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_sensor_origin[] = "sensor_origin";
static const char __pyx_k_setResolution[] = "setResolution";
static const char __pyx_k_success_count[] = "success_count";
static const char __pyx_k_OcTree_castRay[] = "OcTree.castRay";
static const char __pyx_k_OcTree_getRoot[] = "OcTree.getRoot";
static const char __pyx_k_getProbMissLog[] = "getProbMissLog";
static const char __pyx_k_isNodeOccupied[] = "isNodeOccupied";
static const char __pyx_k_memoryFullGrid[] = "memoryFullGrid";
static const char __pyx_k_sampled_points[] = "_sampled_points";
static const char __pyx_k_updateRealDist[] = "updateRealDist";
static const char __pyx_k_OcTree_end_tree[] = "OcTree.end_tree";
static const char __pyx_k_begin_leafs_bbx[] = "begin_leafs_bbx";
static const char __pyx_k_computeChildIdx[] = "computeChildIdx";
static const char __pyx_k_computeIndexKey[] = "computeIndexKey";
static const char __pyx_k_createNodeChild[] = "createNodeChild";
static const char __pyx_k_deleteNodeChild[] = "deleteNodeChild";
static const char __pyx_k_discrete_points[] = "discrete_points";
static const char __pyx_k_filtered_points[] = "filtered_points";
static const char __pyx_k_getNumLeafNodes[] = "getNumLeafNodes";
static const char __pyx_k_memoryUsageNode[] = "memoryUsageNode";
static const char __pyx_k_nodeHasChildren[] = "nodeHasChildren";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_toMaxLikelihood[] = "toMaxLikelihood";
static const char __pyx_k_OcTree_end_leafs[] = "OcTree.end_leafs";
static const char __pyx_k_OcTree_getBBXMax[] = "OcTree.getBBXMax";
static const char __pyx_k_OcTree_getBBXMin[] = "OcTree.getBBXMin";
static const char __pyx_k_OcTree_getLabels[] = "OcTree.getLabels";
static const char __pyx_k_OcTree_pruneNode[] = "OcTree.pruneNode";
static const char __pyx_k_OcTree_setBBXMax[] = "OcTree.setBBXMax";
static const char __pyx_k_OcTree_setBBXMin[] = "OcTree.setBBXMin";
static const char __pyx_k_adjustKeyAtDepth[] = "adjustKeyAtDepth";
static const char __pyx_k_insertPointCloud[] = "insertPointCloud";
static const char __pyx_k_OcTree_begin_tree[] = "OcTree.begin_tree";
static const char __pyx_k_OcTree_coordToKey[] = "OcTree.coordToKey";
static const char __pyx_k_OcTree_deleteNode[] = "OcTree.deleteNode";
static const char __pyx_k_OcTree_expandNode[] = "OcTree.expandNode";
static const char __pyx_k_OcTree_getProbHit[] = "OcTree.getProbHit";
static const char __pyx_k_OcTree_keyToCoord[] = "OcTree.keyToCoord";
static const char __pyx_k_OcTree_readBinary[] = "OcTree.readBinary";
static const char __pyx_k_OcTree_setProbHit[] = "OcTree.setProbHit";
static const char __pyx_k_OcTree_updateNode[] = "OcTree.updateNode";
static const char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
static const char __pyx_k_coordToKeyChecked[] = "coordToKeyChecked";
static const char __pyx_k_dynamicEDT_update[] = "dynamicEDT_update";
static const char __pyx_k_extractPointCloud[] = "extractPointCloud";
static const char __pyx_k_getOccupancyThres[] = "getOccupancyThres";
static const char __pyx_k_isNodeAtThreshold[] = "isNodeAtThreshold";
static const char __pyx_k_isNodeCollapsible[] = "isNodeCollapsible";
static const char __pyx_k_pyoctomap_octomap[] = "pyoctomap.octomap";
static const char __pyx_k_setOccupancyThres[] = "setOccupancyThres";
static const char __pyx_k_OcTree_begin_leafs[] = "OcTree.begin_leafs";
static const char __pyx_k_OcTree_getProbMiss[] = "OcTree.getProbMiss";
static const char __pyx_k_OcTree_getTreeType[] = "OcTree.getTreeType";
static const char __pyx_k_OcTree_memoryUsage[] = "OcTree.memoryUsage";
static const char __pyx_k_OcTree_setProbMiss[] = "OcTree.setProbMiss";
static const char __pyx_k_OcTree_updateNodes[] = "OcTree.updateNodes";
static const char __pyx_k_OcTree_useBBXLimit[] = "OcTree.useBBXLimit";
static const char __pyx_k_OcTree_writeBinary[] = "OcTree.writeBinary";
static const char __pyx_k_SimpleLeafIterator[] = "SimpleLeafIterator";
static const char __pyx_k_SimpleTreeIterator[] = "SimpleTreeIterator";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_getMaxChildLogOdds[] = "getMaxChildLogOdds";
static const char __pyx_k_ignoreUnknownCells[] = "ignoreUnknownCells";
static const char __pyx_k_Expected_OcTreeNode[] = "Expected OcTreeNode";
static const char __pyx_k_OcTreeNode_addValue[] = "OcTreeNode.addValue";
static const char __pyx_k_OcTreeNode_getValue[] = "OcTreeNode.getValue";
static const char __pyx_k_OcTreeNode_setValue[] = "OcTreeNode.setValue";
static const char __pyx_k_OcTree_calcNumNodes[] = "OcTree.calcNumNodes";
static const char __pyx_k_OcTree_getBBXBounds[] = "OcTree.getBBXBounds";
static const char __pyx_k_OcTree_getBBXCenter[] = "OcTree.getBBXCenter";
static const char __pyx_k_OcTree_getMetricMax[] = "OcTree.getMetricMax";
static const char __pyx_k_OcTree_getMetricMin[] = "OcTree.getMetricMin";
static const char __pyx_k_OcTree_getNodeChild[] = "OcTree.getNodeChild";
static const char __pyx_k_OcTree_getTreeDepth[] = "OcTree.getTreeDepth";
static const char __pyx_k_Octomap_OcTree_file[] = "# Octomap OcTree file";
static const char __pyx_k_dynamicEDT_generate[] = "dynamicEDT_generate";
static const char __pyx_k_getClampingThresMax[] = "getClampingThresMax";
static const char __pyx_k_getClampingThresMin[] = "getClampingThresMin";
static const char __pyx_k_setClampingThresMax[] = "setClampingThresMax";
static const char __pyx_k_setClampingThresMin[] = "setClampingThresMin";
static const char __pyx_k_NullPointerException[] = "NullPointerException";
static const char __pyx_k_OcTree_end_leafs_bbx[] = "OcTree.end_leafs_bbx";
static const char __pyx_k_OcTree_getMetricSize[] = "OcTree.getMetricSize";
static const char __pyx_k_OcTree_getProbHitLog[] = "OcTree.getProbHitLog";
static const char __pyx_k_OcTree_getResolution[] = "OcTree.getResolution";
static const char __pyx_k_OcTree_setResolution[] = "OcTree.setResolution";
static const char __pyx_k_discretizePointCloud[] = "_discretizePointCloud";
static const char __pyx_k_getOccupancyThresLog[] = "getOccupancyThresLog";
static const char __pyx_k_insertPointCloudFast[] = "insertPointCloudFast";
static const char __pyx_k_resetChangeDetection[] = "resetChangeDetection";
static const char __pyx_k_updateInnerOccupancy[] = "updateInnerOccupancy";
static const char __pyx_k_OcTreeNode_getLogOdds[] = "OcTreeNode.getLogOdds";
static const char __pyx_k_OcTreeNode_setLogOdds[] = "OcTreeNode.setLogOdds";
static const char __pyx_k_OcTree_getProbMissLog[] = "OcTree.getProbMissLog";
static const char __pyx_k_OcTree_isNodeOccupied[] = "OcTree.isNodeOccupied";
static const char __pyx_k_OcTree_memoryFullGrid[] = "OcTree.memoryFullGrid";
static const char __pyx_k_SimpleLeafBBXIterator[] = "SimpleLeafBBXIterator";
static const char __pyx_k_dynamicEDT_getMaxDist[] = "dynamicEDT_getMaxDist";
static const char __pyx_k_markFreeSpaceAlongRay[] = "markFreeSpaceAlongRay";
static const char __pyx_k_pyoctomap_octomap_pyx[] = "pyoctomap/octomap.pyx";
static const char __pyx_k_Null_pointer_exception[] = "\n    Null pointer exception\n    ";
static const char __pyx_k_OcTreeNode_childExists[] = "OcTreeNode.childExists";
static const char __pyx_k_OcTreeNode_hasChildren[] = "OcTreeNode.hasChildren";
static const char __pyx_k_OcTree___reduce_cython[] = "OcTree.__reduce_cython__";
static const char __pyx_k_OcTree_begin_leafs_bbx[] = "OcTree.begin_leafs_bbx";
static const char __pyx_k_OcTree_createNodeChild[] = "OcTree.createNodeChild";
static const char __pyx_k_OcTree_deleteNodeChild[] = "OcTree.deleteNodeChild";
static const char __pyx_k_OcTree_getNumLeafNodes[] = "OcTree.getNumLeafNodes";
static const char __pyx_k_OcTree_memoryUsageNode[] = "OcTree.memoryUsageNode";
static const char __pyx_k_OcTree_nodeHasChildren[] = "OcTree.nodeHasChildren";
static const char __pyx_k_OcTree_toMaxLikelihood[] = "OcTree.toMaxLikelihood";
static const char __pyx_k_addPointWithRayCasting[] = "addPointWithRayCasting";
static const char __pyx_k_dynamicEDT_getDistance[] = "dynamicEDT_getDistance";
static const char __pyx_k_getClampingThresMaxLog[] = "getClampingThresMaxLog";
static const char __pyx_k_getClampingThresMinLog[] = "getClampingThresMinLog";
static const char __pyx_k_treatUnknownAsOccupied[] = "treatUnknownAsOccupied";
static const char __pyx_k_update_inner_occupancy[] = "update_inner_occupancy";
static const char __pyx_k_OcTreeNode_getOccupancy[] = "OcTreeNode.getOccupancy";
static const char __pyx_k_OcTree_adjustKeyAtDepth[] = "OcTree.adjustKeyAtDepth";
static const char __pyx_k_OcTree_insertPointCloud[] = "OcTree.insertPointCloud";
static const char __pyx_k_updateOccupancyChildren[] = "updateOccupancyChildren";
static const char __pyx_k_OcTree___setstate_cython[] = "OcTree.__setstate_cython__";
static const char __pyx_k_OcTree_coordToKeyChecked[] = "OcTree.coordToKeyChecked";
static const char __pyx_k_OcTree_dynamicEDT_update[] = "OcTree.dynamicEDT_update";
static const char __pyx_k_OcTree_extractPointCloud[] = "OcTree.extractPointCloud";
static const char __pyx_k_OcTree_getOccupancyThres[] = "OcTree.getOccupancyThres";
static const char __pyx_k_OcTree_isNodeAtThreshold[] = "OcTree.isNodeAtThreshold";
static const char __pyx_k_OcTree_isNodeCollapsible[] = "OcTree.isNodeCollapsible";
static const char __pyx_k_OcTree_setOccupancyThres[] = "OcTree.setOccupancyThres";
static const char __pyx_k_insertPointCloudRaysFast[] = "insertPointCloudRaysFast";
static const char __pyx_k_OcTreeKey___reduce_cython[] = "OcTreeKey.__reduce_cython__";
static const char __pyx_k_OcTreeKey_computeChildIdx[] = "OcTreeKey.computeChildIdx";
static const char __pyx_k_OcTreeKey_computeIndexKey[] = "OcTreeKey.computeIndexKey";
static const char __pyx_k_SimpleLeafIterator_isLeaf[] = "SimpleLeafIterator.isLeaf";
static const char __pyx_k_SimpleTreeIterator_isLeaf[] = "SimpleTreeIterator.isLeaf";
static const char __pyx_k_OcTreeNode___reduce_cython[] = "OcTreeNode.__reduce_cython__";
static const char __pyx_k_OcTree_dynamicEDT_generate[] = "OcTree.dynamicEDT_generate";
static const char __pyx_k_OcTree_getClampingThresMax[] = "OcTree.getClampingThresMax";
static const char __pyx_k_OcTree_getClampingThresMin[] = "OcTree.getClampingThresMin";
static const char __pyx_k_OcTree_setClampingThresMax[] = "OcTree.setClampingThresMax";
static const char __pyx_k_OcTree_setClampingThresMin[] = "OcTree.setClampingThresMin";
static const char __pyx_k_SimpleLeafIterator_getSize[] = "SimpleLeafIterator.getSize";
static const char __pyx_k_SimpleTreeIterator_getSize[] = "SimpleTreeIterator.getSize";
static const char __pyx_k_NullPointerException___init[] = "NullPointerException.__init__";
static const char __pyx_k_OcTreeKey___setstate_cython[] = "OcTreeKey.__setstate_cython__";
static const char __pyx_k_OcTree_getOccupancyThresLog[] = "OcTree.getOccupancyThresLog";
static const char __pyx_k_OcTree_insertPointCloudFast[] = "OcTree.insertPointCloudFast";
static const char __pyx_k_OcTree_resetChangeDetection[] = "OcTree.resetChangeDetection";
static const char __pyx_k_OcTree_updateInnerOccupancy[] = "OcTree.updateInnerOccupancy";
static const char __pyx_k_SimpleLeafIterator_getDepth[] = "SimpleLeafIterator.getDepth";
static const char __pyx_k_SimpleTreeIterator_getDepth[] = "SimpleTreeIterator.getDepth";
static const char __pyx_k_addPointCloudWithRayCasting[] = "addPointCloudWithRayCasting";
static const char __pyx_k_dynamicEDT_checkConsistency[] = "dynamicEDT_checkConsistency";
static const char __pyx_k_OcTreeNode___setstate_cython[] = "OcTreeNode.__setstate_cython__";
static const char __pyx_k_OcTree__discretizePointCloud[] = "OcTree._discretizePointCloud";
static const char __pyx_k_OcTree_dynamicEDT_getMaxDist[] = "OcTree.dynamicEDT_getMaxDist";
static const char __pyx_k_OcTree_markFreeSpaceAlongRay[] = "OcTree.markFreeSpaceAlongRay";
static const char __pyx_k_SimpleLeafBBXIterator_isLeaf[] = "SimpleLeafBBXIterator.isLeaf";
static const char __pyx_k_OcTreeNode_getMaxChildLogOdds[] = "OcTreeNode.getMaxChildLogOdds";
static const char __pyx_k_OcTree_addPointWithRayCasting[] = "OcTree.addPointWithRayCasting";
static const char __pyx_k_OcTree_dynamicEDT_getDistance[] = "OcTree.dynamicEDT_getDistance";
static const char __pyx_k_OcTree_getClampingThresMaxLog[] = "OcTree.getClampingThresMaxLog";
static const char __pyx_k_OcTree_getClampingThresMinLog[] = "OcTree.getClampingThresMinLog";
static const char __pyx_k_SimpleLeafBBXIterator_getSize[] = "SimpleLeafBBXIterator.getSize";
static const char __pyx_k_SimpleLeafBBXIterator_getDepth[] = "SimpleLeafBBXIterator.getDepth";
static const char __pyx_k_Error_in_point_cloud_processing[] = "Error in point cloud processing: ";
static const char __pyx_k_Expected_OcTreeNode_or_iterator[] = "Expected OcTreeNode or iterator, got ";
static const char __pyx_k_OcTree_insertPointCloudRaysFast[] = "OcTree.insertPointCloudRaysFast";
static const char __pyx_k_OcTreeNode_updateOccupancyChildr[] = "OcTreeNode.updateOccupancyChildren";
static const char __pyx_k_OcTree_addPointCloudWithRayCasti[] = "OcTree.addPointCloudWithRayCasting";
static const char __pyx_k_OcTree_dynamicEDT_checkConsisten[] = "OcTree.dynamicEDT_checkConsistency";
static const char __pyx_k_SimpleLeafBBXIterator___reduce_c[] = "SimpleLeafBBXIterator.__reduce_cython__";
static const char __pyx_k_SimpleLeafBBXIterator___setstate[] = "SimpleLeafBBXIterator.__setstate_cython__";
static const char __pyx_k_SimpleLeafBBXIterator_getCoordin[] = "SimpleLeafBBXIterator.getCoordinate";
static const char __pyx_k_SimpleLeafIterator___reduce_cyth[] = "SimpleLeafIterator.__reduce_cython__";
static const char __pyx_k_SimpleLeafIterator___setstate_cy[] = "SimpleLeafIterator.__setstate_cython__";
static const char __pyx_k_SimpleLeafIterator_getCoordinate[] = "SimpleLeafIterator.getCoordinate";
static const char __pyx_k_SimpleTreeIterator___reduce_cyth[] = "SimpleTreeIterator.__reduce_cython__";
static const char __pyx_k_SimpleTreeIterator___setstate_cy[] = "SimpleTreeIterator.__setstate_cython__";
static const char __pyx_k_SimpleTreeIterator_getCoordinate[] = "SimpleTreeIterator.getCoordinate";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy__core_multiarray_failed_to[] = "numpy._core.multiarray failed to import";
static const char __pyx_k_numpy__core_umath_failed_to_impo[] = "numpy._core.umath failed to import";
/* #### Code section: decls ### */
static PyObject *__pyx_pf_9pyoctomap_7octomap_20NullPointerException___init__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self); /* proto */
static int __pyx_pf_9pyoctomap_7octomap_9OcTreeKey___cinit__(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, unsigned short __pyx_v_a, unsigned short __pyx_v_b, unsigned short __pyx_v_c); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_2__richcmp__(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_4__getitem__(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, unsigned int __pyx_v_i); /* proto */
static int __pyx_pf_9pyoctomap_7octomap_9OcTreeKey_6__setitem__(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, unsigned int __pyx_v_i, unsigned int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_8__repr__(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_10computeChildIdx(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key, int __pyx_v_depth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_12computeIndexKey(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, unsigned int __pyx_v_level, struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_9pyoctomap_7octomap_10OcTreeNode___cinit__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self); /* proto */
static void __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_4addValue(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self, float __pyx_v_p); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_6childExists(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self, unsigned int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_8getValue(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_10setValue(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self, float __pyx_v_v); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_12getOccupancy(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_14getLogOdds(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_16setLogOdds(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self, float __pyx_v_l); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_18hasChildren(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_20getMaxChildLogOdds(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_22updateOccupancyChildren(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator___dealloc__(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self); /* proto */
static int __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_2__cinit__(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self); /* proto */
static int __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_4__init__(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_tree, PyObject *__pyx_v_maxDepth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_6__iter__(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_8__next__(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_10getCoordinate(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_12getSize(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_14getDepth(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_16isLeaf(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator___dealloc__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self); /* proto */
static int __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_2__cinit__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self); /* proto */
static int __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_4__init__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_tree, PyObject *__pyx_v_maxDepth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_6__iter__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_8__next__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_10getCoordinate(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_12getSize(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_14getDepth(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_16isLeaf(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_12current_node___get__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator___dealloc__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static int __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_2__cinit__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static int __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_4__init__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_tree, PyArrayObject *__pyx_v_bbx_min, PyArrayObject *__pyx_v_bbx_max, PyObject *__pyx_v_maxDepth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_6__iter__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_8__next__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_10getCoordinate(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_12getSize(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_14getDepth(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_16isLeaf(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_12current_node___get__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_6is_end___get__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap__octree_read(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static int __pyx_pf_9pyoctomap_7octomap_6OcTree___cinit__(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_9pyoctomap_7octomap_6OcTree_2__dealloc__(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_4adjustKeyAtDepth(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key, PyObject *__pyx_v_depth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_6bbxSet(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_8calcNumNodes(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_10clear(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_12coordToKey(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_coord, PyObject *__pyx_v_depth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_14coordToKeyChecked(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_coord, PyObject *__pyx_v_depth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_16deleteNode(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_value, PyObject *__pyx_v_depth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_18castRay(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_origin, PyObject *__pyx_v_direction, PyObject *__pyx_v_end, PyObject *__pyx_v_ignoreUnknownCells, PyObject *__pyx_v_maxRange); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_20read(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_22write(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_24readBinary(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_26writeBinary(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_28isNodeOccupied(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_30isNodeAtThreshold(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_32getLabels(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_points); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_34extractPointCloud(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_36insertPointCloud(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_pointcloud, PyObject *__pyx_v_origin, PyObject *__pyx_v_maxrange, PyObject *__pyx_v_lazy_eval, PyObject *__pyx_v_discretize); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_38begin_tree(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_maxDepth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_40begin_leafs(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_maxDepth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_42begin_leafs_bbx(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_bbx_min, PyArrayObject *__pyx_v_bbx_max, PyObject *__pyx_v_maxDepth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_44end_tree(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_46end_leafs(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_48end_leafs_bbx(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_50getBBXBounds(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_52getBBXCenter(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_54getBBXMax(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_56getBBXMin(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_58getRoot(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_60getNumLeafNodes(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_62getResolution(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_64getTreeDepth(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_66getTreeType(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_68inBBX(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_70keyToCoord(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key, PyObject *__pyx_v_depth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_72memoryFullGrid(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_74memoryUsage(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_76memoryUsageNode(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_78resetChangeDetection(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_80search(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_depth); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_82setBBXMax(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_max); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_84setBBXMin(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_min); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_86setResolution(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_r); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_88size(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_90toMaxLikelihood(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_92updateNodes(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_values, PyObject *__pyx_v_update, PyObject *__pyx_v_lazy_eval); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_94updateNode(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_update, PyObject *__pyx_v_lazy_eval); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_96updateInnerOccupancy(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_98useBBXLimit(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_enable); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_100volume(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_102getClampingThresMax(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_104getClampingThresMaxLog(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_106getClampingThresMin(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_108getClampingThresMinLog(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_110getOccupancyThres(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_112getOccupancyThresLog(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_114getProbHit(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_116getProbHitLog(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_118getProbMiss(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_120getProbMissLog(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_122setClampingThresMax(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_thresProb); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_124setClampingThresMin(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_thresProb); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_126setOccupancyThres(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_prob); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_128setProbHit(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_prob); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_130setProbMiss(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_prob); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_132getMetricSize(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_134getMetricMin(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_136getMetricMax(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_138expandNode(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_140createNodeChild(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node, int __pyx_v_idx); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_142getNodeChild(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node, int __pyx_v_idx); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_144isNodeCollapsible(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_146deleteNodeChild(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node, int __pyx_v_idx); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_148pruneNode(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_150nodeHasChildren(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_152dynamicEDT_generate(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_maxdist, PyArrayObject *__pyx_v_bbx_min, PyArrayObject *__pyx_v_bbx_max, PyObject *__pyx_v_treatUnknownAsOccupied); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_154dynamicEDT_checkConsistency(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_156dynamicEDT_update(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_updateRealDist); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_158dynamicEDT_getMaxDist(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_160dynamicEDT_getDistance(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_162addPointWithRayCasting(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_point, PyObject *__pyx_v_sensor_origin, PyObject *__pyx_v_update_inner_occupancy); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_164markFreeSpaceAlongRay(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_origin, PyObject *__pyx_v_end_point, PyObject *__pyx_v_step_size); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_166addPointCloudWithRayCasting(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_point_cloud, PyObject *__pyx_v_sensor_origin, PyObject *__pyx_v_max_range, PyObject *__pyx_v_update_inner_occupancy, PyObject *__pyx_v_discretize); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_168_discretizePointCloud(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_point_cloud, int __pyx_v_checked); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_170insertPointCloudFast(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_point_cloud, PyObject *__pyx_v_sensor_origin, double __pyx_v_max_range, int __pyx_v_discretize, int __pyx_v_lazy_eval); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_172insertPointCloud(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_point_cloud, PyObject *__pyx_v_sensor_origin, double __pyx_v_max_range, int __pyx_v_lazy_eval, int __pyx_v_discretize); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_174insertPointCloudRaysFast(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_point_cloud, PyObject *__pyx_v_sensor_origin, double __pyx_v_max_range, int __pyx_v_lazy_eval); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_176__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_178__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_9pyoctomap_7octomap_OcTreeKey(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9pyoctomap_7octomap_OcTreeNode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9pyoctomap_7octomap_SimpleTreeIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9pyoctomap_7octomap_SimpleLeafIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9pyoctomap_7octomap_SimpleLeafBBXIterator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_9pyoctomap_7octomap_OcTree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type_9pyoctomap_7octomap_OcTreeKey;
  PyObject *__pyx_type_9pyoctomap_7octomap_OcTreeNode;
  PyObject *__pyx_type_9pyoctomap_7octomap_SimpleTreeIterator;
  PyObject *__pyx_type_9pyoctomap_7octomap_SimpleLeafIterator;
  PyObject *__pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator;
  PyObject *__pyx_type_9pyoctomap_7octomap_OcTree;
  #endif
  PyTypeObject *__pyx_ptype_9pyoctomap_7octomap_OcTreeKey;
  PyTypeObject *__pyx_ptype_9pyoctomap_7octomap_OcTreeNode;
  PyTypeObject *__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator;
  PyTypeObject *__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator;
  PyTypeObject *__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator;
  PyTypeObject *__pyx_ptype_9pyoctomap_7octomap_OcTree;
  PyObject *__pyx_kp_u_Error_in_point_cloud_processing;
  PyObject *__pyx_kp_u_Expected_OcTreeNode;
  PyObject *__pyx_kp_u_Expected_OcTreeNode_or_iterator;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_n_s_NullPointerException;
  PyObject *__pyx_n_s_NullPointerException___init;
  PyObject *__pyx_kp_s_Null_pointer_exception;
  PyObject *__pyx_n_s_Number;
  PyObject *__pyx_n_s_OcTree;
  PyObject *__pyx_kp_u_OcTreeKey;
  PyObject *__pyx_n_s_OcTreeKey_2;
  PyObject *__pyx_n_s_OcTreeKey___reduce_cython;
  PyObject *__pyx_n_s_OcTreeKey___setstate_cython;
  PyObject *__pyx_n_s_OcTreeKey_computeChildIdx;
  PyObject *__pyx_n_s_OcTreeKey_computeIndexKey;
  PyObject *__pyx_n_s_OcTreeNode;
  PyObject *__pyx_n_s_OcTreeNode___reduce_cython;
  PyObject *__pyx_n_s_OcTreeNode___setstate_cython;
  PyObject *__pyx_n_s_OcTreeNode_addValue;
  PyObject *__pyx_n_s_OcTreeNode_childExists;
  PyObject *__pyx_n_s_OcTreeNode_getLogOdds;
  PyObject *__pyx_n_s_OcTreeNode_getMaxChildLogOdds;
  PyObject *__pyx_n_s_OcTreeNode_getOccupancy;
  PyObject *__pyx_n_s_OcTreeNode_getValue;
  PyObject *__pyx_n_s_OcTreeNode_hasChildren;
  PyObject *__pyx_n_s_OcTreeNode_setLogOdds;
  PyObject *__pyx_n_s_OcTreeNode_setValue;
  PyObject *__pyx_n_s_OcTreeNode_updateOccupancyChildr;
  PyObject *__pyx_n_s_OcTree___reduce_cython;
  PyObject *__pyx_n_s_OcTree___setstate_cython;
  PyObject *__pyx_n_s_OcTree__discretizePointCloud;
  PyObject *__pyx_n_s_OcTree_addPointCloudWithRayCasti;
  PyObject *__pyx_n_s_OcTree_addPointWithRayCasting;
  PyObject *__pyx_n_s_OcTree_adjustKeyAtDepth;
  PyObject *__pyx_n_s_OcTree_bbxSet;
  PyObject *__pyx_n_s_OcTree_begin_leafs;
  PyObject *__pyx_n_s_OcTree_begin_leafs_bbx;
  PyObject *__pyx_n_s_OcTree_begin_tree;
  PyObject *__pyx_n_s_OcTree_calcNumNodes;
  PyObject *__pyx_n_s_OcTree_castRay;
  PyObject *__pyx_n_s_OcTree_clear;
  PyObject *__pyx_n_s_OcTree_coordToKey;
  PyObject *__pyx_n_s_OcTree_coordToKeyChecked;
  PyObject *__pyx_n_s_OcTree_createNodeChild;
  PyObject *__pyx_n_s_OcTree_deleteNode;
  PyObject *__pyx_n_s_OcTree_deleteNodeChild;
  PyObject *__pyx_n_s_OcTree_dynamicEDT_checkConsisten;
  PyObject *__pyx_n_s_OcTree_dynamicEDT_generate;
  PyObject *__pyx_n_s_OcTree_dynamicEDT_getDistance;
  PyObject *__pyx_n_s_OcTree_dynamicEDT_getMaxDist;
  PyObject *__pyx_n_s_OcTree_dynamicEDT_update;
  PyObject *__pyx_n_s_OcTree_end_leafs;
  PyObject *__pyx_n_s_OcTree_end_leafs_bbx;
  PyObject *__pyx_n_s_OcTree_end_tree;
  PyObject *__pyx_n_s_OcTree_expandNode;
  PyObject *__pyx_n_s_OcTree_extractPointCloud;
  PyObject *__pyx_n_s_OcTree_getBBXBounds;
  PyObject *__pyx_n_s_OcTree_getBBXCenter;
  PyObject *__pyx_n_s_OcTree_getBBXMax;
  PyObject *__pyx_n_s_OcTree_getBBXMin;
  PyObject *__pyx_n_s_OcTree_getClampingThresMax;
  PyObject *__pyx_n_s_OcTree_getClampingThresMaxLog;
  PyObject *__pyx_n_s_OcTree_getClampingThresMin;
  PyObject *__pyx_n_s_OcTree_getClampingThresMinLog;
  PyObject *__pyx_n_s_OcTree_getLabels;
  PyObject *__pyx_n_s_OcTree_getMetricMax;
  PyObject *__pyx_n_s_OcTree_getMetricMin;
  PyObject *__pyx_n_s_OcTree_getMetricSize;
  PyObject *__pyx_n_s_OcTree_getNodeChild;
  PyObject *__pyx_n_s_OcTree_getNumLeafNodes;
  PyObject *__pyx_n_s_OcTree_getOccupancyThres;
  PyObject *__pyx_n_s_OcTree_getOccupancyThresLog;
  PyObject *__pyx_n_s_OcTree_getProbHit;
  PyObject *__pyx_n_s_OcTree_getProbHitLog;
  PyObject *__pyx_n_s_OcTree_getProbMiss;
  PyObject *__pyx_n_s_OcTree_getProbMissLog;
  PyObject *__pyx_n_s_OcTree_getResolution;
  PyObject *__pyx_n_s_OcTree_getRoot;
  PyObject *__pyx_n_s_OcTree_getTreeDepth;
  PyObject *__pyx_n_s_OcTree_getTreeType;
  PyObject *__pyx_n_s_OcTree_inBBX;
  PyObject *__pyx_n_s_OcTree_insertPointCloud;
  PyObject *__pyx_n_s_OcTree_insertPointCloudFast;
  PyObject *__pyx_n_s_OcTree_insertPointCloudRaysFast;
  PyObject *__pyx_n_s_OcTree_isNodeAtThreshold;
  PyObject *__pyx_n_s_OcTree_isNodeCollapsible;
  PyObject *__pyx_n_s_OcTree_isNodeOccupied;
  PyObject *__pyx_n_s_OcTree_keyToCoord;
  PyObject *__pyx_n_s_OcTree_markFreeSpaceAlongRay;
  PyObject *__pyx_n_s_OcTree_memoryFullGrid;
  PyObject *__pyx_n_s_OcTree_memoryUsage;
  PyObject *__pyx_n_s_OcTree_memoryUsageNode;
  PyObject *__pyx_n_s_OcTree_nodeHasChildren;
  PyObject *__pyx_n_s_OcTree_pruneNode;
  PyObject *__pyx_n_s_OcTree_read;
  PyObject *__pyx_n_s_OcTree_readBinary;
  PyObject *__pyx_n_s_OcTree_resetChangeDetection;
  PyObject *__pyx_n_s_OcTree_search;
  PyObject *__pyx_n_s_OcTree_setBBXMax;
  PyObject *__pyx_n_s_OcTree_setBBXMin;
  PyObject *__pyx_n_s_OcTree_setClampingThresMax;
  PyObject *__pyx_n_s_OcTree_setClampingThresMin;
  PyObject *__pyx_n_s_OcTree_setOccupancyThres;
  PyObject *__pyx_n_s_OcTree_setProbHit;
  PyObject *__pyx_n_s_OcTree_setProbMiss;
  PyObject *__pyx_n_s_OcTree_setResolution;
  PyObject *__pyx_n_s_OcTree_size;
  PyObject *__pyx_n_s_OcTree_toMaxLikelihood;
  PyObject *__pyx_n_s_OcTree_updateInnerOccupancy;
  PyObject *__pyx_n_s_OcTree_updateNode;
  PyObject *__pyx_n_s_OcTree_updateNodes;
  PyObject *__pyx_n_s_OcTree_useBBXLimit;
  PyObject *__pyx_n_s_OcTree_volume;
  PyObject *__pyx_n_s_OcTree_write;
  PyObject *__pyx_n_s_OcTree_writeBinary;
  PyObject *__pyx_kp_b_Octomap_OcTree_file;
  PyObject *__pyx_n_s_SimpleLeafBBXIterator;
  PyObject *__pyx_n_s_SimpleLeafBBXIterator___reduce_c;
  PyObject *__pyx_n_s_SimpleLeafBBXIterator___setstate;
  PyObject *__pyx_n_s_SimpleLeafBBXIterator_getCoordin;
  PyObject *__pyx_n_s_SimpleLeafBBXIterator_getDepth;
  PyObject *__pyx_n_s_SimpleLeafBBXIterator_getSize;
  PyObject *__pyx_n_s_SimpleLeafBBXIterator_isLeaf;
  PyObject *__pyx_n_s_SimpleLeafIterator;
  PyObject *__pyx_n_s_SimpleLeafIterator___reduce_cyth;
  PyObject *__pyx_n_s_SimpleLeafIterator___setstate_cy;
  PyObject *__pyx_n_s_SimpleLeafIterator_getCoordinate;
  PyObject *__pyx_n_s_SimpleLeafIterator_getDepth;
  PyObject *__pyx_n_s_SimpleLeafIterator_getSize;
  PyObject *__pyx_n_s_SimpleLeafIterator_isLeaf;
  PyObject *__pyx_n_s_SimpleTreeIterator;
  PyObject *__pyx_n_s_SimpleTreeIterator___reduce_cyth;
  PyObject *__pyx_n_s_SimpleTreeIterator___setstate_cy;
  PyObject *__pyx_n_s_SimpleTreeIterator_getCoordinate;
  PyObject *__pyx_n_s_SimpleTreeIterator_getDepth;
  PyObject *__pyx_n_s_SimpleTreeIterator_getSize;
  PyObject *__pyx_n_s_SimpleTreeIterator_isLeaf;
  PyObject *__pyx_n_s_StopIteration;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s__194;
  PyObject *__pyx_kp_u__3;
  PyObject *__pyx_kp_u__4;
  PyObject *__pyx_n_s__6;
  PyObject *__pyx_n_s_a;
  PyObject *__pyx_n_s_addPointCloudWithRayCasting;
  PyObject *__pyx_n_s_addPointWithRayCasting;
  PyObject *__pyx_n_s_addValue;
  PyObject *__pyx_n_s_adjustKeyAtDepth;
  PyObject *__pyx_n_s_any;
  PyObject *__pyx_n_s_arg;
  PyObject *__pyx_n_s_array;
  PyObject *__pyx_n_s_ascontiguousarray;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_axis;
  PyObject *__pyx_n_s_b;
  PyObject *__pyx_n_s_bbxSet;
  PyObject *__pyx_n_s_bbx_max;
  PyObject *__pyx_n_s_bbx_min;
  PyObject *__pyx_n_s_begin_leafs;
  PyObject *__pyx_n_s_begin_leafs_bbx;
  PyObject *__pyx_n_s_begin_tree;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_n_s_c_filename;
  PyObject *__pyx_n_s_calcNumNodes;
  PyObject *__pyx_n_s_castRay;
  PyObject *__pyx_n_s_center;
  PyObject *__pyx_n_s_checked;
  PyObject *__pyx_n_s_child;
  PyObject *__pyx_n_s_childExists;
  PyObject *__pyx_n_s_chk;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_clear;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_column_stack;
  PyObject *__pyx_n_s_computeChildIdx;
  PyObject *__pyx_n_s_computeIndexKey;
  PyObject *__pyx_n_s_concatenate;
  PyObject *__pyx_n_s_coord;
  PyObject *__pyx_n_s_coordToKey;
  PyObject *__pyx_n_s_coordToKeyChecked;
  PyObject *__pyx_n_s_createNodeChild;
  PyObject *__pyx_n_s_deleteNode;
  PyObject *__pyx_n_s_deleteNodeChild;
  PyObject *__pyx_n_s_depth;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dimension;
  PyObject *__pyx_n_s_direction;
  PyObject *__pyx_n_s_direction_2;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_discrete_points;
  PyObject *__pyx_n_s_discretize;
  PyObject *__pyx_n_s_discretizePointCloud;
  PyObject *__pyx_n_s_distances;
  PyObject *__pyx_n_s_doc;
  PyObject *__pyx_n_s_dtype;
  PyObject *__pyx_n_s_dynamicEDT_checkConsistency;
  PyObject *__pyx_n_s_dynamicEDT_generate;
  PyObject *__pyx_n_s_dynamicEDT_getDistance;
  PyObject *__pyx_n_s_dynamicEDT_getMaxDist;
  PyObject *__pyx_n_s_dynamicEDT_update;
  PyObject *__pyx_n_s_e;
  PyObject *__pyx_n_s_empty;
  PyObject *__pyx_n_s_empty_arr;
  PyObject *__pyx_n_s_enable;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_s_end;
  PyObject *__pyx_n_s_end_2;
  PyObject *__pyx_n_s_end_leafs;
  PyObject *__pyx_n_s_end_leafs_bbx;
  PyObject *__pyx_n_s_end_point;
  PyObject *__pyx_n_s_end_tree;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_expandNode;
  PyObject *__pyx_n_s_extractPointCloud;
  PyObject *__pyx_n_s_filename;
  PyObject *__pyx_n_s_filtered_points;
  PyObject *__pyx_n_s_float64;
  PyObject *__pyx_n_s_found_node;
  PyObject *__pyx_n_s_full;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_getBBXBounds;
  PyObject *__pyx_n_s_getBBXCenter;
  PyObject *__pyx_n_s_getBBXMax;
  PyObject *__pyx_n_s_getBBXMin;
  PyObject *__pyx_n_s_getClampingThresMax;
  PyObject *__pyx_n_s_getClampingThresMaxLog;
  PyObject *__pyx_n_s_getClampingThresMin;
  PyObject *__pyx_n_s_getClampingThresMinLog;
  PyObject *__pyx_n_s_getCoordinate;
  PyObject *__pyx_n_s_getDepth;
  PyObject *__pyx_n_s_getLabels;
  PyObject *__pyx_n_s_getLogOdds;
  PyObject *__pyx_n_s_getMaxChildLogOdds;
  PyObject *__pyx_n_s_getMetricMax;
  PyObject *__pyx_n_s_getMetricMin;
  PyObject *__pyx_n_s_getMetricSize;
  PyObject *__pyx_n_s_getNodeChild;
  PyObject *__pyx_n_s_getNumLeafNodes;
  PyObject *__pyx_n_s_getOccupancy;
  PyObject *__pyx_n_s_getOccupancyThres;
  PyObject *__pyx_n_s_getOccupancyThresLog;
  PyObject *__pyx_n_s_getProbHit;
  PyObject *__pyx_n_s_getProbHitLog;
  PyObject *__pyx_n_s_getProbMiss;
  PyObject *__pyx_n_s_getProbMissLog;
  PyObject *__pyx_n_s_getResolution;
  PyObject *__pyx_n_s_getRoot;
  PyObject *__pyx_n_s_getSize;
  PyObject *__pyx_n_s_getTreeDepth;
  PyObject *__pyx_n_s_getTreeType;
  PyObject *__pyx_n_s_getValue;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_hasChildren;
  PyObject *__pyx_n_s_hit;
  PyObject *__pyx_n_s_i;
  PyObject *__pyx_n_s_idx;
  PyObject *__pyx_n_s_ignoreUnknownCells;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_inBBX;
  PyObject *__pyx_n_s_indices;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init_subclass;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_insertPointCloud;
  PyObject *__pyx_n_s_insertPointCloudFast;
  PyObject *__pyx_n_s_insertPointCloudRaysFast;
  PyObject *__pyx_n_s_int32;
  PyObject *__pyx_n_s_isLeaf;
  PyObject *__pyx_n_s_isNodeAtThreshold;
  PyObject *__pyx_n_s_isNodeCollapsible;
  PyObject *__pyx_n_s_isNodeOccupied;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_occupied;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_iss;
  PyObject *__pyx_n_s_it;
  PyObject *__pyx_n_s_itr;
  PyObject *__pyx_n_s_keep;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_keyToCoord;
  PyObject *__pyx_n_s_key_in;
  PyObject *__pyx_n_s_key_out;
  PyObject *__pyx_n_s_key_tuple;
  PyObject *__pyx_n_s_l;
  PyObject *__pyx_n_s_labels;
  PyObject *__pyx_n_s_lazy_eval;
  PyObject *__pyx_n_s_level;
  PyObject *__pyx_n_s_linalg;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_markFreeSpaceAlongRay;
  PyObject *__pyx_n_s_max;
  PyObject *__pyx_n_s_maxDepth;
  PyObject *__pyx_n_s_maxRange;
  PyObject *__pyx_n_s_max_range;
  PyObject *__pyx_n_s_maxdist;
  PyObject *__pyx_n_s_maxrange;
  PyObject *__pyx_n_s_memoryFullGrid;
  PyObject *__pyx_n_s_memoryUsage;
  PyObject *__pyx_n_s_memoryUsageNode;
  PyObject *__pyx_n_s_metaclass;
  PyObject *__pyx_n_s_min;
  PyObject *__pyx_n_s_module;
  PyObject *__pyx_n_s_mro_entries;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_new_tree;
  PyObject *__pyx_n_s_newaxis;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_node;
  PyObject *__pyx_n_s_nodeHasChildren;
  PyObject *__pyx_n_s_nonzero;
  PyObject *__pyx_n_s_norm;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_num_points;
  PyObject *__pyx_n_s_num_steps;
  PyObject *__pyx_n_s_numbers;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_kp_u_numpy__core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy__core_umath_failed_to_impo;
  PyObject *__pyx_n_s_occupied;
  PyObject *__pyx_n_s_occupied_arr;
  PyObject *__pyx_n_s_octree_read;
  PyObject *__pyx_n_s_ones;
  PyObject *__pyx_n_s_origin;
  PyObject *__pyx_n_s_origin64;
  PyObject *__pyx_n_s_origin_2;
  PyObject *__pyx_n_s_origin_c;
  PyObject *__pyx_n_s_oss;
  PyObject *__pyx_n_s_p;
  PyObject *__pyx_n_s_pc;
  PyObject *__pyx_n_s_point;
  PyObject *__pyx_n_s_point64;
  PyObject *__pyx_n_s_point_cloud;
  PyObject *__pyx_n_s_pointcloud;
  PyObject *__pyx_n_s_points;
  PyObject *__pyx_n_s_prepare;
  PyObject *__pyx_n_s_print;
  PyObject *__pyx_n_s_prob;
  PyObject *__pyx_n_s_pruneNode;
  PyObject *__pyx_n_s_pt;
  PyObject *__pyx_n_s_pyoctomap_octomap;
  PyObject *__pyx_kp_s_pyoctomap_octomap_pyx;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_qualname;
  PyObject *__pyx_n_s_r;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_raw_dimension;
  PyObject *__pyx_n_s_ray_length;
  PyObject *__pyx_n_s_read;
  PyObject *__pyx_n_s_readBinary;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_res;
  PyObject *__pyx_n_s_resetChangeDetection;
  PyObject *__pyx_n_s_resolution;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_ret;
  PyObject *__pyx_n_s_ret_2;
  PyObject *__pyx_n_s_ret_prune;
  PyObject *__pyx_n_s_round;
  PyObject *__pyx_n_s_sample_point;
  PyObject *__pyx_n_s_sampled_points;
  PyObject *__pyx_n_s_search;
  PyObject *__pyx_n_s_search_key;
  PyObject *__pyx_n_s_search_point;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_n_s_sensor_origin;
  PyObject *__pyx_n_s_setBBXMax;
  PyObject *__pyx_n_s_setBBXMin;
  PyObject *__pyx_n_s_setClampingThresMax;
  PyObject *__pyx_n_s_setClampingThresMin;
  PyObject *__pyx_n_s_setLogOdds;
  PyObject *__pyx_n_s_setOccupancyThres;
  PyObject *__pyx_n_s_setProbHit;
  PyObject *__pyx_n_s_setProbMiss;
  PyObject *__pyx_n_s_setResolution;
  PyObject *__pyx_n_s_setValue;
  PyObject *__pyx_n_s_set_name;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_shape;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_startswith;
  PyObject *__pyx_n_s_step;
  PyObject *__pyx_n_s_step_size;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_success;
  PyObject *__pyx_n_s_success_count;
  PyObject *__pyx_n_s_sum;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_t;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_thresProb;
  PyObject *__pyx_n_s_toMaxLikelihood;
  PyObject *__pyx_n_s_treatUnknownAsOccupied;
  PyObject *__pyx_n_s_tree;
  PyObject *__pyx_n_s_unique_keys;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_updateInnerOccupancy;
  PyObject *__pyx_n_s_updateNode;
  PyObject *__pyx_n_s_updateNodes;
  PyObject *__pyx_n_s_updateOccupancyChildren;
  PyObject *__pyx_n_s_updateRealDist;
  PyObject *__pyx_n_s_update_inner_occupancy;
  PyObject *__pyx_n_s_update_key;
  PyObject *__pyx_n_s_useBBXLimit;
  PyObject *__pyx_kp_u_utf_8;
  PyObject *__pyx_n_s_v;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_n_s_volume;
  PyObject *__pyx_n_s_write;
  PyObject *__pyx_n_s_writeBinary;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_n_s_y;
  PyObject *__pyx_n_s_z;
  PyObject *__pyx_n_s_zeros;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_0_1;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_float_neg_1_;
  PyObject *__pyx_float_neg_1_0;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_tuple_;
  PyObject *__pyx_slice__8;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__7;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__12;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__26;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__55;
  PyObject *__pyx_tuple__57;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__77;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__90;
  PyObject *__pyx_tuple__91;
  PyObject *__pyx_tuple__93;
  PyObject *__pyx_tuple__95;
  PyObject *__pyx_tuple__97;
  PyObject *__pyx_tuple__105;
  PyObject *__pyx_tuple__112;
  PyObject *__pyx_tuple__118;
  PyObject *__pyx_tuple__120;
  PyObject *__pyx_tuple__122;
  PyObject *__pyx_tuple__124;
  PyObject *__pyx_tuple__128;
  PyObject *__pyx_tuple__130;
  PyObject *__pyx_tuple__131;
  PyObject *__pyx_tuple__134;
  PyObject *__pyx_tuple__147;
  PyObject *__pyx_tuple__150;
  PyObject *__pyx_tuple__154;
  PyObject *__pyx_tuple__159;
  PyObject *__pyx_tuple__163;
  PyObject *__pyx_tuple__165;
  PyObject *__pyx_tuple__168;
  PyObject *__pyx_tuple__171;
  PyObject *__pyx_tuple__175;
  PyObject *__pyx_tuple__177;
  PyObject *__pyx_tuple__179;
  PyObject *__pyx_tuple__181;
  PyObject *__pyx_tuple__182;
  PyObject *__pyx_tuple__184;
  PyObject *__pyx_tuple__185;
  PyObject *__pyx_tuple__187;
  PyObject *__pyx_tuple__189;
  PyObject *__pyx_tuple__191;
  PyObject *__pyx_codeobj__13;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__18;
  PyObject *__pyx_codeobj__20;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__27;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__29;
  PyObject *__pyx_codeobj__31;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__33;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__35;
  PyObject *__pyx_codeobj__36;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__42;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__44;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__46;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__48;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__50;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__52;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__54;
  PyObject *__pyx_codeobj__56;
  PyObject *__pyx_codeobj__58;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__60;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__66;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__76;
  PyObject *__pyx_codeobj__78;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__92;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__100;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__106;
  PyObject *__pyx_codeobj__107;
  PyObject *__pyx_codeobj__108;
  PyObject *__pyx_codeobj__109;
  PyObject *__pyx_codeobj__110;
  PyObject *__pyx_codeobj__111;
  PyObject *__pyx_codeobj__113;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__115;
  PyObject *__pyx_codeobj__116;
  PyObject *__pyx_codeobj__117;
  PyObject *__pyx_codeobj__119;
  PyObject *__pyx_codeobj__121;
  PyObject *__pyx_codeobj__123;
  PyObject *__pyx_codeobj__125;
  PyObject *__pyx_codeobj__126;
  PyObject *__pyx_codeobj__127;
  PyObject *__pyx_codeobj__129;
  PyObject *__pyx_codeobj__132;
  PyObject *__pyx_codeobj__133;
  PyObject *__pyx_codeobj__135;
  PyObject *__pyx_codeobj__136;
  PyObject *__pyx_codeobj__137;
  PyObject *__pyx_codeobj__138;
  PyObject *__pyx_codeobj__139;
  PyObject *__pyx_codeobj__140;
  PyObject *__pyx_codeobj__141;
  PyObject *__pyx_codeobj__142;
  PyObject *__pyx_codeobj__143;
  PyObject *__pyx_codeobj__144;
  PyObject *__pyx_codeobj__145;
  PyObject *__pyx_codeobj__146;
  PyObject *__pyx_codeobj__148;
  PyObject *__pyx_codeobj__149;
  PyObject *__pyx_codeobj__151;
  PyObject *__pyx_codeobj__152;
  PyObject *__pyx_codeobj__153;
  PyObject *__pyx_codeobj__155;
  PyObject *__pyx_codeobj__156;
  PyObject *__pyx_codeobj__157;
  PyObject *__pyx_codeobj__158;
  PyObject *__pyx_codeobj__160;
  PyObject *__pyx_codeobj__161;
  PyObject *__pyx_codeobj__162;
  PyObject *__pyx_codeobj__164;
  PyObject *__pyx_codeobj__166;
  PyObject *__pyx_codeobj__167;
  PyObject *__pyx_codeobj__169;
  PyObject *__pyx_codeobj__170;
  PyObject *__pyx_codeobj__172;
  PyObject *__pyx_codeobj__173;
  PyObject *__pyx_codeobj__174;
  PyObject *__pyx_codeobj__176;
  PyObject *__pyx_codeobj__178;
  PyObject *__pyx_codeobj__180;
  PyObject *__pyx_codeobj__183;
  PyObject *__pyx_codeobj__186;
  PyObject *__pyx_codeobj__188;
  PyObject *__pyx_codeobj__190;
  PyObject *__pyx_codeobj__192;
  PyObject *__pyx_codeobj__193;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_9pyoctomap_7octomap_OcTreeKey);
  Py_CLEAR(clear_module_state->__pyx_type_9pyoctomap_7octomap_OcTreeKey);
  Py_CLEAR(clear_module_state->__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);
  Py_CLEAR(clear_module_state->__pyx_type_9pyoctomap_7octomap_OcTreeNode);
  Py_CLEAR(clear_module_state->__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator);
  Py_CLEAR(clear_module_state->__pyx_type_9pyoctomap_7octomap_SimpleTreeIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator);
  Py_CLEAR(clear_module_state->__pyx_type_9pyoctomap_7octomap_SimpleLeafIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator);
  Py_CLEAR(clear_module_state->__pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_9pyoctomap_7octomap_OcTree);
  Py_CLEAR(clear_module_state->__pyx_type_9pyoctomap_7octomap_OcTree);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_in_point_cloud_processing);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_OcTreeNode);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_OcTreeNode_or_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_n_s_NullPointerException);
  Py_CLEAR(clear_module_state->__pyx_n_s_NullPointerException___init);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Null_pointer_exception);
  Py_CLEAR(clear_module_state->__pyx_n_s_Number);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree);
  Py_CLEAR(clear_module_state->__pyx_kp_u_OcTreeKey);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeKey_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeKey___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeKey___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeKey_computeChildIdx);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeKey_computeIndexKey);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode_addValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode_childExists);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode_getLogOdds);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode_getMaxChildLogOdds);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode_getOccupancy);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode_getValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode_hasChildren);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode_setLogOdds);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode_setValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTreeNode_updateOccupancyChildr);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree__discretizePointCloud);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_addPointCloudWithRayCasti);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_addPointWithRayCasting);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_adjustKeyAtDepth);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_bbxSet);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_begin_leafs);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_begin_leafs_bbx);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_begin_tree);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_calcNumNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_castRay);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_clear);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_coordToKey);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_coordToKeyChecked);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_createNodeChild);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_deleteNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_deleteNodeChild);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_dynamicEDT_checkConsisten);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_dynamicEDT_generate);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_dynamicEDT_getDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_dynamicEDT_getMaxDist);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_dynamicEDT_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_end_leafs);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_end_leafs_bbx);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_end_tree);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_expandNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_extractPointCloud);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getBBXBounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getBBXCenter);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getBBXMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getBBXMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getClampingThresMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getClampingThresMaxLog);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getClampingThresMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getClampingThresMinLog);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getLabels);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getMetricMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getMetricMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getMetricSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getNodeChild);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getNumLeafNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getOccupancyThres);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getOccupancyThresLog);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getProbHit);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getProbHitLog);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getProbMiss);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getProbMissLog);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getResolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getRoot);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getTreeDepth);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_getTreeType);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_inBBX);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_insertPointCloud);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_insertPointCloudFast);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_insertPointCloudRaysFast);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_isNodeAtThreshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_isNodeCollapsible);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_isNodeOccupied);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_keyToCoord);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_markFreeSpaceAlongRay);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_memoryFullGrid);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_memoryUsage);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_memoryUsageNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_nodeHasChildren);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_pruneNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_readBinary);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_resetChangeDetection);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_search);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_setBBXMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_setBBXMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_setClampingThresMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_setClampingThresMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_setOccupancyThres);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_setProbHit);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_setProbMiss);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_setResolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_toMaxLikelihood);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_updateInnerOccupancy);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_updateNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_updateNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_useBBXLimit);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_volume);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_write);
  Py_CLEAR(clear_module_state->__pyx_n_s_OcTree_writeBinary);
  Py_CLEAR(clear_module_state->__pyx_kp_b_Octomap_OcTree_file);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafBBXIterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafBBXIterator___reduce_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafBBXIterator___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafBBXIterator_getCoordin);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafBBXIterator_getDepth);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafBBXIterator_getSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafBBXIterator_isLeaf);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafIterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafIterator___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafIterator___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafIterator_getCoordinate);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafIterator_getDepth);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafIterator_getSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleLeafIterator_isLeaf);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleTreeIterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleTreeIterator___reduce_cyth);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleTreeIterator___setstate_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleTreeIterator_getCoordinate);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleTreeIterator_getDepth);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleTreeIterator_getSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_SimpleTreeIterator_isLeaf);
  Py_CLEAR(clear_module_state->__pyx_n_s_StopIteration);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s__194);
  Py_CLEAR(clear_module_state->__pyx_kp_u__3);
  Py_CLEAR(clear_module_state->__pyx_kp_u__4);
  Py_CLEAR(clear_module_state->__pyx_n_s__6);
  Py_CLEAR(clear_module_state->__pyx_n_s_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_addPointCloudWithRayCasting);
  Py_CLEAR(clear_module_state->__pyx_n_s_addPointWithRayCasting);
  Py_CLEAR(clear_module_state->__pyx_n_s_addValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_adjustKeyAtDepth);
  Py_CLEAR(clear_module_state->__pyx_n_s_any);
  Py_CLEAR(clear_module_state->__pyx_n_s_arg);
  Py_CLEAR(clear_module_state->__pyx_n_s_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_ascontiguousarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_axis);
  Py_CLEAR(clear_module_state->__pyx_n_s_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_bbxSet);
  Py_CLEAR(clear_module_state->__pyx_n_s_bbx_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_bbx_min);
  Py_CLEAR(clear_module_state->__pyx_n_s_begin_leafs);
  Py_CLEAR(clear_module_state->__pyx_n_s_begin_leafs_bbx);
  Py_CLEAR(clear_module_state->__pyx_n_s_begin_tree);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_c_filename);
  Py_CLEAR(clear_module_state->__pyx_n_s_calcNumNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_castRay);
  Py_CLEAR(clear_module_state->__pyx_n_s_center);
  Py_CLEAR(clear_module_state->__pyx_n_s_checked);
  Py_CLEAR(clear_module_state->__pyx_n_s_child);
  Py_CLEAR(clear_module_state->__pyx_n_s_childExists);
  Py_CLEAR(clear_module_state->__pyx_n_s_chk);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_clear);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_column_stack);
  Py_CLEAR(clear_module_state->__pyx_n_s_computeChildIdx);
  Py_CLEAR(clear_module_state->__pyx_n_s_computeIndexKey);
  Py_CLEAR(clear_module_state->__pyx_n_s_concatenate);
  Py_CLEAR(clear_module_state->__pyx_n_s_coord);
  Py_CLEAR(clear_module_state->__pyx_n_s_coordToKey);
  Py_CLEAR(clear_module_state->__pyx_n_s_coordToKeyChecked);
  Py_CLEAR(clear_module_state->__pyx_n_s_createNodeChild);
  Py_CLEAR(clear_module_state->__pyx_n_s_deleteNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_deleteNodeChild);
  Py_CLEAR(clear_module_state->__pyx_n_s_depth);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dimension);
  Py_CLEAR(clear_module_state->__pyx_n_s_direction);
  Py_CLEAR(clear_module_state->__pyx_n_s_direction_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_discrete_points);
  Py_CLEAR(clear_module_state->__pyx_n_s_discretize);
  Py_CLEAR(clear_module_state->__pyx_n_s_discretizePointCloud);
  Py_CLEAR(clear_module_state->__pyx_n_s_distances);
  Py_CLEAR(clear_module_state->__pyx_n_s_doc);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_dynamicEDT_checkConsistency);
  Py_CLEAR(clear_module_state->__pyx_n_s_dynamicEDT_generate);
  Py_CLEAR(clear_module_state->__pyx_n_s_dynamicEDT_getDistance);
  Py_CLEAR(clear_module_state->__pyx_n_s_dynamicEDT_getMaxDist);
  Py_CLEAR(clear_module_state->__pyx_n_s_dynamicEDT_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_e);
  Py_CLEAR(clear_module_state->__pyx_n_s_empty);
  Py_CLEAR(clear_module_state->__pyx_n_s_empty_arr);
  Py_CLEAR(clear_module_state->__pyx_n_s_enable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_end);
  Py_CLEAR(clear_module_state->__pyx_n_s_end_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_end_leafs);
  Py_CLEAR(clear_module_state->__pyx_n_s_end_leafs_bbx);
  Py_CLEAR(clear_module_state->__pyx_n_s_end_point);
  Py_CLEAR(clear_module_state->__pyx_n_s_end_tree);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_expandNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_extractPointCloud);
  Py_CLEAR(clear_module_state->__pyx_n_s_filename);
  Py_CLEAR(clear_module_state->__pyx_n_s_filtered_points);
  Py_CLEAR(clear_module_state->__pyx_n_s_float64);
  Py_CLEAR(clear_module_state->__pyx_n_s_found_node);
  Py_CLEAR(clear_module_state->__pyx_n_s_full);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_getBBXBounds);
  Py_CLEAR(clear_module_state->__pyx_n_s_getBBXCenter);
  Py_CLEAR(clear_module_state->__pyx_n_s_getBBXMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_getBBXMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_getClampingThresMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_getClampingThresMaxLog);
  Py_CLEAR(clear_module_state->__pyx_n_s_getClampingThresMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_getClampingThresMinLog);
  Py_CLEAR(clear_module_state->__pyx_n_s_getCoordinate);
  Py_CLEAR(clear_module_state->__pyx_n_s_getDepth);
  Py_CLEAR(clear_module_state->__pyx_n_s_getLabels);
  Py_CLEAR(clear_module_state->__pyx_n_s_getLogOdds);
  Py_CLEAR(clear_module_state->__pyx_n_s_getMaxChildLogOdds);
  Py_CLEAR(clear_module_state->__pyx_n_s_getMetricMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_getMetricMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_getMetricSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_getNodeChild);
  Py_CLEAR(clear_module_state->__pyx_n_s_getNumLeafNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_getOccupancy);
  Py_CLEAR(clear_module_state->__pyx_n_s_getOccupancyThres);
  Py_CLEAR(clear_module_state->__pyx_n_s_getOccupancyThresLog);
  Py_CLEAR(clear_module_state->__pyx_n_s_getProbHit);
  Py_CLEAR(clear_module_state->__pyx_n_s_getProbHitLog);
  Py_CLEAR(clear_module_state->__pyx_n_s_getProbMiss);
  Py_CLEAR(clear_module_state->__pyx_n_s_getProbMissLog);
  Py_CLEAR(clear_module_state->__pyx_n_s_getResolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_getRoot);
  Py_CLEAR(clear_module_state->__pyx_n_s_getSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_getTreeDepth);
  Py_CLEAR(clear_module_state->__pyx_n_s_getTreeType);
  Py_CLEAR(clear_module_state->__pyx_n_s_getValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_hasChildren);
  Py_CLEAR(clear_module_state->__pyx_n_s_hit);
  Py_CLEAR(clear_module_state->__pyx_n_s_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx);
  Py_CLEAR(clear_module_state->__pyx_n_s_ignoreUnknownCells);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_inBBX);
  Py_CLEAR(clear_module_state->__pyx_n_s_indices);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_subclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_insertPointCloud);
  Py_CLEAR(clear_module_state->__pyx_n_s_insertPointCloudFast);
  Py_CLEAR(clear_module_state->__pyx_n_s_insertPointCloudRaysFast);
  Py_CLEAR(clear_module_state->__pyx_n_s_int32);
  Py_CLEAR(clear_module_state->__pyx_n_s_isLeaf);
  Py_CLEAR(clear_module_state->__pyx_n_s_isNodeAtThreshold);
  Py_CLEAR(clear_module_state->__pyx_n_s_isNodeCollapsible);
  Py_CLEAR(clear_module_state->__pyx_n_s_isNodeOccupied);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_occupied);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_iss);
  Py_CLEAR(clear_module_state->__pyx_n_s_it);
  Py_CLEAR(clear_module_state->__pyx_n_s_itr);
  Py_CLEAR(clear_module_state->__pyx_n_s_keep);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_keyToCoord);
  Py_CLEAR(clear_module_state->__pyx_n_s_key_in);
  Py_CLEAR(clear_module_state->__pyx_n_s_key_out);
  Py_CLEAR(clear_module_state->__pyx_n_s_key_tuple);
  Py_CLEAR(clear_module_state->__pyx_n_s_l);
  Py_CLEAR(clear_module_state->__pyx_n_s_labels);
  Py_CLEAR(clear_module_state->__pyx_n_s_lazy_eval);
  Py_CLEAR(clear_module_state->__pyx_n_s_level);
  Py_CLEAR(clear_module_state->__pyx_n_s_linalg);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_markFreeSpaceAlongRay);
  Py_CLEAR(clear_module_state->__pyx_n_s_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_maxDepth);
  Py_CLEAR(clear_module_state->__pyx_n_s_maxRange);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_maxdist);
  Py_CLEAR(clear_module_state->__pyx_n_s_maxrange);
  Py_CLEAR(clear_module_state->__pyx_n_s_memoryFullGrid);
  Py_CLEAR(clear_module_state->__pyx_n_s_memoryUsage);
  Py_CLEAR(clear_module_state->__pyx_n_s_memoryUsageNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_metaclass);
  Py_CLEAR(clear_module_state->__pyx_n_s_min);
  Py_CLEAR(clear_module_state->__pyx_n_s_module);
  Py_CLEAR(clear_module_state->__pyx_n_s_mro_entries);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_new_tree);
  Py_CLEAR(clear_module_state->__pyx_n_s_newaxis);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_node);
  Py_CLEAR(clear_module_state->__pyx_n_s_nodeHasChildren);
  Py_CLEAR(clear_module_state->__pyx_n_s_nonzero);
  Py_CLEAR(clear_module_state->__pyx_n_s_norm);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_points);
  Py_CLEAR(clear_module_state->__pyx_n_s_num_steps);
  Py_CLEAR(clear_module_state->__pyx_n_s_numbers);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy__core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy__core_umath_failed_to_impo);
  Py_CLEAR(clear_module_state->__pyx_n_s_occupied);
  Py_CLEAR(clear_module_state->__pyx_n_s_occupied_arr);
  Py_CLEAR(clear_module_state->__pyx_n_s_octree_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_ones);
  Py_CLEAR(clear_module_state->__pyx_n_s_origin);
  Py_CLEAR(clear_module_state->__pyx_n_s_origin64);
  Py_CLEAR(clear_module_state->__pyx_n_s_origin_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_origin_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_oss);
  Py_CLEAR(clear_module_state->__pyx_n_s_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_pc);
  Py_CLEAR(clear_module_state->__pyx_n_s_point);
  Py_CLEAR(clear_module_state->__pyx_n_s_point64);
  Py_CLEAR(clear_module_state->__pyx_n_s_point_cloud);
  Py_CLEAR(clear_module_state->__pyx_n_s_pointcloud);
  Py_CLEAR(clear_module_state->__pyx_n_s_points);
  Py_CLEAR(clear_module_state->__pyx_n_s_prepare);
  Py_CLEAR(clear_module_state->__pyx_n_s_print);
  Py_CLEAR(clear_module_state->__pyx_n_s_prob);
  Py_CLEAR(clear_module_state->__pyx_n_s_pruneNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_pt);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyoctomap_octomap);
  Py_CLEAR(clear_module_state->__pyx_kp_s_pyoctomap_octomap_pyx);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_qualname);
  Py_CLEAR(clear_module_state->__pyx_n_s_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_raw_dimension);
  Py_CLEAR(clear_module_state->__pyx_n_s_ray_length);
  Py_CLEAR(clear_module_state->__pyx_n_s_read);
  Py_CLEAR(clear_module_state->__pyx_n_s_readBinary);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_res);
  Py_CLEAR(clear_module_state->__pyx_n_s_resetChangeDetection);
  Py_CLEAR(clear_module_state->__pyx_n_s_resolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ret_prune);
  Py_CLEAR(clear_module_state->__pyx_n_s_round);
  Py_CLEAR(clear_module_state->__pyx_n_s_sample_point);
  Py_CLEAR(clear_module_state->__pyx_n_s_sampled_points);
  Py_CLEAR(clear_module_state->__pyx_n_s_search);
  Py_CLEAR(clear_module_state->__pyx_n_s_search_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_search_point);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_n_s_sensor_origin);
  Py_CLEAR(clear_module_state->__pyx_n_s_setBBXMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_setBBXMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_setClampingThresMax);
  Py_CLEAR(clear_module_state->__pyx_n_s_setClampingThresMin);
  Py_CLEAR(clear_module_state->__pyx_n_s_setLogOdds);
  Py_CLEAR(clear_module_state->__pyx_n_s_setOccupancyThres);
  Py_CLEAR(clear_module_state->__pyx_n_s_setProbHit);
  Py_CLEAR(clear_module_state->__pyx_n_s_setProbMiss);
  Py_CLEAR(clear_module_state->__pyx_n_s_setResolution);
  Py_CLEAR(clear_module_state->__pyx_n_s_setValue);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_shape);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_startswith);
  Py_CLEAR(clear_module_state->__pyx_n_s_step);
  Py_CLEAR(clear_module_state->__pyx_n_s_step_size);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_success);
  Py_CLEAR(clear_module_state->__pyx_n_s_success_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_sum);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_thresProb);
  Py_CLEAR(clear_module_state->__pyx_n_s_toMaxLikelihood);
  Py_CLEAR(clear_module_state->__pyx_n_s_treatUnknownAsOccupied);
  Py_CLEAR(clear_module_state->__pyx_n_s_tree);
  Py_CLEAR(clear_module_state->__pyx_n_s_unique_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_updateInnerOccupancy);
  Py_CLEAR(clear_module_state->__pyx_n_s_updateNode);
  Py_CLEAR(clear_module_state->__pyx_n_s_updateNodes);
  Py_CLEAR(clear_module_state->__pyx_n_s_updateOccupancyChildren);
  Py_CLEAR(clear_module_state->__pyx_n_s_updateRealDist);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_inner_occupancy);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_useBBXLimit);
  Py_CLEAR(clear_module_state->__pyx_kp_u_utf_8);
  Py_CLEAR(clear_module_state->__pyx_n_s_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_volume);
  Py_CLEAR(clear_module_state->__pyx_n_s_write);
  Py_CLEAR(clear_module_state->__pyx_n_s_writeBinary);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_y);
  Py_CLEAR(clear_module_state->__pyx_n_s_z);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeros);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_1);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1_);
  Py_CLEAR(clear_module_state->__pyx_float_neg_1_0);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_tuple_);
  Py_CLEAR(clear_module_state->__pyx_slice__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__7);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__12);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__26);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__55);
  Py_CLEAR(clear_module_state->__pyx_tuple__57);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__69);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__77);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__90);
  Py_CLEAR(clear_module_state->__pyx_tuple__91);
  Py_CLEAR(clear_module_state->__pyx_tuple__93);
  Py_CLEAR(clear_module_state->__pyx_tuple__95);
  Py_CLEAR(clear_module_state->__pyx_tuple__97);
  Py_CLEAR(clear_module_state->__pyx_tuple__105);
  Py_CLEAR(clear_module_state->__pyx_tuple__112);
  Py_CLEAR(clear_module_state->__pyx_tuple__118);
  Py_CLEAR(clear_module_state->__pyx_tuple__120);
  Py_CLEAR(clear_module_state->__pyx_tuple__122);
  Py_CLEAR(clear_module_state->__pyx_tuple__124);
  Py_CLEAR(clear_module_state->__pyx_tuple__128);
  Py_CLEAR(clear_module_state->__pyx_tuple__130);
  Py_CLEAR(clear_module_state->__pyx_tuple__131);
  Py_CLEAR(clear_module_state->__pyx_tuple__134);
  Py_CLEAR(clear_module_state->__pyx_tuple__147);
  Py_CLEAR(clear_module_state->__pyx_tuple__150);
  Py_CLEAR(clear_module_state->__pyx_tuple__154);
  Py_CLEAR(clear_module_state->__pyx_tuple__159);
  Py_CLEAR(clear_module_state->__pyx_tuple__163);
  Py_CLEAR(clear_module_state->__pyx_tuple__165);
  Py_CLEAR(clear_module_state->__pyx_tuple__168);
  Py_CLEAR(clear_module_state->__pyx_tuple__171);
  Py_CLEAR(clear_module_state->__pyx_tuple__175);
  Py_CLEAR(clear_module_state->__pyx_tuple__177);
  Py_CLEAR(clear_module_state->__pyx_tuple__179);
  Py_CLEAR(clear_module_state->__pyx_tuple__181);
  Py_CLEAR(clear_module_state->__pyx_tuple__182);
  Py_CLEAR(clear_module_state->__pyx_tuple__184);
  Py_CLEAR(clear_module_state->__pyx_tuple__185);
  Py_CLEAR(clear_module_state->__pyx_tuple__187);
  Py_CLEAR(clear_module_state->__pyx_tuple__189);
  Py_CLEAR(clear_module_state->__pyx_tuple__191);
  Py_CLEAR(clear_module_state->__pyx_codeobj__13);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__18);
  Py_CLEAR(clear_module_state->__pyx_codeobj__20);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__27);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__31);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__33);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__35);
  Py_CLEAR(clear_module_state->__pyx_codeobj__36);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__42);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__46);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__48);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__50);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__52);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__54);
  Py_CLEAR(clear_module_state->__pyx_codeobj__56);
  Py_CLEAR(clear_module_state->__pyx_codeobj__58);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__60);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__66);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__76);
  Py_CLEAR(clear_module_state->__pyx_codeobj__78);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__92);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__100);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__106);
  Py_CLEAR(clear_module_state->__pyx_codeobj__107);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  Py_CLEAR(clear_module_state->__pyx_codeobj__109);
  Py_CLEAR(clear_module_state->__pyx_codeobj__110);
  Py_CLEAR(clear_module_state->__pyx_codeobj__111);
  Py_CLEAR(clear_module_state->__pyx_codeobj__113);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__115);
  Py_CLEAR(clear_module_state->__pyx_codeobj__116);
  Py_CLEAR(clear_module_state->__pyx_codeobj__117);
  Py_CLEAR(clear_module_state->__pyx_codeobj__119);
  Py_CLEAR(clear_module_state->__pyx_codeobj__121);
  Py_CLEAR(clear_module_state->__pyx_codeobj__123);
  Py_CLEAR(clear_module_state->__pyx_codeobj__125);
  Py_CLEAR(clear_module_state->__pyx_codeobj__126);
  Py_CLEAR(clear_module_state->__pyx_codeobj__127);
  Py_CLEAR(clear_module_state->__pyx_codeobj__129);
  Py_CLEAR(clear_module_state->__pyx_codeobj__132);
  Py_CLEAR(clear_module_state->__pyx_codeobj__133);
  Py_CLEAR(clear_module_state->__pyx_codeobj__135);
  Py_CLEAR(clear_module_state->__pyx_codeobj__136);
  Py_CLEAR(clear_module_state->__pyx_codeobj__137);
  Py_CLEAR(clear_module_state->__pyx_codeobj__138);
  Py_CLEAR(clear_module_state->__pyx_codeobj__139);
  Py_CLEAR(clear_module_state->__pyx_codeobj__140);
  Py_CLEAR(clear_module_state->__pyx_codeobj__141);
  Py_CLEAR(clear_module_state->__pyx_codeobj__142);
  Py_CLEAR(clear_module_state->__pyx_codeobj__143);
  Py_CLEAR(clear_module_state->__pyx_codeobj__144);
  Py_CLEAR(clear_module_state->__pyx_codeobj__145);
  Py_CLEAR(clear_module_state->__pyx_codeobj__146);
  Py_CLEAR(clear_module_state->__pyx_codeobj__148);
  Py_CLEAR(clear_module_state->__pyx_codeobj__149);
  Py_CLEAR(clear_module_state->__pyx_codeobj__151);
  Py_CLEAR(clear_module_state->__pyx_codeobj__152);
  Py_CLEAR(clear_module_state->__pyx_codeobj__153);
  Py_CLEAR(clear_module_state->__pyx_codeobj__155);
  Py_CLEAR(clear_module_state->__pyx_codeobj__156);
  Py_CLEAR(clear_module_state->__pyx_codeobj__157);
  Py_CLEAR(clear_module_state->__pyx_codeobj__158);
  Py_CLEAR(clear_module_state->__pyx_codeobj__160);
  Py_CLEAR(clear_module_state->__pyx_codeobj__161);
  Py_CLEAR(clear_module_state->__pyx_codeobj__162);
  Py_CLEAR(clear_module_state->__pyx_codeobj__164);
  Py_CLEAR(clear_module_state->__pyx_codeobj__166);
  Py_CLEAR(clear_module_state->__pyx_codeobj__167);
  Py_CLEAR(clear_module_state->__pyx_codeobj__169);
  Py_CLEAR(clear_module_state->__pyx_codeobj__170);
  Py_CLEAR(clear_module_state->__pyx_codeobj__172);
  Py_CLEAR(clear_module_state->__pyx_codeobj__173);
  Py_CLEAR(clear_module_state->__pyx_codeobj__174);
  Py_CLEAR(clear_module_state->__pyx_codeobj__176);
  Py_CLEAR(clear_module_state->__pyx_codeobj__178);
  Py_CLEAR(clear_module_state->__pyx_codeobj__180);
  Py_CLEAR(clear_module_state->__pyx_codeobj__183);
  Py_CLEAR(clear_module_state->__pyx_codeobj__186);
  Py_CLEAR(clear_module_state->__pyx_codeobj__188);
  Py_CLEAR(clear_module_state->__pyx_codeobj__190);
  Py_CLEAR(clear_module_state->__pyx_codeobj__192);
  Py_CLEAR(clear_module_state->__pyx_codeobj__193);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_9pyoctomap_7octomap_OcTreeKey);
  Py_VISIT(traverse_module_state->__pyx_type_9pyoctomap_7octomap_OcTreeKey);
  Py_VISIT(traverse_module_state->__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);
  Py_VISIT(traverse_module_state->__pyx_type_9pyoctomap_7octomap_OcTreeNode);
  Py_VISIT(traverse_module_state->__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator);
  Py_VISIT(traverse_module_state->__pyx_type_9pyoctomap_7octomap_SimpleTreeIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator);
  Py_VISIT(traverse_module_state->__pyx_type_9pyoctomap_7octomap_SimpleLeafIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator);
  Py_VISIT(traverse_module_state->__pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_9pyoctomap_7octomap_OcTree);
  Py_VISIT(traverse_module_state->__pyx_type_9pyoctomap_7octomap_OcTree);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_in_point_cloud_processing);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_OcTreeNode);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_OcTreeNode_or_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_n_s_NullPointerException);
  Py_VISIT(traverse_module_state->__pyx_n_s_NullPointerException___init);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Null_pointer_exception);
  Py_VISIT(traverse_module_state->__pyx_n_s_Number);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree);
  Py_VISIT(traverse_module_state->__pyx_kp_u_OcTreeKey);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeKey_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeKey___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeKey___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeKey_computeChildIdx);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeKey_computeIndexKey);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode_addValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode_childExists);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode_getLogOdds);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode_getMaxChildLogOdds);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode_getOccupancy);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode_getValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode_hasChildren);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode_setLogOdds);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode_setValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTreeNode_updateOccupancyChildr);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree__discretizePointCloud);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_addPointCloudWithRayCasti);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_addPointWithRayCasting);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_adjustKeyAtDepth);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_bbxSet);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_begin_leafs);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_begin_leafs_bbx);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_begin_tree);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_calcNumNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_castRay);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_clear);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_coordToKey);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_coordToKeyChecked);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_createNodeChild);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_deleteNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_deleteNodeChild);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_dynamicEDT_checkConsisten);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_dynamicEDT_generate);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_dynamicEDT_getDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_dynamicEDT_getMaxDist);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_dynamicEDT_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_end_leafs);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_end_leafs_bbx);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_end_tree);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_expandNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_extractPointCloud);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getBBXBounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getBBXCenter);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getBBXMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getBBXMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getClampingThresMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getClampingThresMaxLog);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getClampingThresMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getClampingThresMinLog);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getLabels);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getMetricMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getMetricMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getMetricSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getNodeChild);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getNumLeafNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getOccupancyThres);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getOccupancyThresLog);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getProbHit);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getProbHitLog);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getProbMiss);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getProbMissLog);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getResolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getRoot);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getTreeDepth);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_getTreeType);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_inBBX);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_insertPointCloud);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_insertPointCloudFast);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_insertPointCloudRaysFast);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_isNodeAtThreshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_isNodeCollapsible);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_isNodeOccupied);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_keyToCoord);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_markFreeSpaceAlongRay);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_memoryFullGrid);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_memoryUsage);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_memoryUsageNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_nodeHasChildren);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_pruneNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_readBinary);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_resetChangeDetection);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_search);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_setBBXMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_setBBXMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_setClampingThresMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_setClampingThresMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_setOccupancyThres);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_setProbHit);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_setProbMiss);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_setResolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_toMaxLikelihood);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_updateInnerOccupancy);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_updateNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_updateNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_useBBXLimit);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_volume);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_write);
  Py_VISIT(traverse_module_state->__pyx_n_s_OcTree_writeBinary);
  Py_VISIT(traverse_module_state->__pyx_kp_b_Octomap_OcTree_file);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafBBXIterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafBBXIterator___reduce_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafBBXIterator___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafBBXIterator_getCoordin);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafBBXIterator_getDepth);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafBBXIterator_getSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafBBXIterator_isLeaf);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafIterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafIterator___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafIterator___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafIterator_getCoordinate);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafIterator_getDepth);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafIterator_getSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleLeafIterator_isLeaf);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleTreeIterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleTreeIterator___reduce_cyth);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleTreeIterator___setstate_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleTreeIterator_getCoordinate);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleTreeIterator_getDepth);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleTreeIterator_getSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_SimpleTreeIterator_isLeaf);
  Py_VISIT(traverse_module_state->__pyx_n_s_StopIteration);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s__194);
  Py_VISIT(traverse_module_state->__pyx_kp_u__3);
  Py_VISIT(traverse_module_state->__pyx_kp_u__4);
  Py_VISIT(traverse_module_state->__pyx_n_s__6);
  Py_VISIT(traverse_module_state->__pyx_n_s_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_addPointCloudWithRayCasting);
  Py_VISIT(traverse_module_state->__pyx_n_s_addPointWithRayCasting);
  Py_VISIT(traverse_module_state->__pyx_n_s_addValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_adjustKeyAtDepth);
  Py_VISIT(traverse_module_state->__pyx_n_s_any);
  Py_VISIT(traverse_module_state->__pyx_n_s_arg);
  Py_VISIT(traverse_module_state->__pyx_n_s_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_ascontiguousarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_axis);
  Py_VISIT(traverse_module_state->__pyx_n_s_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_bbxSet);
  Py_VISIT(traverse_module_state->__pyx_n_s_bbx_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_bbx_min);
  Py_VISIT(traverse_module_state->__pyx_n_s_begin_leafs);
  Py_VISIT(traverse_module_state->__pyx_n_s_begin_leafs_bbx);
  Py_VISIT(traverse_module_state->__pyx_n_s_begin_tree);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_c_filename);
  Py_VISIT(traverse_module_state->__pyx_n_s_calcNumNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_castRay);
  Py_VISIT(traverse_module_state->__pyx_n_s_center);
  Py_VISIT(traverse_module_state->__pyx_n_s_checked);
  Py_VISIT(traverse_module_state->__pyx_n_s_child);
  Py_VISIT(traverse_module_state->__pyx_n_s_childExists);
  Py_VISIT(traverse_module_state->__pyx_n_s_chk);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_clear);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_column_stack);
  Py_VISIT(traverse_module_state->__pyx_n_s_computeChildIdx);
  Py_VISIT(traverse_module_state->__pyx_n_s_computeIndexKey);
  Py_VISIT(traverse_module_state->__pyx_n_s_concatenate);
  Py_VISIT(traverse_module_state->__pyx_n_s_coord);
  Py_VISIT(traverse_module_state->__pyx_n_s_coordToKey);
  Py_VISIT(traverse_module_state->__pyx_n_s_coordToKeyChecked);
  Py_VISIT(traverse_module_state->__pyx_n_s_createNodeChild);
  Py_VISIT(traverse_module_state->__pyx_n_s_deleteNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_deleteNodeChild);
  Py_VISIT(traverse_module_state->__pyx_n_s_depth);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dimension);
  Py_VISIT(traverse_module_state->__pyx_n_s_direction);
  Py_VISIT(traverse_module_state->__pyx_n_s_direction_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_discrete_points);
  Py_VISIT(traverse_module_state->__pyx_n_s_discretize);
  Py_VISIT(traverse_module_state->__pyx_n_s_discretizePointCloud);
  Py_VISIT(traverse_module_state->__pyx_n_s_distances);
  Py_VISIT(traverse_module_state->__pyx_n_s_doc);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_dynamicEDT_checkConsistency);
  Py_VISIT(traverse_module_state->__pyx_n_s_dynamicEDT_generate);
  Py_VISIT(traverse_module_state->__pyx_n_s_dynamicEDT_getDistance);
  Py_VISIT(traverse_module_state->__pyx_n_s_dynamicEDT_getMaxDist);
  Py_VISIT(traverse_module_state->__pyx_n_s_dynamicEDT_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_e);
  Py_VISIT(traverse_module_state->__pyx_n_s_empty);
  Py_VISIT(traverse_module_state->__pyx_n_s_empty_arr);
  Py_VISIT(traverse_module_state->__pyx_n_s_enable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_end);
  Py_VISIT(traverse_module_state->__pyx_n_s_end_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_end_leafs);
  Py_VISIT(traverse_module_state->__pyx_n_s_end_leafs_bbx);
  Py_VISIT(traverse_module_state->__pyx_n_s_end_point);
  Py_VISIT(traverse_module_state->__pyx_n_s_end_tree);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_expandNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_extractPointCloud);
  Py_VISIT(traverse_module_state->__pyx_n_s_filename);
  Py_VISIT(traverse_module_state->__pyx_n_s_filtered_points);
  Py_VISIT(traverse_module_state->__pyx_n_s_float64);
  Py_VISIT(traverse_module_state->__pyx_n_s_found_node);
  Py_VISIT(traverse_module_state->__pyx_n_s_full);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_getBBXBounds);
  Py_VISIT(traverse_module_state->__pyx_n_s_getBBXCenter);
  Py_VISIT(traverse_module_state->__pyx_n_s_getBBXMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_getBBXMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_getClampingThresMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_getClampingThresMaxLog);
  Py_VISIT(traverse_module_state->__pyx_n_s_getClampingThresMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_getClampingThresMinLog);
  Py_VISIT(traverse_module_state->__pyx_n_s_getCoordinate);
  Py_VISIT(traverse_module_state->__pyx_n_s_getDepth);
  Py_VISIT(traverse_module_state->__pyx_n_s_getLabels);
  Py_VISIT(traverse_module_state->__pyx_n_s_getLogOdds);
  Py_VISIT(traverse_module_state->__pyx_n_s_getMaxChildLogOdds);
  Py_VISIT(traverse_module_state->__pyx_n_s_getMetricMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_getMetricMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_getMetricSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_getNodeChild);
  Py_VISIT(traverse_module_state->__pyx_n_s_getNumLeafNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_getOccupancy);
  Py_VISIT(traverse_module_state->__pyx_n_s_getOccupancyThres);
  Py_VISIT(traverse_module_state->__pyx_n_s_getOccupancyThresLog);
  Py_VISIT(traverse_module_state->__pyx_n_s_getProbHit);
  Py_VISIT(traverse_module_state->__pyx_n_s_getProbHitLog);
  Py_VISIT(traverse_module_state->__pyx_n_s_getProbMiss);
  Py_VISIT(traverse_module_state->__pyx_n_s_getProbMissLog);
  Py_VISIT(traverse_module_state->__pyx_n_s_getResolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_getRoot);
  Py_VISIT(traverse_module_state->__pyx_n_s_getSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_getTreeDepth);
  Py_VISIT(traverse_module_state->__pyx_n_s_getTreeType);
  Py_VISIT(traverse_module_state->__pyx_n_s_getValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_hasChildren);
  Py_VISIT(traverse_module_state->__pyx_n_s_hit);
  Py_VISIT(traverse_module_state->__pyx_n_s_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx);
  Py_VISIT(traverse_module_state->__pyx_n_s_ignoreUnknownCells);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_inBBX);
  Py_VISIT(traverse_module_state->__pyx_n_s_indices);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_subclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_insertPointCloud);
  Py_VISIT(traverse_module_state->__pyx_n_s_insertPointCloudFast);
  Py_VISIT(traverse_module_state->__pyx_n_s_insertPointCloudRaysFast);
  Py_VISIT(traverse_module_state->__pyx_n_s_int32);
  Py_VISIT(traverse_module_state->__pyx_n_s_isLeaf);
  Py_VISIT(traverse_module_state->__pyx_n_s_isNodeAtThreshold);
  Py_VISIT(traverse_module_state->__pyx_n_s_isNodeCollapsible);
  Py_VISIT(traverse_module_state->__pyx_n_s_isNodeOccupied);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_occupied);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_iss);
  Py_VISIT(traverse_module_state->__pyx_n_s_it);
  Py_VISIT(traverse_module_state->__pyx_n_s_itr);
  Py_VISIT(traverse_module_state->__pyx_n_s_keep);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_keyToCoord);
  Py_VISIT(traverse_module_state->__pyx_n_s_key_in);
  Py_VISIT(traverse_module_state->__pyx_n_s_key_out);
  Py_VISIT(traverse_module_state->__pyx_n_s_key_tuple);
  Py_VISIT(traverse_module_state->__pyx_n_s_l);
  Py_VISIT(traverse_module_state->__pyx_n_s_labels);
  Py_VISIT(traverse_module_state->__pyx_n_s_lazy_eval);
  Py_VISIT(traverse_module_state->__pyx_n_s_level);
  Py_VISIT(traverse_module_state->__pyx_n_s_linalg);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_markFreeSpaceAlongRay);
  Py_VISIT(traverse_module_state->__pyx_n_s_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_maxDepth);
  Py_VISIT(traverse_module_state->__pyx_n_s_maxRange);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_maxdist);
  Py_VISIT(traverse_module_state->__pyx_n_s_maxrange);
  Py_VISIT(traverse_module_state->__pyx_n_s_memoryFullGrid);
  Py_VISIT(traverse_module_state->__pyx_n_s_memoryUsage);
  Py_VISIT(traverse_module_state->__pyx_n_s_memoryUsageNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_metaclass);
  Py_VISIT(traverse_module_state->__pyx_n_s_min);
  Py_VISIT(traverse_module_state->__pyx_n_s_module);
  Py_VISIT(traverse_module_state->__pyx_n_s_mro_entries);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_new_tree);
  Py_VISIT(traverse_module_state->__pyx_n_s_newaxis);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_node);
  Py_VISIT(traverse_module_state->__pyx_n_s_nodeHasChildren);
  Py_VISIT(traverse_module_state->__pyx_n_s_nonzero);
  Py_VISIT(traverse_module_state->__pyx_n_s_norm);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_points);
  Py_VISIT(traverse_module_state->__pyx_n_s_num_steps);
  Py_VISIT(traverse_module_state->__pyx_n_s_numbers);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy__core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy__core_umath_failed_to_impo);
  Py_VISIT(traverse_module_state->__pyx_n_s_occupied);
  Py_VISIT(traverse_module_state->__pyx_n_s_occupied_arr);
  Py_VISIT(traverse_module_state->__pyx_n_s_octree_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_ones);
  Py_VISIT(traverse_module_state->__pyx_n_s_origin);
  Py_VISIT(traverse_module_state->__pyx_n_s_origin64);
  Py_VISIT(traverse_module_state->__pyx_n_s_origin_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_origin_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_oss);
  Py_VISIT(traverse_module_state->__pyx_n_s_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_pc);
  Py_VISIT(traverse_module_state->__pyx_n_s_point);
  Py_VISIT(traverse_module_state->__pyx_n_s_point64);
  Py_VISIT(traverse_module_state->__pyx_n_s_point_cloud);
  Py_VISIT(traverse_module_state->__pyx_n_s_pointcloud);
  Py_VISIT(traverse_module_state->__pyx_n_s_points);
  Py_VISIT(traverse_module_state->__pyx_n_s_prepare);
  Py_VISIT(traverse_module_state->__pyx_n_s_print);
  Py_VISIT(traverse_module_state->__pyx_n_s_prob);
  Py_VISIT(traverse_module_state->__pyx_n_s_pruneNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_pt);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyoctomap_octomap);
  Py_VISIT(traverse_module_state->__pyx_kp_s_pyoctomap_octomap_pyx);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_qualname);
  Py_VISIT(traverse_module_state->__pyx_n_s_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_raw_dimension);
  Py_VISIT(traverse_module_state->__pyx_n_s_ray_length);
  Py_VISIT(traverse_module_state->__pyx_n_s_read);
  Py_VISIT(traverse_module_state->__pyx_n_s_readBinary);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_res);
  Py_VISIT(traverse_module_state->__pyx_n_s_resetChangeDetection);
  Py_VISIT(traverse_module_state->__pyx_n_s_resolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ret_prune);
  Py_VISIT(traverse_module_state->__pyx_n_s_round);
  Py_VISIT(traverse_module_state->__pyx_n_s_sample_point);
  Py_VISIT(traverse_module_state->__pyx_n_s_sampled_points);
  Py_VISIT(traverse_module_state->__pyx_n_s_search);
  Py_VISIT(traverse_module_state->__pyx_n_s_search_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_search_point);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_n_s_sensor_origin);
  Py_VISIT(traverse_module_state->__pyx_n_s_setBBXMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_setBBXMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_setClampingThresMax);
  Py_VISIT(traverse_module_state->__pyx_n_s_setClampingThresMin);
  Py_VISIT(traverse_module_state->__pyx_n_s_setLogOdds);
  Py_VISIT(traverse_module_state->__pyx_n_s_setOccupancyThres);
  Py_VISIT(traverse_module_state->__pyx_n_s_setProbHit);
  Py_VISIT(traverse_module_state->__pyx_n_s_setProbMiss);
  Py_VISIT(traverse_module_state->__pyx_n_s_setResolution);
  Py_VISIT(traverse_module_state->__pyx_n_s_setValue);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_shape);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_startswith);
  Py_VISIT(traverse_module_state->__pyx_n_s_step);
  Py_VISIT(traverse_module_state->__pyx_n_s_step_size);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_success);
  Py_VISIT(traverse_module_state->__pyx_n_s_success_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_sum);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_thresProb);
  Py_VISIT(traverse_module_state->__pyx_n_s_toMaxLikelihood);
  Py_VISIT(traverse_module_state->__pyx_n_s_treatUnknownAsOccupied);
  Py_VISIT(traverse_module_state->__pyx_n_s_tree);
  Py_VISIT(traverse_module_state->__pyx_n_s_unique_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_updateInnerOccupancy);
  Py_VISIT(traverse_module_state->__pyx_n_s_updateNode);
  Py_VISIT(traverse_module_state->__pyx_n_s_updateNodes);
  Py_VISIT(traverse_module_state->__pyx_n_s_updateOccupancyChildren);
  Py_VISIT(traverse_module_state->__pyx_n_s_updateRealDist);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_inner_occupancy);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_useBBXLimit);
  Py_VISIT(traverse_module_state->__pyx_kp_u_utf_8);
  Py_VISIT(traverse_module_state->__pyx_n_s_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_volume);
  Py_VISIT(traverse_module_state->__pyx_n_s_write);
  Py_VISIT(traverse_module_state->__pyx_n_s_writeBinary);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_y);
  Py_VISIT(traverse_module_state->__pyx_n_s_z);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeros);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_1);
  Py_VISIT(traverse_module_state->__pyx_float_1_0);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1_);
  Py_VISIT(traverse_module_state->__pyx_float_neg_1_0);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_tuple_);
  Py_VISIT(traverse_module_state->__pyx_slice__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__7);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__12);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__26);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__55);
  Py_VISIT(traverse_module_state->__pyx_tuple__57);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__69);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__77);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__90);
  Py_VISIT(traverse_module_state->__pyx_tuple__91);
  Py_VISIT(traverse_module_state->__pyx_tuple__93);
  Py_VISIT(traverse_module_state->__pyx_tuple__95);
  Py_VISIT(traverse_module_state->__pyx_tuple__97);
  Py_VISIT(traverse_module_state->__pyx_tuple__105);
  Py_VISIT(traverse_module_state->__pyx_tuple__112);
  Py_VISIT(traverse_module_state->__pyx_tuple__118);
  Py_VISIT(traverse_module_state->__pyx_tuple__120);
  Py_VISIT(traverse_module_state->__pyx_tuple__122);
  Py_VISIT(traverse_module_state->__pyx_tuple__124);
  Py_VISIT(traverse_module_state->__pyx_tuple__128);
  Py_VISIT(traverse_module_state->__pyx_tuple__130);
  Py_VISIT(traverse_module_state->__pyx_tuple__131);
  Py_VISIT(traverse_module_state->__pyx_tuple__134);
  Py_VISIT(traverse_module_state->__pyx_tuple__147);
  Py_VISIT(traverse_module_state->__pyx_tuple__150);
  Py_VISIT(traverse_module_state->__pyx_tuple__154);
  Py_VISIT(traverse_module_state->__pyx_tuple__159);
  Py_VISIT(traverse_module_state->__pyx_tuple__163);
  Py_VISIT(traverse_module_state->__pyx_tuple__165);
  Py_VISIT(traverse_module_state->__pyx_tuple__168);
  Py_VISIT(traverse_module_state->__pyx_tuple__171);
  Py_VISIT(traverse_module_state->__pyx_tuple__175);
  Py_VISIT(traverse_module_state->__pyx_tuple__177);
  Py_VISIT(traverse_module_state->__pyx_tuple__179);
  Py_VISIT(traverse_module_state->__pyx_tuple__181);
  Py_VISIT(traverse_module_state->__pyx_tuple__182);
  Py_VISIT(traverse_module_state->__pyx_tuple__184);
  Py_VISIT(traverse_module_state->__pyx_tuple__185);
  Py_VISIT(traverse_module_state->__pyx_tuple__187);
  Py_VISIT(traverse_module_state->__pyx_tuple__189);
  Py_VISIT(traverse_module_state->__pyx_tuple__191);
  Py_VISIT(traverse_module_state->__pyx_codeobj__13);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__18);
  Py_VISIT(traverse_module_state->__pyx_codeobj__20);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__27);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__31);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__33);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__35);
  Py_VISIT(traverse_module_state->__pyx_codeobj__36);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__42);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__46);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__48);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__50);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__52);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__54);
  Py_VISIT(traverse_module_state->__pyx_codeobj__56);
  Py_VISIT(traverse_module_state->__pyx_codeobj__58);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__60);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__66);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__76);
  Py_VISIT(traverse_module_state->__pyx_codeobj__78);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__92);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__100);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__106);
  Py_VISIT(traverse_module_state->__pyx_codeobj__107);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  Py_VISIT(traverse_module_state->__pyx_codeobj__109);
  Py_VISIT(traverse_module_state->__pyx_codeobj__110);
  Py_VISIT(traverse_module_state->__pyx_codeobj__111);
  Py_VISIT(traverse_module_state->__pyx_codeobj__113);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__115);
  Py_VISIT(traverse_module_state->__pyx_codeobj__116);
  Py_VISIT(traverse_module_state->__pyx_codeobj__117);
  Py_VISIT(traverse_module_state->__pyx_codeobj__119);
  Py_VISIT(traverse_module_state->__pyx_codeobj__121);
  Py_VISIT(traverse_module_state->__pyx_codeobj__123);
  Py_VISIT(traverse_module_state->__pyx_codeobj__125);
  Py_VISIT(traverse_module_state->__pyx_codeobj__126);
  Py_VISIT(traverse_module_state->__pyx_codeobj__127);
  Py_VISIT(traverse_module_state->__pyx_codeobj__129);
  Py_VISIT(traverse_module_state->__pyx_codeobj__132);
  Py_VISIT(traverse_module_state->__pyx_codeobj__133);
  Py_VISIT(traverse_module_state->__pyx_codeobj__135);
  Py_VISIT(traverse_module_state->__pyx_codeobj__136);
  Py_VISIT(traverse_module_state->__pyx_codeobj__137);
  Py_VISIT(traverse_module_state->__pyx_codeobj__138);
  Py_VISIT(traverse_module_state->__pyx_codeobj__139);
  Py_VISIT(traverse_module_state->__pyx_codeobj__140);
  Py_VISIT(traverse_module_state->__pyx_codeobj__141);
  Py_VISIT(traverse_module_state->__pyx_codeobj__142);
  Py_VISIT(traverse_module_state->__pyx_codeobj__143);
  Py_VISIT(traverse_module_state->__pyx_codeobj__144);
  Py_VISIT(traverse_module_state->__pyx_codeobj__145);
  Py_VISIT(traverse_module_state->__pyx_codeobj__146);
  Py_VISIT(traverse_module_state->__pyx_codeobj__148);
  Py_VISIT(traverse_module_state->__pyx_codeobj__149);
  Py_VISIT(traverse_module_state->__pyx_codeobj__151);
  Py_VISIT(traverse_module_state->__pyx_codeobj__152);
  Py_VISIT(traverse_module_state->__pyx_codeobj__153);
  Py_VISIT(traverse_module_state->__pyx_codeobj__155);
  Py_VISIT(traverse_module_state->__pyx_codeobj__156);
  Py_VISIT(traverse_module_state->__pyx_codeobj__157);
  Py_VISIT(traverse_module_state->__pyx_codeobj__158);
  Py_VISIT(traverse_module_state->__pyx_codeobj__160);
  Py_VISIT(traverse_module_state->__pyx_codeobj__161);
  Py_VISIT(traverse_module_state->__pyx_codeobj__162);
  Py_VISIT(traverse_module_state->__pyx_codeobj__164);
  Py_VISIT(traverse_module_state->__pyx_codeobj__166);
  Py_VISIT(traverse_module_state->__pyx_codeobj__167);
  Py_VISIT(traverse_module_state->__pyx_codeobj__169);
  Py_VISIT(traverse_module_state->__pyx_codeobj__170);
  Py_VISIT(traverse_module_state->__pyx_codeobj__172);
  Py_VISIT(traverse_module_state->__pyx_codeobj__173);
  Py_VISIT(traverse_module_state->__pyx_codeobj__174);
  Py_VISIT(traverse_module_state->__pyx_codeobj__176);
  Py_VISIT(traverse_module_state->__pyx_codeobj__178);
  Py_VISIT(traverse_module_state->__pyx_codeobj__180);
  Py_VISIT(traverse_module_state->__pyx_codeobj__183);
  Py_VISIT(traverse_module_state->__pyx_codeobj__186);
  Py_VISIT(traverse_module_state->__pyx_codeobj__188);
  Py_VISIT(traverse_module_state->__pyx_codeobj__190);
  Py_VISIT(traverse_module_state->__pyx_codeobj__192);
  Py_VISIT(traverse_module_state->__pyx_codeobj__193);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#if CYTHON_USE_MODULE_STATE
#define __pyx_type_9pyoctomap_7octomap_OcTreeKey __pyx_mstate_global->__pyx_type_9pyoctomap_7octomap_OcTreeKey
#define __pyx_type_9pyoctomap_7octomap_OcTreeNode __pyx_mstate_global->__pyx_type_9pyoctomap_7octomap_OcTreeNode
#define __pyx_type_9pyoctomap_7octomap_SimpleTreeIterator __pyx_mstate_global->__pyx_type_9pyoctomap_7octomap_SimpleTreeIterator
#define __pyx_type_9pyoctomap_7octomap_SimpleLeafIterator __pyx_mstate_global->__pyx_type_9pyoctomap_7octomap_SimpleLeafIterator
#define __pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator __pyx_mstate_global->__pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator
#define __pyx_type_9pyoctomap_7octomap_OcTree __pyx_mstate_global->__pyx_type_9pyoctomap_7octomap_OcTree
#endif
#define __pyx_ptype_9pyoctomap_7octomap_OcTreeKey __pyx_mstate_global->__pyx_ptype_9pyoctomap_7octomap_OcTreeKey
#define __pyx_ptype_9pyoctomap_7octomap_OcTreeNode __pyx_mstate_global->__pyx_ptype_9pyoctomap_7octomap_OcTreeNode
#define __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator __pyx_mstate_global->__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator
#define __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator __pyx_mstate_global->__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator
#define __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator __pyx_mstate_global->__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator
#define __pyx_ptype_9pyoctomap_7octomap_OcTree __pyx_mstate_global->__pyx_ptype_9pyoctomap_7octomap_OcTree
#define __pyx_kp_u_Error_in_point_cloud_processing __pyx_mstate_global->__pyx_kp_u_Error_in_point_cloud_processing
#define __pyx_kp_u_Expected_OcTreeNode __pyx_mstate_global->__pyx_kp_u_Expected_OcTreeNode
#define __pyx_kp_u_Expected_OcTreeNode_or_iterator __pyx_mstate_global->__pyx_kp_u_Expected_OcTreeNode_or_iterator
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_n_s_NullPointerException __pyx_mstate_global->__pyx_n_s_NullPointerException
#define __pyx_n_s_NullPointerException___init __pyx_mstate_global->__pyx_n_s_NullPointerException___init
#define __pyx_kp_s_Null_pointer_exception __pyx_mstate_global->__pyx_kp_s_Null_pointer_exception
#define __pyx_n_s_Number __pyx_mstate_global->__pyx_n_s_Number
#define __pyx_n_s_OcTree __pyx_mstate_global->__pyx_n_s_OcTree
#define __pyx_kp_u_OcTreeKey __pyx_mstate_global->__pyx_kp_u_OcTreeKey
#define __pyx_n_s_OcTreeKey_2 __pyx_mstate_global->__pyx_n_s_OcTreeKey_2
#define __pyx_n_s_OcTreeKey___reduce_cython __pyx_mstate_global->__pyx_n_s_OcTreeKey___reduce_cython
#define __pyx_n_s_OcTreeKey___setstate_cython __pyx_mstate_global->__pyx_n_s_OcTreeKey___setstate_cython
#define __pyx_n_s_OcTreeKey_computeChildIdx __pyx_mstate_global->__pyx_n_s_OcTreeKey_computeChildIdx
#define __pyx_n_s_OcTreeKey_computeIndexKey __pyx_mstate_global->__pyx_n_s_OcTreeKey_computeIndexKey
#define __pyx_n_s_OcTreeNode __pyx_mstate_global->__pyx_n_s_OcTreeNode
#define __pyx_n_s_OcTreeNode___reduce_cython __pyx_mstate_global->__pyx_n_s_OcTreeNode___reduce_cython
#define __pyx_n_s_OcTreeNode___setstate_cython __pyx_mstate_global->__pyx_n_s_OcTreeNode___setstate_cython
#define __pyx_n_s_OcTreeNode_addValue __pyx_mstate_global->__pyx_n_s_OcTreeNode_addValue
#define __pyx_n_s_OcTreeNode_childExists __pyx_mstate_global->__pyx_n_s_OcTreeNode_childExists
#define __pyx_n_s_OcTreeNode_getLogOdds __pyx_mstate_global->__pyx_n_s_OcTreeNode_getLogOdds
#define __pyx_n_s_OcTreeNode_getMaxChildLogOdds __pyx_mstate_global->__pyx_n_s_OcTreeNode_getMaxChildLogOdds
#define __pyx_n_s_OcTreeNode_getOccupancy __pyx_mstate_global->__pyx_n_s_OcTreeNode_getOccupancy
#define __pyx_n_s_OcTreeNode_getValue __pyx_mstate_global->__pyx_n_s_OcTreeNode_getValue
#define __pyx_n_s_OcTreeNode_hasChildren __pyx_mstate_global->__pyx_n_s_OcTreeNode_hasChildren
#define __pyx_n_s_OcTreeNode_setLogOdds __pyx_mstate_global->__pyx_n_s_OcTreeNode_setLogOdds
#define __pyx_n_s_OcTreeNode_setValue __pyx_mstate_global->__pyx_n_s_OcTreeNode_setValue
#define __pyx_n_s_OcTreeNode_updateOccupancyChildr __pyx_mstate_global->__pyx_n_s_OcTreeNode_updateOccupancyChildr
#define __pyx_n_s_OcTree___reduce_cython __pyx_mstate_global->__pyx_n_s_OcTree___reduce_cython
#define __pyx_n_s_OcTree___setstate_cython __pyx_mstate_global->__pyx_n_s_OcTree___setstate_cython
#define __pyx_n_s_OcTree__discretizePointCloud __pyx_mstate_global->__pyx_n_s_OcTree__discretizePointCloud
#define __pyx_n_s_OcTree_addPointCloudWithRayCasti __pyx_mstate_global->__pyx_n_s_OcTree_addPointCloudWithRayCasti
#define __pyx_n_s_OcTree_addPointWithRayCasting __pyx_mstate_global->__pyx_n_s_OcTree_addPointWithRayCasting
#define __pyx_n_s_OcTree_adjustKeyAtDepth __pyx_mstate_global->__pyx_n_s_OcTree_adjustKeyAtDepth
#define __pyx_n_s_OcTree_bbxSet __pyx_mstate_global->__pyx_n_s_OcTree_bbxSet
#define __pyx_n_s_OcTree_begin_leafs __pyx_mstate_global->__pyx_n_s_OcTree_begin_leafs
#define __pyx_n_s_OcTree_begin_leafs_bbx __pyx_mstate_global->__pyx_n_s_OcTree_begin_leafs_bbx
#define __pyx_n_s_OcTree_begin_tree __pyx_mstate_global->__pyx_n_s_OcTree_begin_tree
#define __pyx_n_s_OcTree_calcNumNodes __pyx_mstate_global->__pyx_n_s_OcTree_calcNumNodes
#define __pyx_n_s_OcTree_castRay __pyx_mstate_global->__pyx_n_s_OcTree_castRay
#define __pyx_n_s_OcTree_clear __pyx_mstate_global->__pyx_n_s_OcTree_clear
#define __pyx_n_s_OcTree_coordToKey __pyx_mstate_global->__pyx_n_s_OcTree_coordToKey
#define __pyx_n_s_OcTree_coordToKeyChecked __pyx_mstate_global->__pyx_n_s_OcTree_coordToKeyChecked
#define __pyx_n_s_OcTree_createNodeChild __pyx_mstate_global->__pyx_n_s_OcTree_createNodeChild
#define __pyx_n_s_OcTree_deleteNode __pyx_mstate_global->__pyx_n_s_OcTree_deleteNode
#define __pyx_n_s_OcTree_deleteNodeChild __pyx_mstate_global->__pyx_n_s_OcTree_deleteNodeChild
#define __pyx_n_s_OcTree_dynamicEDT_checkConsisten __pyx_mstate_global->__pyx_n_s_OcTree_dynamicEDT_checkConsisten
#define __pyx_n_s_OcTree_dynamicEDT_generate __pyx_mstate_global->__pyx_n_s_OcTree_dynamicEDT_generate
#define __pyx_n_s_OcTree_dynamicEDT_getDistance __pyx_mstate_global->__pyx_n_s_OcTree_dynamicEDT_getDistance
#define __pyx_n_s_OcTree_dynamicEDT_getMaxDist __pyx_mstate_global->__pyx_n_s_OcTree_dynamicEDT_getMaxDist
#define __pyx_n_s_OcTree_dynamicEDT_update __pyx_mstate_global->__pyx_n_s_OcTree_dynamicEDT_update
#define __pyx_n_s_OcTree_end_leafs __pyx_mstate_global->__pyx_n_s_OcTree_end_leafs
#define __pyx_n_s_OcTree_end_leafs_bbx __pyx_mstate_global->__pyx_n_s_OcTree_end_leafs_bbx
#define __pyx_n_s_OcTree_end_tree __pyx_mstate_global->__pyx_n_s_OcTree_end_tree
#define __pyx_n_s_OcTree_expandNode __pyx_mstate_global->__pyx_n_s_OcTree_expandNode
#define __pyx_n_s_OcTree_extractPointCloud __pyx_mstate_global->__pyx_n_s_OcTree_extractPointCloud
#define __pyx_n_s_OcTree_getBBXBounds __pyx_mstate_global->__pyx_n_s_OcTree_getBBXBounds
#define __pyx_n_s_OcTree_getBBXCenter __pyx_mstate_global->__pyx_n_s_OcTree_getBBXCenter
#define __pyx_n_s_OcTree_getBBXMax __pyx_mstate_global->__pyx_n_s_OcTree_getBBXMax
#define __pyx_n_s_OcTree_getBBXMin __pyx_mstate_global->__pyx_n_s_OcTree_getBBXMin
#define __pyx_n_s_OcTree_getClampingThresMax __pyx_mstate_global->__pyx_n_s_OcTree_getClampingThresMax
#define __pyx_n_s_OcTree_getClampingThresMaxLog __pyx_mstate_global->__pyx_n_s_OcTree_getClampingThresMaxLog
#define __pyx_n_s_OcTree_getClampingThresMin __pyx_mstate_global->__pyx_n_s_OcTree_getClampingThresMin
#define __pyx_n_s_OcTree_getClampingThresMinLog __pyx_mstate_global->__pyx_n_s_OcTree_getClampingThresMinLog
#define __pyx_n_s_OcTree_getLabels __pyx_mstate_global->__pyx_n_s_OcTree_getLabels
#define __pyx_n_s_OcTree_getMetricMax __pyx_mstate_global->__pyx_n_s_OcTree_getMetricMax
#define __pyx_n_s_OcTree_getMetricMin __pyx_mstate_global->__pyx_n_s_OcTree_getMetricMin
#define __pyx_n_s_OcTree_getMetricSize __pyx_mstate_global->__pyx_n_s_OcTree_getMetricSize
#define __pyx_n_s_OcTree_getNodeChild __pyx_mstate_global->__pyx_n_s_OcTree_getNodeChild
#define __pyx_n_s_OcTree_getNumLeafNodes __pyx_mstate_global->__pyx_n_s_OcTree_getNumLeafNodes
#define __pyx_n_s_OcTree_getOccupancyThres __pyx_mstate_global->__pyx_n_s_OcTree_getOccupancyThres
#define __pyx_n_s_OcTree_getOccupancyThresLog __pyx_mstate_global->__pyx_n_s_OcTree_getOccupancyThresLog
#define __pyx_n_s_OcTree_getProbHit __pyx_mstate_global->__pyx_n_s_OcTree_getProbHit
#define __pyx_n_s_OcTree_getProbHitLog __pyx_mstate_global->__pyx_n_s_OcTree_getProbHitLog
#define __pyx_n_s_OcTree_getProbMiss __pyx_mstate_global->__pyx_n_s_OcTree_getProbMiss
#define __pyx_n_s_OcTree_getProbMissLog __pyx_mstate_global->__pyx_n_s_OcTree_getProbMissLog
#define __pyx_n_s_OcTree_getResolution __pyx_mstate_global->__pyx_n_s_OcTree_getResolution
#define __pyx_n_s_OcTree_getRoot __pyx_mstate_global->__pyx_n_s_OcTree_getRoot
#define __pyx_n_s_OcTree_getTreeDepth __pyx_mstate_global->__pyx_n_s_OcTree_getTreeDepth
#define __pyx_n_s_OcTree_getTreeType __pyx_mstate_global->__pyx_n_s_OcTree_getTreeType
#define __pyx_n_s_OcTree_inBBX __pyx_mstate_global->__pyx_n_s_OcTree_inBBX
#define __pyx_n_s_OcTree_insertPointCloud __pyx_mstate_global->__pyx_n_s_OcTree_insertPointCloud
#define __pyx_n_s_OcTree_insertPointCloudFast __pyx_mstate_global->__pyx_n_s_OcTree_insertPointCloudFast
#define __pyx_n_s_OcTree_insertPointCloudRaysFast __pyx_mstate_global->__pyx_n_s_OcTree_insertPointCloudRaysFast
#define __pyx_n_s_OcTree_isNodeAtThreshold __pyx_mstate_global->__pyx_n_s_OcTree_isNodeAtThreshold
#define __pyx_n_s_OcTree_isNodeCollapsible __pyx_mstate_global->__pyx_n_s_OcTree_isNodeCollapsible
#define __pyx_n_s_OcTree_isNodeOccupied __pyx_mstate_global->__pyx_n_s_OcTree_isNodeOccupied
#define __pyx_n_s_OcTree_keyToCoord __pyx_mstate_global->__pyx_n_s_OcTree_keyToCoord
#define __pyx_n_s_OcTree_markFreeSpaceAlongRay __pyx_mstate_global->__pyx_n_s_OcTree_markFreeSpaceAlongRay
#define __pyx_n_s_OcTree_memoryFullGrid __pyx_mstate_global->__pyx_n_s_OcTree_memoryFullGrid
#define __pyx_n_s_OcTree_memoryUsage __pyx_mstate_global->__pyx_n_s_OcTree_memoryUsage
#define __pyx_n_s_OcTree_memoryUsageNode __pyx_mstate_global->__pyx_n_s_OcTree_memoryUsageNode
#define __pyx_n_s_OcTree_nodeHasChildren __pyx_mstate_global->__pyx_n_s_OcTree_nodeHasChildren
#define __pyx_n_s_OcTree_pruneNode __pyx_mstate_global->__pyx_n_s_OcTree_pruneNode
#define __pyx_n_s_OcTree_read __pyx_mstate_global->__pyx_n_s_OcTree_read
#define __pyx_n_s_OcTree_readBinary __pyx_mstate_global->__pyx_n_s_OcTree_readBinary
#define __pyx_n_s_OcTree_resetChangeDetection __pyx_mstate_global->__pyx_n_s_OcTree_resetChangeDetection
#define __pyx_n_s_OcTree_search __pyx_mstate_global->__pyx_n_s_OcTree_search
#define __pyx_n_s_OcTree_setBBXMax __pyx_mstate_global->__pyx_n_s_OcTree_setBBXMax
#define __pyx_n_s_OcTree_setBBXMin __pyx_mstate_global->__pyx_n_s_OcTree_setBBXMin
#define __pyx_n_s_OcTree_setClampingThresMax __pyx_mstate_global->__pyx_n_s_OcTree_setClampingThresMax
#define __pyx_n_s_OcTree_setClampingThresMin __pyx_mstate_global->__pyx_n_s_OcTree_setClampingThresMin
#define __pyx_n_s_OcTree_setOccupancyThres __pyx_mstate_global->__pyx_n_s_OcTree_setOccupancyThres
#define __pyx_n_s_OcTree_setProbHit __pyx_mstate_global->__pyx_n_s_OcTree_setProbHit
#define __pyx_n_s_OcTree_setProbMiss __pyx_mstate_global->__pyx_n_s_OcTree_setProbMiss
#define __pyx_n_s_OcTree_setResolution __pyx_mstate_global->__pyx_n_s_OcTree_setResolution
#define __pyx_n_s_OcTree_size __pyx_mstate_global->__pyx_n_s_OcTree_size
#define __pyx_n_s_OcTree_toMaxLikelihood __pyx_mstate_global->__pyx_n_s_OcTree_toMaxLikelihood
#define __pyx_n_s_OcTree_updateInnerOccupancy __pyx_mstate_global->__pyx_n_s_OcTree_updateInnerOccupancy
#define __pyx_n_s_OcTree_updateNode __pyx_mstate_global->__pyx_n_s_OcTree_updateNode
#define __pyx_n_s_OcTree_updateNodes __pyx_mstate_global->__pyx_n_s_OcTree_updateNodes
#define __pyx_n_s_OcTree_useBBXLimit __pyx_mstate_global->__pyx_n_s_OcTree_useBBXLimit
#define __pyx_n_s_OcTree_volume __pyx_mstate_global->__pyx_n_s_OcTree_volume
#define __pyx_n_s_OcTree_write __pyx_mstate_global->__pyx_n_s_OcTree_write
#define __pyx_n_s_OcTree_writeBinary __pyx_mstate_global->__pyx_n_s_OcTree_writeBinary
#define __pyx_kp_b_Octomap_OcTree_file __pyx_mstate_global->__pyx_kp_b_Octomap_OcTree_file
#define __pyx_n_s_SimpleLeafBBXIterator __pyx_mstate_global->__pyx_n_s_SimpleLeafBBXIterator
#define __pyx_n_s_SimpleLeafBBXIterator___reduce_c __pyx_mstate_global->__pyx_n_s_SimpleLeafBBXIterator___reduce_c
#define __pyx_n_s_SimpleLeafBBXIterator___setstate __pyx_mstate_global->__pyx_n_s_SimpleLeafBBXIterator___setstate
#define __pyx_n_s_SimpleLeafBBXIterator_getCoordin __pyx_mstate_global->__pyx_n_s_SimpleLeafBBXIterator_getCoordin
#define __pyx_n_s_SimpleLeafBBXIterator_getDepth __pyx_mstate_global->__pyx_n_s_SimpleLeafBBXIterator_getDepth
#define __pyx_n_s_SimpleLeafBBXIterator_getSize __pyx_mstate_global->__pyx_n_s_SimpleLeafBBXIterator_getSize
#define __pyx_n_s_SimpleLeafBBXIterator_isLeaf __pyx_mstate_global->__pyx_n_s_SimpleLeafBBXIterator_isLeaf
#define __pyx_n_s_SimpleLeafIterator __pyx_mstate_global->__pyx_n_s_SimpleLeafIterator
#define __pyx_n_s_SimpleLeafIterator___reduce_cyth __pyx_mstate_global->__pyx_n_s_SimpleLeafIterator___reduce_cyth
#define __pyx_n_s_SimpleLeafIterator___setstate_cy __pyx_mstate_global->__pyx_n_s_SimpleLeafIterator___setstate_cy
#define __pyx_n_s_SimpleLeafIterator_getCoordinate __pyx_mstate_global->__pyx_n_s_SimpleLeafIterator_getCoordinate
#define __pyx_n_s_SimpleLeafIterator_getDepth __pyx_mstate_global->__pyx_n_s_SimpleLeafIterator_getDepth
#define __pyx_n_s_SimpleLeafIterator_getSize __pyx_mstate_global->__pyx_n_s_SimpleLeafIterator_getSize
#define __pyx_n_s_SimpleLeafIterator_isLeaf __pyx_mstate_global->__pyx_n_s_SimpleLeafIterator_isLeaf
#define __pyx_n_s_SimpleTreeIterator __pyx_mstate_global->__pyx_n_s_SimpleTreeIterator
#define __pyx_n_s_SimpleTreeIterator___reduce_cyth __pyx_mstate_global->__pyx_n_s_SimpleTreeIterator___reduce_cyth
#define __pyx_n_s_SimpleTreeIterator___setstate_cy __pyx_mstate_global->__pyx_n_s_SimpleTreeIterator___setstate_cy
#define __pyx_n_s_SimpleTreeIterator_getCoordinate __pyx_mstate_global->__pyx_n_s_SimpleTreeIterator_getCoordinate
#define __pyx_n_s_SimpleTreeIterator_getDepth __pyx_mstate_global->__pyx_n_s_SimpleTreeIterator_getDepth
#define __pyx_n_s_SimpleTreeIterator_getSize __pyx_mstate_global->__pyx_n_s_SimpleTreeIterator_getSize
#define __pyx_n_s_SimpleTreeIterator_isLeaf __pyx_mstate_global->__pyx_n_s_SimpleTreeIterator_isLeaf
#define __pyx_n_s_StopIteration __pyx_mstate_global->__pyx_n_s_StopIteration
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s__194 __pyx_mstate_global->__pyx_n_s__194
#define __pyx_kp_u__3 __pyx_mstate_global->__pyx_kp_u__3
#define __pyx_kp_u__4 __pyx_mstate_global->__pyx_kp_u__4
#define __pyx_n_s__6 __pyx_mstate_global->__pyx_n_s__6
#define __pyx_n_s_a __pyx_mstate_global->__pyx_n_s_a
#define __pyx_n_s_addPointCloudWithRayCasting __pyx_mstate_global->__pyx_n_s_addPointCloudWithRayCasting
#define __pyx_n_s_addPointWithRayCasting __pyx_mstate_global->__pyx_n_s_addPointWithRayCasting
#define __pyx_n_s_addValue __pyx_mstate_global->__pyx_n_s_addValue
#define __pyx_n_s_adjustKeyAtDepth __pyx_mstate_global->__pyx_n_s_adjustKeyAtDepth
#define __pyx_n_s_any __pyx_mstate_global->__pyx_n_s_any
#define __pyx_n_s_arg __pyx_mstate_global->__pyx_n_s_arg
#define __pyx_n_s_array __pyx_mstate_global->__pyx_n_s_array
#define __pyx_n_s_ascontiguousarray __pyx_mstate_global->__pyx_n_s_ascontiguousarray
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_axis __pyx_mstate_global->__pyx_n_s_axis
#define __pyx_n_s_b __pyx_mstate_global->__pyx_n_s_b
#define __pyx_n_s_bbxSet __pyx_mstate_global->__pyx_n_s_bbxSet
#define __pyx_n_s_bbx_max __pyx_mstate_global->__pyx_n_s_bbx_max
#define __pyx_n_s_bbx_min __pyx_mstate_global->__pyx_n_s_bbx_min
#define __pyx_n_s_begin_leafs __pyx_mstate_global->__pyx_n_s_begin_leafs
#define __pyx_n_s_begin_leafs_bbx __pyx_mstate_global->__pyx_n_s_begin_leafs_bbx
#define __pyx_n_s_begin_tree __pyx_mstate_global->__pyx_n_s_begin_tree
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_n_s_c_filename __pyx_mstate_global->__pyx_n_s_c_filename
#define __pyx_n_s_calcNumNodes __pyx_mstate_global->__pyx_n_s_calcNumNodes
#define __pyx_n_s_castRay __pyx_mstate_global->__pyx_n_s_castRay
#define __pyx_n_s_center __pyx_mstate_global->__pyx_n_s_center
#define __pyx_n_s_checked __pyx_mstate_global->__pyx_n_s_checked
#define __pyx_n_s_child __pyx_mstate_global->__pyx_n_s_child
#define __pyx_n_s_childExists __pyx_mstate_global->__pyx_n_s_childExists
#define __pyx_n_s_chk __pyx_mstate_global->__pyx_n_s_chk
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_clear __pyx_mstate_global->__pyx_n_s_clear
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_column_stack __pyx_mstate_global->__pyx_n_s_column_stack
#define __pyx_n_s_computeChildIdx __pyx_mstate_global->__pyx_n_s_computeChildIdx
#define __pyx_n_s_computeIndexKey __pyx_mstate_global->__pyx_n_s_computeIndexKey
#define __pyx_n_s_concatenate __pyx_mstate_global->__pyx_n_s_concatenate
#define __pyx_n_s_coord __pyx_mstate_global->__pyx_n_s_coord
#define __pyx_n_s_coordToKey __pyx_mstate_global->__pyx_n_s_coordToKey
#define __pyx_n_s_coordToKeyChecked __pyx_mstate_global->__pyx_n_s_coordToKeyChecked
#define __pyx_n_s_createNodeChild __pyx_mstate_global->__pyx_n_s_createNodeChild
#define __pyx_n_s_deleteNode __pyx_mstate_global->__pyx_n_s_deleteNode
#define __pyx_n_s_deleteNodeChild __pyx_mstate_global->__pyx_n_s_deleteNodeChild
#define __pyx_n_s_depth __pyx_mstate_global->__pyx_n_s_depth
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dimension __pyx_mstate_global->__pyx_n_s_dimension
#define __pyx_n_s_direction __pyx_mstate_global->__pyx_n_s_direction
#define __pyx_n_s_direction_2 __pyx_mstate_global->__pyx_n_s_direction_2
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_discrete_points __pyx_mstate_global->__pyx_n_s_discrete_points
#define __pyx_n_s_discretize __pyx_mstate_global->__pyx_n_s_discretize
#define __pyx_n_s_discretizePointCloud __pyx_mstate_global->__pyx_n_s_discretizePointCloud
#define __pyx_n_s_distances __pyx_mstate_global->__pyx_n_s_distances
#define __pyx_n_s_doc __pyx_mstate_global->__pyx_n_s_doc
#define __pyx_n_s_dtype __pyx_mstate_global->__pyx_n_s_dtype
#define __pyx_n_s_dynamicEDT_checkConsistency __pyx_mstate_global->__pyx_n_s_dynamicEDT_checkConsistency
#define __pyx_n_s_dynamicEDT_generate __pyx_mstate_global->__pyx_n_s_dynamicEDT_generate
#define __pyx_n_s_dynamicEDT_getDistance __pyx_mstate_global->__pyx_n_s_dynamicEDT_getDistance
#define __pyx_n_s_dynamicEDT_getMaxDist __pyx_mstate_global->__pyx_n_s_dynamicEDT_getMaxDist
#define __pyx_n_s_dynamicEDT_update __pyx_mstate_global->__pyx_n_s_dynamicEDT_update
#define __pyx_n_s_e __pyx_mstate_global->__pyx_n_s_e
#define __pyx_n_s_empty __pyx_mstate_global->__pyx_n_s_empty
#define __pyx_n_s_empty_arr __pyx_mstate_global->__pyx_n_s_empty_arr
#define __pyx_n_s_enable __pyx_mstate_global->__pyx_n_s_enable
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_s_end __pyx_mstate_global->__pyx_n_s_end
#define __pyx_n_s_end_2 __pyx_mstate_global->__pyx_n_s_end_2
#define __pyx_n_s_end_leafs __pyx_mstate_global->__pyx_n_s_end_leafs
#define __pyx_n_s_end_leafs_bbx __pyx_mstate_global->__pyx_n_s_end_leafs_bbx
#define __pyx_n_s_end_point __pyx_mstate_global->__pyx_n_s_end_point
#define __pyx_n_s_end_tree __pyx_mstate_global->__pyx_n_s_end_tree
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_expandNode __pyx_mstate_global->__pyx_n_s_expandNode
#define __pyx_n_s_extractPointCloud __pyx_mstate_global->__pyx_n_s_extractPointCloud
#define __pyx_n_s_filename __pyx_mstate_global->__pyx_n_s_filename
#define __pyx_n_s_filtered_points __pyx_mstate_global->__pyx_n_s_filtered_points
#define __pyx_n_s_float64 __pyx_mstate_global->__pyx_n_s_float64
#define __pyx_n_s_found_node __pyx_mstate_global->__pyx_n_s_found_node
#define __pyx_n_s_full __pyx_mstate_global->__pyx_n_s_full
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_getBBXBounds __pyx_mstate_global->__pyx_n_s_getBBXBounds
#define __pyx_n_s_getBBXCenter __pyx_mstate_global->__pyx_n_s_getBBXCenter
#define __pyx_n_s_getBBXMax __pyx_mstate_global->__pyx_n_s_getBBXMax
#define __pyx_n_s_getBBXMin __pyx_mstate_global->__pyx_n_s_getBBXMin
#define __pyx_n_s_getClampingThresMax __pyx_mstate_global->__pyx_n_s_getClampingThresMax
#define __pyx_n_s_getClampingThresMaxLog __pyx_mstate_global->__pyx_n_s_getClampingThresMaxLog
#define __pyx_n_s_getClampingThresMin __pyx_mstate_global->__pyx_n_s_getClampingThresMin
#define __pyx_n_s_getClampingThresMinLog __pyx_mstate_global->__pyx_n_s_getClampingThresMinLog
#define __pyx_n_s_getCoordinate __pyx_mstate_global->__pyx_n_s_getCoordinate
#define __pyx_n_s_getDepth __pyx_mstate_global->__pyx_n_s_getDepth
#define __pyx_n_s_getLabels __pyx_mstate_global->__pyx_n_s_getLabels
#define __pyx_n_s_getLogOdds __pyx_mstate_global->__pyx_n_s_getLogOdds
#define __pyx_n_s_getMaxChildLogOdds __pyx_mstate_global->__pyx_n_s_getMaxChildLogOdds
#define __pyx_n_s_getMetricMax __pyx_mstate_global->__pyx_n_s_getMetricMax
#define __pyx_n_s_getMetricMin __pyx_mstate_global->__pyx_n_s_getMetricMin
#define __pyx_n_s_getMetricSize __pyx_mstate_global->__pyx_n_s_getMetricSize
#define __pyx_n_s_getNodeChild __pyx_mstate_global->__pyx_n_s_getNodeChild
#define __pyx_n_s_getNumLeafNodes __pyx_mstate_global->__pyx_n_s_getNumLeafNodes
#define __pyx_n_s_getOccupancy __pyx_mstate_global->__pyx_n_s_getOccupancy
#define __pyx_n_s_getOccupancyThres __pyx_mstate_global->__pyx_n_s_getOccupancyThres
#define __pyx_n_s_getOccupancyThresLog __pyx_mstate_global->__pyx_n_s_getOccupancyThresLog
#define __pyx_n_s_getProbHit __pyx_mstate_global->__pyx_n_s_getProbHit
#define __pyx_n_s_getProbHitLog __pyx_mstate_global->__pyx_n_s_getProbHitLog
#define __pyx_n_s_getProbMiss __pyx_mstate_global->__pyx_n_s_getProbMiss
#define __pyx_n_s_getProbMissLog __pyx_mstate_global->__pyx_n_s_getProbMissLog
#define __pyx_n_s_getResolution __pyx_mstate_global->__pyx_n_s_getResolution
#define __pyx_n_s_getRoot __pyx_mstate_global->__pyx_n_s_getRoot
#define __pyx_n_s_getSize __pyx_mstate_global->__pyx_n_s_getSize
#define __pyx_n_s_getTreeDepth __pyx_mstate_global->__pyx_n_s_getTreeDepth
#define __pyx_n_s_getTreeType __pyx_mstate_global->__pyx_n_s_getTreeType
#define __pyx_n_s_getValue __pyx_mstate_global->__pyx_n_s_getValue
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_hasChildren __pyx_mstate_global->__pyx_n_s_hasChildren
#define __pyx_n_s_hit __pyx_mstate_global->__pyx_n_s_hit
#define __pyx_n_s_i __pyx_mstate_global->__pyx_n_s_i
#define __pyx_n_s_idx __pyx_mstate_global->__pyx_n_s_idx
#define __pyx_n_s_ignoreUnknownCells __pyx_mstate_global->__pyx_n_s_ignoreUnknownCells
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_inBBX __pyx_mstate_global->__pyx_n_s_inBBX
#define __pyx_n_s_indices __pyx_mstate_global->__pyx_n_s_indices
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_init_subclass __pyx_mstate_global->__pyx_n_s_init_subclass
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_insertPointCloud __pyx_mstate_global->__pyx_n_s_insertPointCloud
#define __pyx_n_s_insertPointCloudFast __pyx_mstate_global->__pyx_n_s_insertPointCloudFast
#define __pyx_n_s_insertPointCloudRaysFast __pyx_mstate_global->__pyx_n_s_insertPointCloudRaysFast
#define __pyx_n_s_int32 __pyx_mstate_global->__pyx_n_s_int32
#define __pyx_n_s_isLeaf __pyx_mstate_global->__pyx_n_s_isLeaf
#define __pyx_n_s_isNodeAtThreshold __pyx_mstate_global->__pyx_n_s_isNodeAtThreshold
#define __pyx_n_s_isNodeCollapsible __pyx_mstate_global->__pyx_n_s_isNodeCollapsible
#define __pyx_n_s_isNodeOccupied __pyx_mstate_global->__pyx_n_s_isNodeOccupied
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_occupied __pyx_mstate_global->__pyx_n_s_is_occupied
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_iss __pyx_mstate_global->__pyx_n_s_iss
#define __pyx_n_s_it __pyx_mstate_global->__pyx_n_s_it
#define __pyx_n_s_itr __pyx_mstate_global->__pyx_n_s_itr
#define __pyx_n_s_keep __pyx_mstate_global->__pyx_n_s_keep
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_keyToCoord __pyx_mstate_global->__pyx_n_s_keyToCoord
#define __pyx_n_s_key_in __pyx_mstate_global->__pyx_n_s_key_in
#define __pyx_n_s_key_out __pyx_mstate_global->__pyx_n_s_key_out
#define __pyx_n_s_key_tuple __pyx_mstate_global->__pyx_n_s_key_tuple
#define __pyx_n_s_l __pyx_mstate_global->__pyx_n_s_l
#define __pyx_n_s_labels __pyx_mstate_global->__pyx_n_s_labels
#define __pyx_n_s_lazy_eval __pyx_mstate_global->__pyx_n_s_lazy_eval
#define __pyx_n_s_level __pyx_mstate_global->__pyx_n_s_level
#define __pyx_n_s_linalg __pyx_mstate_global->__pyx_n_s_linalg
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_markFreeSpaceAlongRay __pyx_mstate_global->__pyx_n_s_markFreeSpaceAlongRay
#define __pyx_n_s_max __pyx_mstate_global->__pyx_n_s_max
#define __pyx_n_s_maxDepth __pyx_mstate_global->__pyx_n_s_maxDepth
#define __pyx_n_s_maxRange __pyx_mstate_global->__pyx_n_s_maxRange
#define __pyx_n_s_max_range __pyx_mstate_global->__pyx_n_s_max_range
#define __pyx_n_s_maxdist __pyx_mstate_global->__pyx_n_s_maxdist
#define __pyx_n_s_maxrange __pyx_mstate_global->__pyx_n_s_maxrange
#define __pyx_n_s_memoryFullGrid __pyx_mstate_global->__pyx_n_s_memoryFullGrid
#define __pyx_n_s_memoryUsage __pyx_mstate_global->__pyx_n_s_memoryUsage
#define __pyx_n_s_memoryUsageNode __pyx_mstate_global->__pyx_n_s_memoryUsageNode
#define __pyx_n_s_metaclass __pyx_mstate_global->__pyx_n_s_metaclass
#define __pyx_n_s_min __pyx_mstate_global->__pyx_n_s_min
#define __pyx_n_s_module __pyx_mstate_global->__pyx_n_s_module
#define __pyx_n_s_mro_entries __pyx_mstate_global->__pyx_n_s_mro_entries
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_new_tree __pyx_mstate_global->__pyx_n_s_new_tree
#define __pyx_n_s_newaxis __pyx_mstate_global->__pyx_n_s_newaxis
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_node __pyx_mstate_global->__pyx_n_s_node
#define __pyx_n_s_nodeHasChildren __pyx_mstate_global->__pyx_n_s_nodeHasChildren
#define __pyx_n_s_nonzero __pyx_mstate_global->__pyx_n_s_nonzero
#define __pyx_n_s_norm __pyx_mstate_global->__pyx_n_s_norm
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_num_points __pyx_mstate_global->__pyx_n_s_num_points
#define __pyx_n_s_num_steps __pyx_mstate_global->__pyx_n_s_num_steps
#define __pyx_n_s_numbers __pyx_mstate_global->__pyx_n_s_numbers
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_kp_u_numpy__core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy__core_multiarray_failed_to
#define __pyx_kp_u_numpy__core_umath_failed_to_impo __pyx_mstate_global->__pyx_kp_u_numpy__core_umath_failed_to_impo
#define __pyx_n_s_occupied __pyx_mstate_global->__pyx_n_s_occupied
#define __pyx_n_s_occupied_arr __pyx_mstate_global->__pyx_n_s_occupied_arr
#define __pyx_n_s_octree_read __pyx_mstate_global->__pyx_n_s_octree_read
#define __pyx_n_s_ones __pyx_mstate_global->__pyx_n_s_ones
#define __pyx_n_s_origin __pyx_mstate_global->__pyx_n_s_origin
#define __pyx_n_s_origin64 __pyx_mstate_global->__pyx_n_s_origin64
#define __pyx_n_s_origin_2 __pyx_mstate_global->__pyx_n_s_origin_2
#define __pyx_n_s_origin_c __pyx_mstate_global->__pyx_n_s_origin_c
#define __pyx_n_s_oss __pyx_mstate_global->__pyx_n_s_oss
#define __pyx_n_s_p __pyx_mstate_global->__pyx_n_s_p
#define __pyx_n_s_pc __pyx_mstate_global->__pyx_n_s_pc
#define __pyx_n_s_point __pyx_mstate_global->__pyx_n_s_point
#define __pyx_n_s_point64 __pyx_mstate_global->__pyx_n_s_point64
#define __pyx_n_s_point_cloud __pyx_mstate_global->__pyx_n_s_point_cloud
#define __pyx_n_s_pointcloud __pyx_mstate_global->__pyx_n_s_pointcloud
#define __pyx_n_s_points __pyx_mstate_global->__pyx_n_s_points
#define __pyx_n_s_prepare __pyx_mstate_global->__pyx_n_s_prepare
#define __pyx_n_s_print __pyx_mstate_global->__pyx_n_s_print
#define __pyx_n_s_prob __pyx_mstate_global->__pyx_n_s_prob
#define __pyx_n_s_pruneNode __pyx_mstate_global->__pyx_n_s_pruneNode
#define __pyx_n_s_pt __pyx_mstate_global->__pyx_n_s_pt
#define __pyx_n_s_pyoctomap_octomap __pyx_mstate_global->__pyx_n_s_pyoctomap_octomap
#define __pyx_kp_s_pyoctomap_octomap_pyx __pyx_mstate_global->__pyx_kp_s_pyoctomap_octomap_pyx
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_qualname __pyx_mstate_global->__pyx_n_s_qualname
#define __pyx_n_s_r __pyx_mstate_global->__pyx_n_s_r
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_raw_dimension __pyx_mstate_global->__pyx_n_s_raw_dimension
#define __pyx_n_s_ray_length __pyx_mstate_global->__pyx_n_s_ray_length
#define __pyx_n_s_read __pyx_mstate_global->__pyx_n_s_read
#define __pyx_n_s_readBinary __pyx_mstate_global->__pyx_n_s_readBinary
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_res __pyx_mstate_global->__pyx_n_s_res
#define __pyx_n_s_resetChangeDetection __pyx_mstate_global->__pyx_n_s_resetChangeDetection
#define __pyx_n_s_resolution __pyx_mstate_global->__pyx_n_s_resolution
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_ret __pyx_mstate_global->__pyx_n_s_ret
#define __pyx_n_s_ret_2 __pyx_mstate_global->__pyx_n_s_ret_2
#define __pyx_n_s_ret_prune __pyx_mstate_global->__pyx_n_s_ret_prune
#define __pyx_n_s_round __pyx_mstate_global->__pyx_n_s_round
#define __pyx_n_s_sample_point __pyx_mstate_global->__pyx_n_s_sample_point
#define __pyx_n_s_sampled_points __pyx_mstate_global->__pyx_n_s_sampled_points
#define __pyx_n_s_search __pyx_mstate_global->__pyx_n_s_search
#define __pyx_n_s_search_key __pyx_mstate_global->__pyx_n_s_search_key
#define __pyx_n_s_search_point __pyx_mstate_global->__pyx_n_s_search_point
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_n_s_sensor_origin __pyx_mstate_global->__pyx_n_s_sensor_origin
#define __pyx_n_s_setBBXMax __pyx_mstate_global->__pyx_n_s_setBBXMax
#define __pyx_n_s_setBBXMin __pyx_mstate_global->__pyx_n_s_setBBXMin
#define __pyx_n_s_setClampingThresMax __pyx_mstate_global->__pyx_n_s_setClampingThresMax
#define __pyx_n_s_setClampingThresMin __pyx_mstate_global->__pyx_n_s_setClampingThresMin
#define __pyx_n_s_setLogOdds __pyx_mstate_global->__pyx_n_s_setLogOdds
#define __pyx_n_s_setOccupancyThres __pyx_mstate_global->__pyx_n_s_setOccupancyThres
#define __pyx_n_s_setProbHit __pyx_mstate_global->__pyx_n_s_setProbHit
#define __pyx_n_s_setProbMiss __pyx_mstate_global->__pyx_n_s_setProbMiss
#define __pyx_n_s_setResolution __pyx_mstate_global->__pyx_n_s_setResolution
#define __pyx_n_s_setValue __pyx_mstate_global->__pyx_n_s_setValue
#define __pyx_n_s_set_name __pyx_mstate_global->__pyx_n_s_set_name
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_shape __pyx_mstate_global->__pyx_n_s_shape
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_startswith __pyx_mstate_global->__pyx_n_s_startswith
#define __pyx_n_s_step __pyx_mstate_global->__pyx_n_s_step
#define __pyx_n_s_step_size __pyx_mstate_global->__pyx_n_s_step_size
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_success __pyx_mstate_global->__pyx_n_s_success
#define __pyx_n_s_success_count __pyx_mstate_global->__pyx_n_s_success_count
#define __pyx_n_s_sum __pyx_mstate_global->__pyx_n_s_sum
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_t __pyx_mstate_global->__pyx_n_s_t
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_thresProb __pyx_mstate_global->__pyx_n_s_thresProb
#define __pyx_n_s_toMaxLikelihood __pyx_mstate_global->__pyx_n_s_toMaxLikelihood
#define __pyx_n_s_treatUnknownAsOccupied __pyx_mstate_global->__pyx_n_s_treatUnknownAsOccupied
#define __pyx_n_s_tree __pyx_mstate_global->__pyx_n_s_tree
#define __pyx_n_s_unique_keys __pyx_mstate_global->__pyx_n_s_unique_keys
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_updateInnerOccupancy __pyx_mstate_global->__pyx_n_s_updateInnerOccupancy
#define __pyx_n_s_updateNode __pyx_mstate_global->__pyx_n_s_updateNode
#define __pyx_n_s_updateNodes __pyx_mstate_global->__pyx_n_s_updateNodes
#define __pyx_n_s_updateOccupancyChildren __pyx_mstate_global->__pyx_n_s_updateOccupancyChildren
#define __pyx_n_s_updateRealDist __pyx_mstate_global->__pyx_n_s_updateRealDist
#define __pyx_n_s_update_inner_occupancy __pyx_mstate_global->__pyx_n_s_update_inner_occupancy
#define __pyx_n_s_update_key __pyx_mstate_global->__pyx_n_s_update_key
#define __pyx_n_s_useBBXLimit __pyx_mstate_global->__pyx_n_s_useBBXLimit
#define __pyx_kp_u_utf_8 __pyx_mstate_global->__pyx_kp_u_utf_8
#define __pyx_n_s_v __pyx_mstate_global->__pyx_n_s_v
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_n_s_volume __pyx_mstate_global->__pyx_n_s_volume
#define __pyx_n_s_write __pyx_mstate_global->__pyx_n_s_write
#define __pyx_n_s_writeBinary __pyx_mstate_global->__pyx_n_s_writeBinary
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_n_s_y __pyx_mstate_global->__pyx_n_s_y
#define __pyx_n_s_z __pyx_mstate_global->__pyx_n_s_z
#define __pyx_n_s_zeros __pyx_mstate_global->__pyx_n_s_zeros
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_float_0_1 __pyx_mstate_global->__pyx_float_0_1
#define __pyx_float_1_0 __pyx_mstate_global->__pyx_float_1_0
#define __pyx_float_neg_1_ __pyx_mstate_global->__pyx_float_neg_1_
#define __pyx_float_neg_1_0 __pyx_mstate_global->__pyx_float_neg_1_0
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_tuple_ __pyx_mstate_global->__pyx_tuple_
#define __pyx_slice__8 __pyx_mstate_global->__pyx_slice__8
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__7 __pyx_mstate_global->__pyx_tuple__7
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__12 __pyx_mstate_global->__pyx_tuple__12
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__26 __pyx_mstate_global->__pyx_tuple__26
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_tuple__55 __pyx_mstate_global->__pyx_tuple__55
#define __pyx_tuple__57 __pyx_mstate_global->__pyx_tuple__57
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__69 __pyx_mstate_global->__pyx_tuple__69
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__77 __pyx_mstate_global->__pyx_tuple__77
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__90 __pyx_mstate_global->__pyx_tuple__90
#define __pyx_tuple__91 __pyx_mstate_global->__pyx_tuple__91
#define __pyx_tuple__93 __pyx_mstate_global->__pyx_tuple__93
#define __pyx_tuple__95 __pyx_mstate_global->__pyx_tuple__95
#define __pyx_tuple__97 __pyx_mstate_global->__pyx_tuple__97
#define __pyx_tuple__105 __pyx_mstate_global->__pyx_tuple__105
#define __pyx_tuple__112 __pyx_mstate_global->__pyx_tuple__112
#define __pyx_tuple__118 __pyx_mstate_global->__pyx_tuple__118
#define __pyx_tuple__120 __pyx_mstate_global->__pyx_tuple__120
#define __pyx_tuple__122 __pyx_mstate_global->__pyx_tuple__122
#define __pyx_tuple__124 __pyx_mstate_global->__pyx_tuple__124
#define __pyx_tuple__128 __pyx_mstate_global->__pyx_tuple__128
#define __pyx_tuple__130 __pyx_mstate_global->__pyx_tuple__130
#define __pyx_tuple__131 __pyx_mstate_global->__pyx_tuple__131
#define __pyx_tuple__134 __pyx_mstate_global->__pyx_tuple__134
#define __pyx_tuple__147 __pyx_mstate_global->__pyx_tuple__147
#define __pyx_tuple__150 __pyx_mstate_global->__pyx_tuple__150
#define __pyx_tuple__154 __pyx_mstate_global->__pyx_tuple__154
#define __pyx_tuple__159 __pyx_mstate_global->__pyx_tuple__159
#define __pyx_tuple__163 __pyx_mstate_global->__pyx_tuple__163
#define __pyx_tuple__165 __pyx_mstate_global->__pyx_tuple__165
#define __pyx_tuple__168 __pyx_mstate_global->__pyx_tuple__168
#define __pyx_tuple__171 __pyx_mstate_global->__pyx_tuple__171
#define __pyx_tuple__175 __pyx_mstate_global->__pyx_tuple__175
#define __pyx_tuple__177 __pyx_mstate_global->__pyx_tuple__177
#define __pyx_tuple__179 __pyx_mstate_global->__pyx_tuple__179
#define __pyx_tuple__181 __pyx_mstate_global->__pyx_tuple__181
#define __pyx_tuple__182 __pyx_mstate_global->__pyx_tuple__182
#define __pyx_tuple__184 __pyx_mstate_global->__pyx_tuple__184
#define __pyx_tuple__185 __pyx_mstate_global->__pyx_tuple__185
#define __pyx_tuple__187 __pyx_mstate_global->__pyx_tuple__187
#define __pyx_tuple__189 __pyx_mstate_global->__pyx_tuple__189
#define __pyx_tuple__191 __pyx_mstate_global->__pyx_tuple__191
#define __pyx_codeobj__13 __pyx_mstate_global->__pyx_codeobj__13
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__18 __pyx_mstate_global->__pyx_codeobj__18
#define __pyx_codeobj__20 __pyx_mstate_global->__pyx_codeobj__20
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__27 __pyx_mstate_global->__pyx_codeobj__27
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__29 __pyx_mstate_global->__pyx_codeobj__29
#define __pyx_codeobj__31 __pyx_mstate_global->__pyx_codeobj__31
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__33 __pyx_mstate_global->__pyx_codeobj__33
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__35 __pyx_mstate_global->__pyx_codeobj__35
#define __pyx_codeobj__36 __pyx_mstate_global->__pyx_codeobj__36
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__42 __pyx_mstate_global->__pyx_codeobj__42
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__44 __pyx_mstate_global->__pyx_codeobj__44
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__46 __pyx_mstate_global->__pyx_codeobj__46
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__48 __pyx_mstate_global->__pyx_codeobj__48
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__50 __pyx_mstate_global->__pyx_codeobj__50
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__52 __pyx_mstate_global->__pyx_codeobj__52
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__54 __pyx_mstate_global->__pyx_codeobj__54
#define __pyx_codeobj__56 __pyx_mstate_global->__pyx_codeobj__56
#define __pyx_codeobj__58 __pyx_mstate_global->__pyx_codeobj__58
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__60 __pyx_mstate_global->__pyx_codeobj__60
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__66 __pyx_mstate_global->__pyx_codeobj__66
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__76 __pyx_mstate_global->__pyx_codeobj__76
#define __pyx_codeobj__78 __pyx_mstate_global->__pyx_codeobj__78
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__92 __pyx_mstate_global->__pyx_codeobj__92
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__100 __pyx_mstate_global->__pyx_codeobj__100
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__106 __pyx_mstate_global->__pyx_codeobj__106
#define __pyx_codeobj__107 __pyx_mstate_global->__pyx_codeobj__107
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
#define __pyx_codeobj__109 __pyx_mstate_global->__pyx_codeobj__109
#define __pyx_codeobj__110 __pyx_mstate_global->__pyx_codeobj__110
#define __pyx_codeobj__111 __pyx_mstate_global->__pyx_codeobj__111
#define __pyx_codeobj__113 __pyx_mstate_global->__pyx_codeobj__113
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__115 __pyx_mstate_global->__pyx_codeobj__115
#define __pyx_codeobj__116 __pyx_mstate_global->__pyx_codeobj__116
#define __pyx_codeobj__117 __pyx_mstate_global->__pyx_codeobj__117
#define __pyx_codeobj__119 __pyx_mstate_global->__pyx_codeobj__119
#define __pyx_codeobj__121 __pyx_mstate_global->__pyx_codeobj__121
#define __pyx_codeobj__123 __pyx_mstate_global->__pyx_codeobj__123
#define __pyx_codeobj__125 __pyx_mstate_global->__pyx_codeobj__125
#define __pyx_codeobj__126 __pyx_mstate_global->__pyx_codeobj__126
#define __pyx_codeobj__127 __pyx_mstate_global->__pyx_codeobj__127
#define __pyx_codeobj__129 __pyx_mstate_global->__pyx_codeobj__129
#define __pyx_codeobj__132 __pyx_mstate_global->__pyx_codeobj__132
#define __pyx_codeobj__133 __pyx_mstate_global->__pyx_codeobj__133
#define __pyx_codeobj__135 __pyx_mstate_global->__pyx_codeobj__135
#define __pyx_codeobj__136 __pyx_mstate_global->__pyx_codeobj__136
#define __pyx_codeobj__137 __pyx_mstate_global->__pyx_codeobj__137
#define __pyx_codeobj__138 __pyx_mstate_global->__pyx_codeobj__138
#define __pyx_codeobj__139 __pyx_mstate_global->__pyx_codeobj__139
#define __pyx_codeobj__140 __pyx_mstate_global->__pyx_codeobj__140
#define __pyx_codeobj__141 __pyx_mstate_global->__pyx_codeobj__141
#define __pyx_codeobj__142 __pyx_mstate_global->__pyx_codeobj__142
#define __pyx_codeobj__143 __pyx_mstate_global->__pyx_codeobj__143
#define __pyx_codeobj__144 __pyx_mstate_global->__pyx_codeobj__144
#define __pyx_codeobj__145 __pyx_mstate_global->__pyx_codeobj__145
#define __pyx_codeobj__146 __pyx_mstate_global->__pyx_codeobj__146
#define __pyx_codeobj__148 __pyx_mstate_global->__pyx_codeobj__148
#define __pyx_codeobj__149 __pyx_mstate_global->__pyx_codeobj__149
#define __pyx_codeobj__151 __pyx_mstate_global->__pyx_codeobj__151
#define __pyx_codeobj__152 __pyx_mstate_global->__pyx_codeobj__152
#define __pyx_codeobj__153 __pyx_mstate_global->__pyx_codeobj__153
#define __pyx_codeobj__155 __pyx_mstate_global->__pyx_codeobj__155
#define __pyx_codeobj__156 __pyx_mstate_global->__pyx_codeobj__156
#define __pyx_codeobj__157 __pyx_mstate_global->__pyx_codeobj__157
#define __pyx_codeobj__158 __pyx_mstate_global->__pyx_codeobj__158
#define __pyx_codeobj__160 __pyx_mstate_global->__pyx_codeobj__160
#define __pyx_codeobj__161 __pyx_mstate_global->__pyx_codeobj__161
#define __pyx_codeobj__162 __pyx_mstate_global->__pyx_codeobj__162
#define __pyx_codeobj__164 __pyx_mstate_global->__pyx_codeobj__164
#define __pyx_codeobj__166 __pyx_mstate_global->__pyx_codeobj__166
#define __pyx_codeobj__167 __pyx_mstate_global->__pyx_codeobj__167
#define __pyx_codeobj__169 __pyx_mstate_global->__pyx_codeobj__169
#define __pyx_codeobj__170 __pyx_mstate_global->__pyx_codeobj__170
#define __pyx_codeobj__172 __pyx_mstate_global->__pyx_codeobj__172
#define __pyx_codeobj__173 __pyx_mstate_global->__pyx_codeobj__173
#define __pyx_codeobj__174 __pyx_mstate_global->__pyx_codeobj__174
#define __pyx_codeobj__176 __pyx_mstate_global->__pyx_codeobj__176
#define __pyx_codeobj__178 __pyx_mstate_global->__pyx_codeobj__178
#define __pyx_codeobj__180 __pyx_mstate_global->__pyx_codeobj__180
#define __pyx_codeobj__183 __pyx_mstate_global->__pyx_codeobj__183
#define __pyx_codeobj__186 __pyx_mstate_global->__pyx_codeobj__186
#define __pyx_codeobj__188 __pyx_mstate_global->__pyx_codeobj__188
#define __pyx_codeobj__190 __pyx_mstate_global->__pyx_codeobj__190
#define __pyx_codeobj__192 __pyx_mstate_global->__pyx_codeobj__192
#define __pyx_codeobj__193 __pyx_mstate_global->__pyx_codeobj__193
/* #### Code section: module_code ### */

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  char const *__pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(0, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 16, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":243
 * 
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ELSIZE(self)
 * 
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":244
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:
 *             return PyDataType_ELSIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDataType_ELSIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":243
 * 
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ELSIZE(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":247
 * 
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ALIGNMENT(self)
 * 
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":248
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:
 *             return PyDataType_ALIGNMENT(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use fields/names with care as they may be NULL.  You must check
 */
  __pyx_r = PyDataType_ALIGNMENT(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":247
 * 
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ALIGNMENT(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":253
 *         # for this using PyDataType_HASFIELDS.
 *         @property
 *         cdef inline object fields(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDataType_FIELDS(self)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("fields", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":254
 *         @property
 *         cdef inline object fields(self):
 *             return <object>PyDataType_FIELDS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDataType_FIELDS(__pyx_v_self);
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":253
 *         # for this using PyDataType_HASFIELDS.
 *         @property
 *         cdef inline object fields(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDataType_FIELDS(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":257
 * 
 *         @property
 *         cdef inline tuple names(self):             # <<<<<<<<<<<<<<
 *             return <tuple>PyDataType_NAMES(self)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("names", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":258
 *         @property
 *         cdef inline tuple names(self):
 *             return <tuple>PyDataType_NAMES(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use PyDataType_HASSUBARRAY to test whether this field is
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDataType_NAMES(__pyx_v_self);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":257
 * 
 *         @property
 *         cdef inline tuple names(self):             # <<<<<<<<<<<<<<
 *             return <tuple>PyDataType_NAMES(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":264
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_SUBARRAY(self)
 * 
 */

static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self) {
  PyArray_ArrayDescr *__pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":265
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:
 *             return PyDataType_SUBARRAY(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDataType_SUBARRAY(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":264
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_SUBARRAY(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":268
 * 
 *         @property
 *         cdef inline npy_uint64 flags(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)
 */

static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self) {
  npy_uint64 __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":270
 *         cdef inline npy_uint64 flags(self) noexcept nogil:
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyDataType_FLAGS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":268
 * 
 *         @property
 *         cdef inline npy_uint64 flags(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":280
 * 
 *         @property
 *         cdef inline int numiter(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)
 */

static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":282
 *         cdef inline int numiter(self) noexcept nogil:
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_NUMITER(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":280
 * 
 *         @property
 *         cdef inline int numiter(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":287
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":290
 * 
 *         @property
 *         cdef inline npy_intp index(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":292
 *         cdef inline npy_intp index(self) noexcept nogil:
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_INDEX(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":290
 * 
 *         @property
 *         cdef inline npy_intp index(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":295
 * 
 *         @property
 *         cdef inline int nd(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)
 */

static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":297
 *         cdef inline int nd(self) noexcept nogil:
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":295
 * 
 *         @property
 *         cdef inline int nd(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":300
 * 
 *         @property
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":302
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":300
 * 
 *         @property
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":305
 * 
 *         @property
 *         cdef inline void** iters(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 */

static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self) {
  void **__pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":308
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 *             return PyArray_MultiIter_ITERS(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyArray_MultiIter_ITERS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":305
 * 
 *         @property
 *         cdef inline void** iters(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":323
 * 
 *         @property
 *         cdef inline PyObject* base(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":326
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":323
 * 
 *         @property
 *         cdef inline PyObject* base(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":329
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":332
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":329
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":335
 * 
 *         @property
 *         cdef inline int ndim(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":338
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":335
 * 
 *         @property
 *         cdef inline int ndim(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":341
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":346
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":341
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":349
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":353
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":349
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":356
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":359
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":356
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":362
 * 
 *         @property
 *         cdef inline char* data(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":368
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":362
 * 
 *         @property
 *         cdef inline char* data(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":776
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":776
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":786
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":789
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":791
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":792
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":793
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5numpy_5dtype_8subarray_subarray(__pyx_v_d)->shape;
    __Pyx_INCREF(((PyObject*)__pyx_t_2));
    __pyx_r = ((PyObject*)__pyx_t_2);
    goto __pyx_L0;

    /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":792
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":795
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":791
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":994
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":995
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":996
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 996, __pyx_L1_error)

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":994
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":998
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":999
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1000
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1001
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1000
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1002
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":998
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1006
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1007
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1008
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1008, __pyx_L3_error)

      /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1007
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1009
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1009, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1010
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1010, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1010, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1007
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1006
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1012
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1013
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1014
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1014, __pyx_L3_error)

      /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1013
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1015
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1015, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1016
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1016, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1016, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1013
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1012
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1018
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 1);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1020
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1020, __pyx_L3_error)

      /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1021
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1021, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1022
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1022, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1022, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1018
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1025
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1037
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1025
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1040
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1052
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1040
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1055
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1062
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1055
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1065
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1069
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1065
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1072
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1076
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1072
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":18
 *     Null pointer exception
 *     """
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_20NullPointerException_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_20NullPointerException_1__init__ = {"__init__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_20NullPointerException_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_20NullPointerException_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_self)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 18, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(1, 18, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 18, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.NullPointerException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_20NullPointerException___init__(__pyx_self, __pyx_v_self);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_20NullPointerException___init__(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 1);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":27
 *     """
 *     cdef defs.OcTreeKey thisptr
 *     def __cinit__(self, unsigned short int a=0, unsigned short int b=0, unsigned short int c=0):             # <<<<<<<<<<<<<<
 *         self.thisptr.k[0] = a
 *         self.thisptr.k[1] = b
 */

/* Python wrapper */
static int __pyx_pw_9pyoctomap_7octomap_9OcTreeKey_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9pyoctomap_7octomap_9OcTreeKey_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned short __pyx_v_a;
  unsigned short __pyx_v_b;
  unsigned short __pyx_v_c;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_c,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_a);
          if (value) { values[0] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 27, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_b);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 27, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_c);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 27, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(1, 27, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_a = __Pyx_PyInt_As_unsigned_short(values[0]); if (unlikely((__pyx_v_a == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 27, __pyx_L3_error)
    } else {
      __pyx_v_a = ((unsigned short)0);
    }
    if (values[1]) {
      __pyx_v_b = __Pyx_PyInt_As_unsigned_short(values[1]); if (unlikely((__pyx_v_b == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 27, __pyx_L3_error)
    } else {
      __pyx_v_b = ((unsigned short)0);
    }
    if (values[2]) {
      __pyx_v_c = __Pyx_PyInt_As_unsigned_short(values[2]); if (unlikely((__pyx_v_c == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 27, __pyx_L3_error)
    } else {
      __pyx_v_c = ((unsigned short)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, __pyx_nargs); __PYX_ERR(1, 27, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_9OcTreeKey___cinit__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_v_self), __pyx_v_a, __pyx_v_b, __pyx_v_c);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pyoctomap_7octomap_9OcTreeKey___cinit__(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, unsigned short __pyx_v_a, unsigned short __pyx_v_b, unsigned short __pyx_v_c) {
  int __pyx_r;

  /* "pyoctomap/octomap.pyx":28
 *     cdef defs.OcTreeKey thisptr
 *     def __cinit__(self, unsigned short int a=0, unsigned short int b=0, unsigned short int c=0):
 *         self.thisptr.k[0] = a             # <<<<<<<<<<<<<<
 *         self.thisptr.k[1] = b
 *         self.thisptr.k[2] = c
 */
  (__pyx_v_self->thisptr.k[0]) = __pyx_v_a;

  /* "pyoctomap/octomap.pyx":29
 *     def __cinit__(self, unsigned short int a=0, unsigned short int b=0, unsigned short int c=0):
 *         self.thisptr.k[0] = a
 *         self.thisptr.k[1] = b             # <<<<<<<<<<<<<<
 *         self.thisptr.k[2] = c
 *     def __richcmp__(self, other, int op):
 */
  (__pyx_v_self->thisptr.k[1]) = __pyx_v_b;

  /* "pyoctomap/octomap.pyx":30
 *         self.thisptr.k[0] = a
 *         self.thisptr.k[1] = b
 *         self.thisptr.k[2] = c             # <<<<<<<<<<<<<<
 *     def __richcmp__(self, other, int op):
 *         if op == 2:
 */
  (__pyx_v_self->thisptr.k[2]) = __pyx_v_c;

  /* "pyoctomap/octomap.pyx":27
 *     """
 *     cdef defs.OcTreeKey thisptr
 *     def __cinit__(self, unsigned short int a=0, unsigned short int b=0, unsigned short int c=0):             # <<<<<<<<<<<<<<
 *         self.thisptr.k[0] = a
 *         self.thisptr.k[1] = b
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":31
 *         self.thisptr.k[1] = b
 *         self.thisptr.k[2] = c
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *             return (self.thisptr.k[0] == other[0] and \
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_9OcTreeKey_2__richcmp__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_2__richcmp__(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 1);

  /* "pyoctomap/octomap.pyx":32
 *         self.thisptr.k[2] = c
 *     def __richcmp__(self, other, int op):
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             return (self.thisptr.k[0] == other[0] and \
 *                     self.thisptr.k[1] == other[1] and \
 */
  switch (__pyx_v_op) {
    case 2:

    /* "pyoctomap/octomap.pyx":33
 *     def __richcmp__(self, other, int op):
 *         if op == 2:
 *             return (self.thisptr.k[0] == other[0] and \             # <<<<<<<<<<<<<<
 *                     self.thisptr.k[1] == other[1] and \
 *                     self.thisptr.k[2] == other[2])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_self->thisptr.k[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_other, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 33, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 33, __pyx_L1_error)
    if (__pyx_t_5) {
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_1 = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L3_bool_binop_done;
    }

    /* "pyoctomap/octomap.pyx":34
 *         if op == 2:
 *             return (self.thisptr.k[0] == other[0] and \
 *                     self.thisptr.k[1] == other[1] and \             # <<<<<<<<<<<<<<
 *                     self.thisptr.k[2] == other[2])
 *         elif op == 3:
 */
    __pyx_t_4 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_self->thisptr.k[1])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_other, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 34, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 34, __pyx_L1_error)
    if (__pyx_t_5) {
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_1 = __pyx_t_2;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L3_bool_binop_done;
    }

    /* "pyoctomap/octomap.pyx":35
 *             return (self.thisptr.k[0] == other[0] and \
 *                     self.thisptr.k[1] == other[1] and \
 *                     self.thisptr.k[2] == other[2])             # <<<<<<<<<<<<<<
 *         elif op == 3:
 *             return not (self.thisptr.k[0] == other[0] and \
 */
    __pyx_t_2 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_self->thisptr.k[2])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_other, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 35, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_L3_bool_binop_done:;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":32
 *         self.thisptr.k[2] = c
 *     def __richcmp__(self, other, int op):
 *         if op == 2:             # <<<<<<<<<<<<<<
 *             return (self.thisptr.k[0] == other[0] and \
 *                     self.thisptr.k[1] == other[1] and \
 */
    break;
    case 3:

    /* "pyoctomap/octomap.pyx":37
 *                     self.thisptr.k[2] == other[2])
 *         elif op == 3:
 *             return not (self.thisptr.k[0] == other[0] and \             # <<<<<<<<<<<<<<
 *                         self.thisptr.k[1] == other[1] and \
 *                         self.thisptr.k[2] == other[2])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_self->thisptr.k[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_other, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L6_bool_binop_done;
    }

    /* "pyoctomap/octomap.pyx":38
 *         elif op == 3:
 *             return not (self.thisptr.k[0] == other[0] and \
 *                         self.thisptr.k[1] == other[1] and \             # <<<<<<<<<<<<<<
 *                         self.thisptr.k[2] == other[2])
 * 
 */
    __pyx_t_3 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_self->thisptr.k[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_other, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L6_bool_binop_done;
    }

    /* "pyoctomap/octomap.pyx":39
 *             return not (self.thisptr.k[0] == other[0] and \
 *                         self.thisptr.k[1] == other[1] and \
 *                         self.thisptr.k[2] == other[2])             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, unsigned int i):
 */
    __pyx_t_1 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_self->thisptr.k[2])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_other, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __pyx_t_6;
    __pyx_L6_bool_binop_done:;

    /* "pyoctomap/octomap.pyx":37
 *                     self.thisptr.k[2] == other[2])
 *         elif op == 3:
 *             return not (self.thisptr.k[0] == other[0] and \             # <<<<<<<<<<<<<<
 *                         self.thisptr.k[1] == other[1] and \
 *                         self.thisptr.k[2] == other[2])
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong((!__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":36
 *                     self.thisptr.k[1] == other[1] and \
 *                     self.thisptr.k[2] == other[2])
 *         elif op == 3:             # <<<<<<<<<<<<<<
 *             return not (self.thisptr.k[0] == other[0] and \
 *                         self.thisptr.k[1] == other[1] and \
 */
    break;
    default: break;
  }

  /* "pyoctomap/octomap.pyx":31
 *         self.thisptr.k[1] = b
 *         self.thisptr.k[2] = c
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         if op == 2:
 *             return (self.thisptr.k[0] == other[0] and \
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":41
 *                         self.thisptr.k[2] == other[2])
 * 
 *     def __getitem__(self, unsigned int i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.k[i]
 *     def __setitem__(self, unsigned int i, unsigned int value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  unsigned int __pyx_v_i;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_unsigned_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 41, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_9OcTreeKey_4__getitem__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_v_self), ((unsigned int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_4__getitem__(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, unsigned int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "pyoctomap/octomap.pyx":42
 * 
 *     def __getitem__(self, unsigned int i):
 *         return self.thisptr.k[i]             # <<<<<<<<<<<<<<
 *     def __setitem__(self, unsigned int i, unsigned int value):
 *         self.thisptr.k[i] = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_self->thisptr.k[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":41
 *                         self.thisptr.k[2] == other[2])
 * 
 *     def __getitem__(self, unsigned int i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.k[i]
 *     def __setitem__(self, unsigned int i, unsigned int value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":43
 *     def __getitem__(self, unsigned int i):
 *         return self.thisptr.k[i]
 *     def __setitem__(self, unsigned int i, unsigned int value):             # <<<<<<<<<<<<<<
 *         self.thisptr.k[i] = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_9pyoctomap_7octomap_9OcTreeKey_7__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_9pyoctomap_7octomap_9OcTreeKey_7__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i, PyObject *__pyx_arg_value) {
  unsigned int __pyx_v_i;
  unsigned int __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_unsigned_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 43, __pyx_L3_error)
  }
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_unsigned_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 43, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_9OcTreeKey_6__setitem__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_v_self), ((unsigned int)__pyx_v_i), ((unsigned int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pyoctomap_7octomap_9OcTreeKey_6__setitem__(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, unsigned int __pyx_v_i, unsigned int __pyx_v_value) {
  int __pyx_r;

  /* "pyoctomap/octomap.pyx":44
 *         return self.thisptr.k[i]
 *     def __setitem__(self, unsigned int i, unsigned int value):
 *         self.thisptr.k[i] = value             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  (__pyx_v_self->thisptr.k[__pyx_v_i]) = __pyx_v_value;

  /* "pyoctomap/octomap.pyx":43
 *     def __getitem__(self, unsigned int i):
 *         return self.thisptr.k[i]
 *     def __setitem__(self, unsigned int i, unsigned int value):             # <<<<<<<<<<<<<<
 *         self.thisptr.k[i] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":46
 *         self.thisptr.k[i] = value
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"OcTreeKey({self.thisptr.k[0]}, {self.thisptr.k[1]}, {self.thisptr.k[2]})"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_9__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_9__repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_9OcTreeKey_8__repr__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_8__repr__(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "pyoctomap/octomap.pyx":47
 * 
 *     def __repr__(self):
 *         return f"OcTreeKey({self.thisptr.k[0]}, {self.thisptr.k[1]}, {self.thisptr.k[2]})"             # <<<<<<<<<<<<<<
 * 
 *     def computeChildIdx(self, OcTreeKey key, int depth):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_OcTreeKey);
  __pyx_t_2 += 10;
  __Pyx_GIVEREF(__pyx_kp_u_OcTreeKey);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_OcTreeKey);
  __pyx_t_4 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_self->thisptr.k[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__3);
  __pyx_t_5 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_self->thisptr.k[1])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__3);
  __pyx_t_2 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__3);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__3);
  __pyx_t_4 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_self->thisptr.k[2])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_3) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_3;
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_5);
  __pyx_t_5 = 0;
  __Pyx_INCREF(__pyx_kp_u__4);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__4);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__4);
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":46
 *         self.thisptr.k[i] = value
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return f"OcTreeKey({self.thisptr.k[0]}, {self.thisptr.k[1]}, {self.thisptr.k[2]})"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":49
 *         return f"OcTreeKey({self.thisptr.k[0]}, {self.thisptr.k[1]}, {self.thisptr.k[2]})"
 * 
 *     def computeChildIdx(self, OcTreeKey key, int depth):             # <<<<<<<<<<<<<<
 *         cdef unsigned int result
 *         cdef defs.OcTreeKey key_in
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_11computeChildIdx(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_9OcTreeKey_11computeChildIdx = {"computeChildIdx", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_11computeChildIdx, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_11computeChildIdx(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key = 0;
  int __pyx_v_depth;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeChildIdx (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_depth,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 49, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_depth)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 49, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("computeChildIdx", 1, 2, 2, 1); __PYX_ERR(1, 49, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "computeChildIdx") < 0)) __PYX_ERR(1, 49, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)values[0]);
    __pyx_v_depth = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_depth == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 49, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeChildIdx", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 49, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.computeChildIdx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9pyoctomap_7octomap_OcTreeKey, 1, "key", 0))) __PYX_ERR(1, 49, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_9OcTreeKey_10computeChildIdx(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_v_self), __pyx_v_key, __pyx_v_depth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_10computeChildIdx(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key, int __pyx_v_depth) {
  unsigned int __pyx_v_result;
  struct octomap::OcTreeKey __pyx_v_key_in;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  octomap::key_type __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("computeChildIdx", 1);

  /* "pyoctomap/octomap.pyx":52
 *         cdef unsigned int result
 *         cdef defs.OcTreeKey key_in
 *         key_in.k[0] = key[0]             # <<<<<<<<<<<<<<
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_2 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_key_in.k[0]) = __pyx_t_2;

  /* "pyoctomap/octomap.pyx":53
 *         cdef defs.OcTreeKey key_in
 *         key_in.k[0] = key[0]
 *         key_in.k[1] = key[1]             # <<<<<<<<<<<<<<
 *         key_in.k[2] = key[2]
 *         result = defs.computeChildIdx(key_in, depth)
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_2 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_key_in.k[1]) = __pyx_t_2;

  /* "pyoctomap/octomap.pyx":54
 *         key_in.k[0] = key[0]
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]             # <<<<<<<<<<<<<<
 *         result = defs.computeChildIdx(key_in, depth)
 *         return result
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_2 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_key_in.k[2]) = __pyx_t_2;

  /* "pyoctomap/octomap.pyx":55
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]
 *         result = defs.computeChildIdx(key_in, depth)             # <<<<<<<<<<<<<<
 *         return result
 *     def computeIndexKey(self, unsigned int level, OcTreeKey key):
 */
  __pyx_v_result = octomap::computeChildIdx(__pyx_v_key_in, __pyx_v_depth);

  /* "pyoctomap/octomap.pyx":56
 *         key_in.k[2] = key[2]
 *         result = defs.computeChildIdx(key_in, depth)
 *         return result             # <<<<<<<<<<<<<<
 *     def computeIndexKey(self, unsigned int level, OcTreeKey key):
 *         cdef defs.OcTreeKey key_in
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":49
 *         return f"OcTreeKey({self.thisptr.k[0]}, {self.thisptr.k[1]}, {self.thisptr.k[2]})"
 * 
 *     def computeChildIdx(self, OcTreeKey key, int depth):             # <<<<<<<<<<<<<<
 *         cdef unsigned int result
 *         cdef defs.OcTreeKey key_in
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.computeChildIdx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":57
 *         result = defs.computeChildIdx(key_in, depth)
 *         return result
 *     def computeIndexKey(self, unsigned int level, OcTreeKey key):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.OcTreeKey result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_13computeIndexKey(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_9OcTreeKey_13computeIndexKey = {"computeIndexKey", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_13computeIndexKey, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_13computeIndexKey(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  unsigned int __pyx_v_level;
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("computeIndexKey (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_level,&__pyx_n_s_key,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_level)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 57, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 57, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("computeIndexKey", 1, 2, 2, 1); __PYX_ERR(1, 57, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "computeIndexKey") < 0)) __PYX_ERR(1, 57, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_level = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_level == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 57, __pyx_L3_error)
    __pyx_v_key = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("computeIndexKey", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 57, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.computeIndexKey", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9pyoctomap_7octomap_OcTreeKey, 1, "key", 0))) __PYX_ERR(1, 57, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_9OcTreeKey_12computeIndexKey(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_v_self), __pyx_v_level, __pyx_v_key);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_12computeIndexKey(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, unsigned int __pyx_v_level, struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key) {
  struct octomap::OcTreeKey __pyx_v_key_in;
  struct octomap::OcTreeKey __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  octomap::key_type __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("computeIndexKey", 1);

  /* "pyoctomap/octomap.pyx":60
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.OcTreeKey result
 *         key_in.k[0] = key[0]             # <<<<<<<<<<<<<<
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_2 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_key_in.k[0]) = __pyx_t_2;

  /* "pyoctomap/octomap.pyx":61
 *         cdef defs.OcTreeKey result
 *         key_in.k[0] = key[0]
 *         key_in.k[1] = key[1]             # <<<<<<<<<<<<<<
 *         key_in.k[2] = key[2]
 *         result = defs.computeIndexKey(level, key_in)
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_2 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_key_in.k[1]) = __pyx_t_2;

  /* "pyoctomap/octomap.pyx":62
 *         key_in.k[0] = key[0]
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]             # <<<<<<<<<<<<<<
 *         result = defs.computeIndexKey(level, key_in)
 *         # Convert back to Python OcTreeKey
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_2 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_key_in.k[2]) = __pyx_t_2;

  /* "pyoctomap/octomap.pyx":63
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]
 *         result = defs.computeIndexKey(level, key_in)             # <<<<<<<<<<<<<<
 *         # Convert back to Python OcTreeKey
 *         return OcTreeKey(result.k[0], result.k[1], result.k[2])
 */
  __pyx_v_result = octomap::computeIndexKey(__pyx_v_level, __pyx_v_key_in);

  /* "pyoctomap/octomap.pyx":65
 *         result = defs.computeIndexKey(level, key_in)
 *         # Convert back to Python OcTreeKey
 *         return OcTreeKey(result.k[0], result.k[1], result.k[2])             # <<<<<<<<<<<<<<
 * 
 * cdef class OcTreeNode:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_result.k[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_result.k[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_octomap_3a__3a_key_type((__pyx_v_result.k[2])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1)) __PYX_ERR(1, 65, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3)) __PYX_ERR(1, 65, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4)) __PYX_ERR(1, 65, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeKey), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":57
 *         result = defs.computeChildIdx(key_in, depth)
 *         return result
 *     def computeIndexKey(self, unsigned int level, OcTreeKey key):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.OcTreeKey result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.computeIndexKey", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_15__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_9OcTreeKey_15__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_15__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_15__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_9OcTreeKey_14__reduce_cython__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_17__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_9OcTreeKey_17__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_17__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_17__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_9OcTreeKey_16__setstate_cython__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_9OcTreeKey_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeKey.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":73
 *     """
 *     cdef defs.OcTreeNode *thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         pass
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_9pyoctomap_7octomap_10OcTreeNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9pyoctomap_7octomap_10OcTreeNode_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode___cinit__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pyoctomap_7octomap_10OcTreeNode___cinit__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self) {
  int __pyx_r;

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":75
 *     def __cinit__(self):
 *         pass
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 *     def addValue(self, float p):
 */

/* Python wrapper */
static void __pyx_pw_9pyoctomap_7octomap_10OcTreeNode_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9pyoctomap_7octomap_10OcTreeNode_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_2__dealloc__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self) {

  /* function exit code */
}

/* "pyoctomap/octomap.pyx":77
 *     def __dealloc__(self):
 *         pass
 *     def addValue(self, float p):             # <<<<<<<<<<<<<<
 *         """
 *         adds p to the node's logOdds value (with no boundary / threshold checking!)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_5addValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_10OcTreeNode_4addValue, "\n        adds p to the node's logOdds value (with no boundary / threshold checking!)\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_5addValue = {"addValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_5addValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_10OcTreeNode_4addValue};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_5addValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  float __pyx_v_p;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addValue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 77, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "addValue") < 0)) __PYX_ERR(1, 77, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_p = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_p == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 77, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addValue", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 77, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.addValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_4addValue(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self), __pyx_v_p);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_4addValue(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self, float __pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addValue", 1);

  /* "pyoctomap/octomap.pyx":81
 *         adds p to the node's logOdds value (with no boundary / threshold checking!)
 *         """
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             self.thisptr.addValue(p)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":82
 *         """
 *         if self.thisptr:
 *             self.thisptr.addValue(p)             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __pyx_v_self->thisptr->addValue(__pyx_v_p);

    /* "pyoctomap/octomap.pyx":81
 *         adds p to the node's logOdds value (with no boundary / threshold checking!)
 *         """
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             self.thisptr.addValue(p)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":84
 *             self.thisptr.addValue(p)
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 *     def childExists(self, unsigned int i):
 *         """
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 84, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":77
 *     def __dealloc__(self):
 *         pass
 *     def addValue(self, float p):             # <<<<<<<<<<<<<<
 *         """
 *         adds p to the node's logOdds value (with no boundary / threshold checking!)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.addValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":85
 *         else:
 *             raise NullPointerException
 *     def childExists(self, unsigned int i):             # <<<<<<<<<<<<<<
 *         """
 *         Safe test to check of the i-th child exists,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_7childExists(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_10OcTreeNode_6childExists, "\n        Safe test to check of the i-th child exists,\n        first tests if there are any children.\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_7childExists = {"childExists", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_7childExists, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_10OcTreeNode_6childExists};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_7childExists(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  unsigned int __pyx_v_i;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("childExists (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_i)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 85, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "childExists") < 0)) __PYX_ERR(1, 85, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_i = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_i == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 85, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("childExists", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 85, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.childExists", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_6childExists(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self), __pyx_v_i);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_6childExists(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self, unsigned int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("childExists", 1);

  /* "pyoctomap/octomap.pyx":90
 *         first tests if there are any children.
 *         """
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.childExists(i)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":91
 *         """
 *         if self.thisptr:
 *             return self.thisptr.childExists(i)             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->childExists(__pyx_v_i)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":90
 *         first tests if there are any children.
 *         """
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.childExists(i)
 *         else:
 */
  }

  /* "pyoctomap/octomap.pyx":93
 *             return self.thisptr.childExists(i)
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 *     def getValue(self):
 *         if self.thisptr:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 93, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":85
 *         else:
 *             raise NullPointerException
 *     def childExists(self, unsigned int i):             # <<<<<<<<<<<<<<
 *         """
 *         Safe test to check of the i-th child exists,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.childExists", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":94
 *         else:
 *             raise NullPointerException
 *     def getValue(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getValue()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_9getValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_9getValue = {"getValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_9getValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_9getValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getValue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getValue", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getValue", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_8getValue(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_8getValue(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getValue", 1);

  /* "pyoctomap/octomap.pyx":95
 *             raise NullPointerException
 *     def getValue(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.getValue()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":96
 *     def getValue(self):
 *         if self.thisptr:
 *             return self.thisptr.getValue()             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->getValue()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":95
 *             raise NullPointerException
 *     def getValue(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.getValue()
 *         else:
 */
  }

  /* "pyoctomap/octomap.pyx":98
 *             return self.thisptr.getValue()
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 *     def setValue(self, float v):
 *         if self.thisptr:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 98, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":94
 *         else:
 *             raise NullPointerException
 *     def getValue(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getValue()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.getValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":99
 *         else:
 *             raise NullPointerException
 *     def setValue(self, float v):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.setValue(v)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_11setValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_11setValue = {"setValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_11setValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_11setValue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  float __pyx_v_v;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setValue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_v,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_v)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 99, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setValue") < 0)) __PYX_ERR(1, 99, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_v = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_v == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 99, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setValue", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 99, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.setValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_10setValue(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self), __pyx_v_v);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_10setValue(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self, float __pyx_v_v) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setValue", 1);

  /* "pyoctomap/octomap.pyx":100
 *             raise NullPointerException
 *     def setValue(self, float v):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             self.thisptr.setValue(v)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":101
 *     def setValue(self, float v):
 *         if self.thisptr:
 *             self.thisptr.setValue(v)             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __pyx_v_self->thisptr->setValue(__pyx_v_v);

    /* "pyoctomap/octomap.pyx":100
 *             raise NullPointerException
 *     def setValue(self, float v):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             self.thisptr.setValue(v)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":103
 *             self.thisptr.setValue(v)
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 *     def getOccupancy(self):
 *         if self.thisptr:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 103, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":99
 *         else:
 *             raise NullPointerException
 *     def setValue(self, float v):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.setValue(v)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.setValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":104
 *         else:
 *             raise NullPointerException
 *     def getOccupancy(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getOccupancy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_13getOccupancy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_13getOccupancy = {"getOccupancy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_13getOccupancy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_13getOccupancy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOccupancy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getOccupancy", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getOccupancy", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_12getOccupancy(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_12getOccupancy(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOccupancy", 1);

  /* "pyoctomap/octomap.pyx":105
 *             raise NullPointerException
 *     def getOccupancy(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.getOccupancy()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":106
 *     def getOccupancy(self):
 *         if self.thisptr:
 *             return self.thisptr.getOccupancy()             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->getOccupancy()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":105
 *             raise NullPointerException
 *     def getOccupancy(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.getOccupancy()
 *         else:
 */
  }

  /* "pyoctomap/octomap.pyx":108
 *             return self.thisptr.getOccupancy()
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 *     def getLogOdds(self):
 *         if self.thisptr:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 108, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":104
 *         else:
 *             raise NullPointerException
 *     def getOccupancy(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getOccupancy()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.getOccupancy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":109
 *         else:
 *             raise NullPointerException
 *     def getLogOdds(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getLogOdds()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_15getLogOdds(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_15getLogOdds = {"getLogOdds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_15getLogOdds, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_15getLogOdds(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLogOdds (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getLogOdds", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getLogOdds", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_14getLogOdds(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_14getLogOdds(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLogOdds", 1);

  /* "pyoctomap/octomap.pyx":110
 *             raise NullPointerException
 *     def getLogOdds(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.getLogOdds()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":111
 *     def getLogOdds(self):
 *         if self.thisptr:
 *             return self.thisptr.getLogOdds()             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->getLogOdds()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":110
 *             raise NullPointerException
 *     def getLogOdds(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.getLogOdds()
 *         else:
 */
  }

  /* "pyoctomap/octomap.pyx":113
 *             return self.thisptr.getLogOdds()
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 *     def setLogOdds(self, float l):
 *         if self.thisptr:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 113, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":109
 *         else:
 *             raise NullPointerException
 *     def getLogOdds(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getLogOdds()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.getLogOdds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":114
 *         else:
 *             raise NullPointerException
 *     def setLogOdds(self, float l):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.setLogOdds(l)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_17setLogOdds(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_17setLogOdds = {"setLogOdds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_17setLogOdds, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_17setLogOdds(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  float __pyx_v_l;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setLogOdds (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_l,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_l)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 114, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setLogOdds") < 0)) __PYX_ERR(1, 114, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_l = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_l == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 114, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setLogOdds", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 114, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.setLogOdds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_16setLogOdds(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self), __pyx_v_l);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_16setLogOdds(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self, float __pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setLogOdds", 1);

  /* "pyoctomap/octomap.pyx":115
 *             raise NullPointerException
 *     def setLogOdds(self, float l):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             self.thisptr.setLogOdds(l)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":116
 *     def setLogOdds(self, float l):
 *         if self.thisptr:
 *             self.thisptr.setLogOdds(l)             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __pyx_v_self->thisptr->setLogOdds(__pyx_v_l);

    /* "pyoctomap/octomap.pyx":115
 *             raise NullPointerException
 *     def setLogOdds(self, float l):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             self.thisptr.setLogOdds(l)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":118
 *             self.thisptr.setLogOdds(l)
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 *     def hasChildren(self):
 *         """
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 118, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":114
 *         else:
 *             raise NullPointerException
 *     def setLogOdds(self, float l):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.setLogOdds(l)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.setLogOdds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":119
 *         else:
 *             raise NullPointerException
 *     def hasChildren(self):             # <<<<<<<<<<<<<<
 *         """
 *         Deprecated: Use tree.nodeHasChildren(node) instead.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_19hasChildren(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_10OcTreeNode_18hasChildren, "\n        Deprecated: Use tree.nodeHasChildren(node) instead.\n        This method is kept for backward compatibility but will show deprecation warnings.\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_19hasChildren = {"hasChildren", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_19hasChildren, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_10OcTreeNode_18hasChildren};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_19hasChildren(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hasChildren (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("hasChildren", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "hasChildren", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_18hasChildren(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_18hasChildren(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("hasChildren", 1);

  /* "pyoctomap/octomap.pyx":124
 *         This method is kept for backward compatibility but will show deprecation warnings.
 *         """
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.hasChildren()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":125
 *         """
 *         if self.thisptr:
 *             return self.thisptr.hasChildren()             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->hasChildren()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":124
 *         This method is kept for backward compatibility but will show deprecation warnings.
 *         """
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.hasChildren()
 *         else:
 */
  }

  /* "pyoctomap/octomap.pyx":127
 *             return self.thisptr.hasChildren()
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 *     def getMaxChildLogOdds(self):
 *         if self.thisptr:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 127, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":119
 *         else:
 *             raise NullPointerException
 *     def hasChildren(self):             # <<<<<<<<<<<<<<
 *         """
 *         Deprecated: Use tree.nodeHasChildren(node) instead.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.hasChildren", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":128
 *         else:
 *             raise NullPointerException
 *     def getMaxChildLogOdds(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getMaxChildLogOdds()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_21getMaxChildLogOdds(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_21getMaxChildLogOdds = {"getMaxChildLogOdds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_21getMaxChildLogOdds, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_21getMaxChildLogOdds(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMaxChildLogOdds (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getMaxChildLogOdds", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getMaxChildLogOdds", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_20getMaxChildLogOdds(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_20getMaxChildLogOdds(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMaxChildLogOdds", 1);

  /* "pyoctomap/octomap.pyx":129
 *             raise NullPointerException
 *     def getMaxChildLogOdds(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.getMaxChildLogOdds()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":130
 *     def getMaxChildLogOdds(self):
 *         if self.thisptr:
 *             return self.thisptr.getMaxChildLogOdds()             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->thisptr->getMaxChildLogOdds()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":129
 *             raise NullPointerException
 *     def getMaxChildLogOdds(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             return self.thisptr.getMaxChildLogOdds()
 *         else:
 */
  }

  /* "pyoctomap/octomap.pyx":132
 *             return self.thisptr.getMaxChildLogOdds()
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 *     def updateOccupancyChildren(self):
 *         if self.thisptr:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 132, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 132, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":128
 *         else:
 *             raise NullPointerException
 *     def getMaxChildLogOdds(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getMaxChildLogOdds()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.getMaxChildLogOdds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":133
 *         else:
 *             raise NullPointerException
 *     def updateOccupancyChildren(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.updateOccupancyChildren()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_23updateOccupancyChildren(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_23updateOccupancyChildren = {"updateOccupancyChildren", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_23updateOccupancyChildren, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_23updateOccupancyChildren(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateOccupancyChildren (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("updateOccupancyChildren", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "updateOccupancyChildren", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_22updateOccupancyChildren(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_22updateOccupancyChildren(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateOccupancyChildren", 1);

  /* "pyoctomap/octomap.pyx":134
 *             raise NullPointerException
 *     def updateOccupancyChildren(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             self.thisptr.updateOccupancyChildren()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":135
 *     def updateOccupancyChildren(self):
 *         if self.thisptr:
 *             self.thisptr.updateOccupancyChildren()             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __pyx_v_self->thisptr->updateOccupancyChildren();

    /* "pyoctomap/octomap.pyx":134
 *             raise NullPointerException
 *     def updateOccupancyChildren(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             self.thisptr.updateOccupancyChildren()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":137
 *             self.thisptr.updateOccupancyChildren()
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 * 
 * # Simplified iterator classes that work around Cython template limitations
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 137, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":133
 *         else:
 *             raise NullPointerException
 *     def updateOccupancyChildren(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.updateOccupancyChildren()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.updateOccupancyChildren", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_25__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_25__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_25__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_25__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_24__reduce_cython__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_27__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_27__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_27__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_27__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_10OcTreeNode_26__setstate_cython__(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_10OcTreeNode_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.OcTreeNode.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":157
 *     cdef int _current_depth
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._it != NULL:
 *             del self._it
 */

/* Python wrapper */
static void __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_1__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator___dealloc__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator___dealloc__(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "pyoctomap/octomap.pyx":158
 * 
 *     def __dealloc__(self):
 *         if self._it != NULL:             # <<<<<<<<<<<<<<
 *             del self._it
 *             self._it = NULL
 */
  __pyx_t_1 = (__pyx_v_self->_it != NULL);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":159
 *     def __dealloc__(self):
 *         if self._it != NULL:
 *             del self._it             # <<<<<<<<<<<<<<
 *             self._it = NULL
 *         if self._end != NULL:
 */
    delete __pyx_v_self->_it;

    /* "pyoctomap/octomap.pyx":160
 *         if self._it != NULL:
 *             del self._it
 *             self._it = NULL             # <<<<<<<<<<<<<<
 *         if self._end != NULL:
 *             del self._end
 */
    __pyx_v_self->_it = NULL;

    /* "pyoctomap/octomap.pyx":158
 * 
 *     def __dealloc__(self):
 *         if self._it != NULL:             # <<<<<<<<<<<<<<
 *             del self._it
 *             self._it = NULL
 */
  }

  /* "pyoctomap/octomap.pyx":161
 *             del self._it
 *             self._it = NULL
 *         if self._end != NULL:             # <<<<<<<<<<<<<<
 *             del self._end
 *             self._end = NULL
 */
  __pyx_t_1 = (__pyx_v_self->_end != NULL);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":162
 *             self._it = NULL
 *         if self._end != NULL:
 *             del self._end             # <<<<<<<<<<<<<<
 *             self._end = NULL
 *         self._tree = None
 */
    delete __pyx_v_self->_end;

    /* "pyoctomap/octomap.pyx":163
 *         if self._end != NULL:
 *             del self._end
 *             self._end = NULL             # <<<<<<<<<<<<<<
 *         self._tree = None
 *         self._current_node = None
 */
    __pyx_v_self->_end = NULL;

    /* "pyoctomap/octomap.pyx":161
 *             del self._it
 *             self._it = NULL
 *         if self._end != NULL:             # <<<<<<<<<<<<<<
 *             del self._end
 *             self._end = NULL
 */
  }

  /* "pyoctomap/octomap.pyx":164
 *             del self._end
 *             self._end = NULL
 *         self._tree = None             # <<<<<<<<<<<<<<
 *         self._current_node = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_tree);
  __Pyx_DECREF(__pyx_v_self->_tree);
  __pyx_v_self->_tree = Py_None;

  /* "pyoctomap/octomap.pyx":165
 *             self._end = NULL
 *         self._tree = None
 *         self._current_node = None             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_current_node);
  __Pyx_DECREF(__pyx_v_self->_current_node);
  __pyx_v_self->_current_node = Py_None;

  /* "pyoctomap/octomap.pyx":157
 *     cdef int _current_depth
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._it != NULL:
 *             del self._it
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyoctomap/octomap.pyx":167
 *         self._current_node = None
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._tree = None
 *         self._it = NULL
 */

/* Python wrapper */
static int __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_2__cinit__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_2__cinit__(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "pyoctomap/octomap.pyx":168
 * 
 *     def __cinit__(self):
 *         self._tree = None             # <<<<<<<<<<<<<<
 *         self._it = NULL
 *         self._end = NULL
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_tree);
  __Pyx_DECREF(__pyx_v_self->_tree);
  __pyx_v_self->_tree = Py_None;

  /* "pyoctomap/octomap.pyx":169
 *     def __cinit__(self):
 *         self._tree = None
 *         self._it = NULL             # <<<<<<<<<<<<<<
 *         self._end = NULL
 *         self._is_end = True
 */
  __pyx_v_self->_it = NULL;

  /* "pyoctomap/octomap.pyx":170
 *         self._tree = None
 *         self._it = NULL
 *         self._end = NULL             # <<<<<<<<<<<<<<
 *         self._is_end = True
 *         self._current_node = None
 */
  __pyx_v_self->_end = NULL;

  /* "pyoctomap/octomap.pyx":171
 *         self._it = NULL
 *         self._end = NULL
 *         self._is_end = True             # <<<<<<<<<<<<<<
 *         self._current_node = None
 *         self._current_coord = None
 */
  __pyx_v_self->_is_end = 1;

  /* "pyoctomap/octomap.pyx":172
 *         self._end = NULL
 *         self._is_end = True
 *         self._current_node = None             # <<<<<<<<<<<<<<
 *         self._current_coord = None
 *         self._current_size = 0.0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_current_node);
  __Pyx_DECREF(__pyx_v_self->_current_node);
  __pyx_v_self->_current_node = Py_None;

  /* "pyoctomap/octomap.pyx":173
 *         self._is_end = True
 *         self._current_node = None
 *         self._current_coord = None             # <<<<<<<<<<<<<<
 *         self._current_size = 0.0
 *         self._current_depth = 0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_current_coord);
  __Pyx_DECREF(__pyx_v_self->_current_coord);
  __pyx_v_self->_current_coord = ((PyObject*)Py_None);

  /* "pyoctomap/octomap.pyx":174
 *         self._current_node = None
 *         self._current_coord = None
 *         self._current_size = 0.0             # <<<<<<<<<<<<<<
 *         self._current_depth = 0
 *         self._expected_version = 0
 */
  __pyx_v_self->_current_size = 0.0;

  /* "pyoctomap/octomap.pyx":175
 *         self._current_coord = None
 *         self._current_size = 0.0
 *         self._current_depth = 0             # <<<<<<<<<<<<<<
 *         self._expected_version = 0
 * 
 */
  __pyx_v_self->_current_depth = 0;

  /* "pyoctomap/octomap.pyx":176
 *         self._current_size = 0.0
 *         self._current_depth = 0
 *         self._expected_version = 0             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, OcTree tree, maxDepth=0):
 */
  __pyx_v_self->_expected_version = 0;

  /* "pyoctomap/octomap.pyx":167
 *         self._current_node = None
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._tree = None
 *         self._it = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":178
 *         self._expected_version = 0
 * 
 *     def __init__(self, OcTree tree, maxDepth=0):             # <<<<<<<<<<<<<<
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True
 */

/* Python wrapper */
static int __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_tree = 0;
  PyObject *__pyx_v_maxDepth = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_maxDepth,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tree)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 178, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxDepth);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 178, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(1, 178, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tree = ((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)values[0]);
    __pyx_v_maxDepth = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 178, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleTreeIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), __pyx_ptype_9pyoctomap_7octomap_OcTree, 1, "tree", 0))) __PYX_ERR(1, 178, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_4__init__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self), __pyx_v_tree, __pyx_v_maxDepth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_4__init__(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_tree, PyObject *__pyx_v_maxDepth) {
  unsigned char __pyx_v_depth;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::tree_iterator __pyx_v_tmp_it;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::tree_iterator __pyx_v_tmp_end;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  unsigned char __pyx_t_4;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::tree_iterator __pyx_t_5;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::tree_iterator *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "pyoctomap/octomap.pyx":179
 * 
 *     def __init__(self, OcTree tree, maxDepth=0):
 *         if tree is None or tree.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             return
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_tree) == Py_None);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_tree->thisptr == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":180
 *     def __init__(self, OcTree tree, maxDepth=0):
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True             # <<<<<<<<<<<<<<
 *             return
 *         self._tree = tree
 */
    __pyx_v_self->_is_end = 1;

    /* "pyoctomap/octomap.pyx":181
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True
 *             return             # <<<<<<<<<<<<<<
 *         self._tree = tree
 *         self._expected_version = tree._mod_version
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":179
 * 
 *     def __init__(self, OcTree tree, maxDepth=0):
 *         if tree is None or tree.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             return
 */
  }

  /* "pyoctomap/octomap.pyx":182
 *             self._is_end = True
 *             return
 *         self._tree = tree             # <<<<<<<<<<<<<<
 *         self._expected_version = tree._mod_version
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 */
  __Pyx_INCREF((PyObject *)__pyx_v_tree);
  __Pyx_GIVEREF((PyObject *)__pyx_v_tree);
  __Pyx_GOTREF(__pyx_v_self->_tree);
  __Pyx_DECREF(__pyx_v_self->_tree);
  __pyx_v_self->_tree = ((PyObject *)__pyx_v_tree);

  /* "pyoctomap/octomap.pyx":183
 *             return
 *         self._tree = tree
 *         self._expected_version = tree._mod_version             # <<<<<<<<<<<<<<
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator tmp_it = tree.thisptr.begin_tree(depth)
 */
  __pyx_t_3 = __pyx_v_tree->_mod_version;
  __pyx_v_self->_expected_version = __pyx_t_3;

  /* "pyoctomap/octomap.pyx":184
 *         self._tree = tree
 *         self._expected_version = tree._mod_version
 *         cdef unsigned char depth = <unsigned char?>maxDepth             # <<<<<<<<<<<<<<
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator tmp_it = tree.thisptr.begin_tree(depth)
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator tmp_end = tree.thisptr.end_tree()
 */
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_char(__pyx_v_maxDepth); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(1, 184, __pyx_L1_error)
  __pyx_v_depth = ((unsigned char)__pyx_t_4);

  /* "pyoctomap/octomap.pyx":185
 *         self._expected_version = tree._mod_version
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator tmp_it = tree.thisptr.begin_tree(depth)             # <<<<<<<<<<<<<<
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator tmp_end = tree.thisptr.end_tree()
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator(tmp_it)
 */
  try {
    __pyx_t_5 = __pyx_v_tree->thisptr->begin_tree(__pyx_v_depth);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 185, __pyx_L1_error)
  }
  __pyx_v_tmp_it = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "pyoctomap/octomap.pyx":186
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator tmp_it = tree.thisptr.begin_tree(depth)
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator tmp_end = tree.thisptr.end_tree()             # <<<<<<<<<<<<<<
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator(tmp_it)
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator(tmp_end)
 */
  try {
    __pyx_t_5 = __pyx_v_tree->thisptr->end_tree();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 186, __pyx_L1_error)
  }
  __pyx_v_tmp_end = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "pyoctomap/octomap.pyx":187
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator tmp_it = tree.thisptr.begin_tree(depth)
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator tmp_end = tree.thisptr.end_tree()
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator(tmp_it)             # <<<<<<<<<<<<<<
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator(tmp_end)
 *         self._is_end = False
 */
  try {
    __pyx_t_6 = new octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::tree_iterator(__pyx_v_tmp_it);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 187, __pyx_L1_error)
  }
  __pyx_v_self->_it = __pyx_t_6;

  /* "pyoctomap/octomap.pyx":188
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator tmp_end = tree.thisptr.end_tree()
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator(tmp_it)
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator(tmp_end)             # <<<<<<<<<<<<<<
 *         self._is_end = False
 * 
 */
  try {
    __pyx_t_6 = new octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::tree_iterator(__pyx_v_tmp_end);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 188, __pyx_L1_error)
  }
  __pyx_v_self->_end = __pyx_t_6;

  /* "pyoctomap/octomap.pyx":189
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator(tmp_it)
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].tree_iterator(tmp_end)
 *         self._is_end = False             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->_is_end = 0;

  /* "pyoctomap/octomap.pyx":178
 *         self._expected_version = 0
 * 
 *     def __init__(self, OcTree tree, maxDepth=0):             # <<<<<<<<<<<<<<
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleTreeIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":191
 *         self._is_end = False
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_7__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_7__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_6__iter__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_6__iter__(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 1);

  /* "pyoctomap/octomap.pyx":192
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":191
 *         self._is_end = False
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":194
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self._is_end or self._it == NULL or self._end == NULL:
 *             raise StopIteration
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_9__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_9__next__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_8__next__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_8__next__(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self) {
  octomap::point3d __pyx_v_p;
  PyArrayObject *__pyx_v__pt = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd__pt;
  __Pyx_Buffer __pyx_pybuffer__pt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_error_without_exception = 0; /* StopIteration */
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 1);
  __pyx_pybuffer__pt.pybuffer.buf = NULL;
  __pyx_pybuffer__pt.refcount = 0;
  __pyx_pybuffernd__pt.data = NULL;
  __pyx_pybuffernd__pt.rcbuffer = &__pyx_pybuffer__pt;

  /* "pyoctomap/octomap.pyx":195
 * 
 *     def __next__(self):
 *         if self._is_end or self._it == NULL or self._end == NULL:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 */
  if (!__pyx_v_self->_is_end) {
  } else {
    __pyx_t_1 = __pyx_v_self->_is_end;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_it == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_end == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":196
 *     def __next__(self):
 *         if self._is_end or self._it == NULL or self._end == NULL:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "pyoctomap/octomap.pyx":195
 * 
 *     def __next__(self):
 *         if self._is_end or self._it == NULL or self._end == NULL:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 */
  }

  /* "pyoctomap/octomap.pyx":198
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 */
  __pyx_t_2 = (__pyx_v_self->_tree == Py_None);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }

  /* "pyoctomap/octomap.pyx":199
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or
 *             (<OcTree>self._tree).thisptr == NULL or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 *             self._is_end = True
 */
  __pyx_t_2 = (((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self->_tree)->thisptr == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }

  /* "pyoctomap/octomap.pyx":200
 *         if (self._tree is None or
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             raise StopIteration
 */
  __pyx_t_2 = (((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self->_tree)->_mod_version != __pyx_v_self->_expected_version);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;

  /* "pyoctomap/octomap.pyx":198
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 */
  if (unlikely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":201
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 *             self._is_end = True             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):
 */
    __pyx_v_self->_is_end = 1;

    /* "pyoctomap/octomap.pyx":202
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 *             self._is_end = True
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         if deref(self._it) == deref(self._end):
 *             self._is_end = True
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "pyoctomap/octomap.pyx":198
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 */
  }

  /* "pyoctomap/octomap.pyx":203
 *             self._is_end = True
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             raise StopIteration
 */
  __pyx_t_1 = (((*__pyx_v_self->_it) == (*__pyx_v_self->_end)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":204
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):
 *             self._is_end = True             # <<<<<<<<<<<<<<
 *             raise StopIteration
 * 
 */
    __pyx_v_self->_is_end = 1;

    /* "pyoctomap/octomap.pyx":205
 *         if deref(self._it) == deref(self._end):
 *             self._is_end = True
 *             raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *         # Snapshot current iterator state
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "pyoctomap/octomap.pyx":203
 *             self._is_end = True
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             raise StopIteration
 */
  }

  /* "pyoctomap/octomap.pyx":208
 * 
 *         # Snapshot current iterator state
 *         cdef defs.point3d p = deref(self._it).getCoordinate()             # <<<<<<<<<<<<<<
 *         self._current_coord = [p.x(), p.y(), p.z()]
 *         self._current_size = deref(self._it).getSize()
 */
  __pyx_v_p = (*__pyx_v_self->_it).getCoordinate();

  /* "pyoctomap/octomap.pyx":209
 *         # Snapshot current iterator state
 *         cdef defs.point3d p = deref(self._it).getCoordinate()
 *         self._current_coord = [p.x(), p.y(), p.z()]             # <<<<<<<<<<<<<<
 *         self._current_size = deref(self._it).getSize()
 *         self._current_depth = <int?>deref(self._it).getDepth()
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p.x()); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_p.z()); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3)) __PYX_ERR(1, 209, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(1, 209, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5)) __PYX_ERR(1, 209, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_current_coord);
  __Pyx_DECREF(__pyx_v_self->_current_coord);
  __pyx_v_self->_current_coord = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pyoctomap/octomap.pyx":210
 *         cdef defs.point3d p = deref(self._it).getCoordinate()
 *         self._current_coord = [p.x(), p.y(), p.z()]
 *         self._current_size = deref(self._it).getSize()             # <<<<<<<<<<<<<<
 *         self._current_depth = <int?>deref(self._it).getDepth()
 * 
 */
  try {
    __pyx_t_7 = (*__pyx_v_self->_it).getSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 210, __pyx_L1_error)
  }
  __pyx_v_self->_current_size = __pyx_t_7;

  /* "pyoctomap/octomap.pyx":211
 *         self._current_coord = [p.x(), p.y(), p.z()]
 *         self._current_size = deref(self._it).getSize()
 *         self._current_depth = <int?>deref(self._it).getDepth()             # <<<<<<<<<<<<<<
 * 
 *         # Capture node by searching at current coordinate (robust approach)
 */
  __pyx_v_self->_current_depth = ((int)(*__pyx_v_self->_it).getDepth());

  /* "pyoctomap/octomap.pyx":214
 * 
 *         # Capture node by searching at current coordinate (robust approach)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _pt = np.array(self._current_coord, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         self._current_node = self._tree.search(_pt)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_self->_current_coord);
  __Pyx_GIVEREF(__pyx_v_self->_current_coord);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_self->_current_coord)) __PYX_ERR(1, 214, __pyx_L1_error);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 214, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd__pt.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v__pt = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd__pt.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 214, __pyx_L1_error)
    } else {__pyx_pybuffernd__pt.diminfo[0].strides = __pyx_pybuffernd__pt.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd__pt.diminfo[0].shape = __pyx_pybuffernd__pt.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v__pt = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "pyoctomap/octomap.pyx":215
 *         # Capture node by searching at current coordinate (robust approach)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _pt = np.array(self._current_coord, dtype=np.float64)
 *         self._current_node = self._tree.search(_pt)             # <<<<<<<<<<<<<<
 * 
 *         # Advance iterator
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_tree, __pyx_n_s_search); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_10 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, ((PyObject *)__pyx_v__pt)};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->_current_node);
  __Pyx_DECREF(__pyx_v_self->_current_node);
  __pyx_v_self->_current_node = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "pyoctomap/octomap.pyx":218
 * 
 *         # Advance iterator
 *         inc(deref(self._it))             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  (void)((++(*__pyx_v_self->_it)));

  /* "pyoctomap/octomap.pyx":219
 *         # Advance iterator
 *         inc(deref(self._it))
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def getCoordinate(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":194
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self._is_end or self._it == NULL or self._end == NULL:
 *             raise StopIteration
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__pt.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  if (!__pyx_error_without_exception) {
    __Pyx_AddTraceback("pyoctomap.octomap.SimpleTreeIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__pt.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v__pt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":221
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_11getCoordinate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_11getCoordinate = {"getCoordinate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_11getCoordinate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_11getCoordinate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCoordinate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getCoordinate", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getCoordinate", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_10getCoordinate(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_10getCoordinate(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCoordinate", 1);

  /* "pyoctomap/octomap.pyx":222
 * 
 *     def getCoordinate(self):
 *         if self._current_coord is not None:             # <<<<<<<<<<<<<<
 *             return self._current_coord
 *         return [0.0, 0.0, 0.0]
 */
  __pyx_t_1 = (__pyx_v_self->_current_coord != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":223
 *     def getCoordinate(self):
 *         if self._current_coord is not None:
 *             return self._current_coord             # <<<<<<<<<<<<<<
 *         return [0.0, 0.0, 0.0]
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_current_coord);
    __pyx_r = __pyx_v_self->_current_coord;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":222
 * 
 *     def getCoordinate(self):
 *         if self._current_coord is not None:             # <<<<<<<<<<<<<<
 *             return self._current_coord
 *         return [0.0, 0.0, 0.0]
 */
  }

  /* "pyoctomap/octomap.pyx":224
 *         if self._current_coord is not None:
 *             return self._current_coord
 *         return [0.0, 0.0, 0.0]             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_float_0_0)) __PYX_ERR(1, 224, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_float_0_0)) __PYX_ERR(1, 224, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_float_0_0)) __PYX_ERR(1, 224, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":221
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleTreeIterator.getCoordinate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":226
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_13getSize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_13getSize = {"getSize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_13getSize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_13getSize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getSize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getSize", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_12getSize(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_12getSize(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize", 1);

  /* "pyoctomap/octomap.pyx":227
 * 
 *     def getSize(self):
 *         return self._current_size             # <<<<<<<<<<<<<<
 * 
 *     def getDepth(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_current_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":226
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleTreeIterator.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":229
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_15getDepth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_15getDepth = {"getDepth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_15getDepth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_15getDepth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDepth (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getDepth", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getDepth", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_14getDepth(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_14getDepth(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDepth", 1);

  /* "pyoctomap/octomap.pyx":230
 * 
 *     def getDepth(self):
 *         return self._current_depth             # <<<<<<<<<<<<<<
 * 
 *     def isLeaf(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_current_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":229
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleTreeIterator.getDepth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":232
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         if self._current_node is None:
 *             return True
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_17isLeaf(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_17isLeaf = {"isLeaf", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_17isLeaf, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_17isLeaf(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isLeaf (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("isLeaf", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "isLeaf", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_16isLeaf(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_16isLeaf(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isLeaf", 1);

  /* "pyoctomap/octomap.pyx":233
 * 
 *     def isLeaf(self):
 *         if self._current_node is None:             # <<<<<<<<<<<<<<
 *             return True
 *         return not self._tree.nodeHasChildren(self._current_node)
 */
  __pyx_t_1 = (__pyx_v_self->_current_node == Py_None);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":234
 *     def isLeaf(self):
 *         if self._current_node is None:
 *             return True             # <<<<<<<<<<<<<<
 *         return not self._tree.nodeHasChildren(self._current_node)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":233
 * 
 *     def isLeaf(self):
 *         if self._current_node is None:             # <<<<<<<<<<<<<<
 *             return True
 *         return not self._tree.nodeHasChildren(self._current_node)
 */
  }

  /* "pyoctomap/octomap.pyx":235
 *         if self._current_node is None:
 *             return True
 *         return not self._tree.nodeHasChildren(self._current_node)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_tree, __pyx_n_s_nodeHasChildren); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_self->_current_node};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 235, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":232
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         if self._current_node is None:
 *             return True
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleTreeIterator.isLeaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_19__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_18__reduce_cython__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleTreeIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_21__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleTreeIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_20__setstate_cython__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleTreeIterator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleTreeIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":254
 *     cdef int _current_depth
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._it != NULL:
 *             del self._it
 */

/* Python wrapper */
static void __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_1__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator___dealloc__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator___dealloc__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "pyoctomap/octomap.pyx":255
 * 
 *     def __dealloc__(self):
 *         if self._it != NULL:             # <<<<<<<<<<<<<<
 *             del self._it
 *             self._it = NULL
 */
  __pyx_t_1 = (__pyx_v_self->_it != NULL);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":256
 *     def __dealloc__(self):
 *         if self._it != NULL:
 *             del self._it             # <<<<<<<<<<<<<<
 *             self._it = NULL
 *         if self._end != NULL:
 */
    delete __pyx_v_self->_it;

    /* "pyoctomap/octomap.pyx":257
 *         if self._it != NULL:
 *             del self._it
 *             self._it = NULL             # <<<<<<<<<<<<<<
 *         if self._end != NULL:
 *             del self._end
 */
    __pyx_v_self->_it = NULL;

    /* "pyoctomap/octomap.pyx":255
 * 
 *     def __dealloc__(self):
 *         if self._it != NULL:             # <<<<<<<<<<<<<<
 *             del self._it
 *             self._it = NULL
 */
  }

  /* "pyoctomap/octomap.pyx":258
 *             del self._it
 *             self._it = NULL
 *         if self._end != NULL:             # <<<<<<<<<<<<<<
 *             del self._end
 *             self._end = NULL
 */
  __pyx_t_1 = (__pyx_v_self->_end != NULL);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":259
 *             self._it = NULL
 *         if self._end != NULL:
 *             del self._end             # <<<<<<<<<<<<<<
 *             self._end = NULL
 *         self._tree = None
 */
    delete __pyx_v_self->_end;

    /* "pyoctomap/octomap.pyx":260
 *         if self._end != NULL:
 *             del self._end
 *             self._end = NULL             # <<<<<<<<<<<<<<
 *         self._tree = None
 *         self._current_node = None
 */
    __pyx_v_self->_end = NULL;

    /* "pyoctomap/octomap.pyx":258
 *             del self._it
 *             self._it = NULL
 *         if self._end != NULL:             # <<<<<<<<<<<<<<
 *             del self._end
 *             self._end = NULL
 */
  }

  /* "pyoctomap/octomap.pyx":261
 *             del self._end
 *             self._end = NULL
 *         self._tree = None             # <<<<<<<<<<<<<<
 *         self._current_node = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_tree);
  __Pyx_DECREF(__pyx_v_self->_tree);
  __pyx_v_self->_tree = Py_None;

  /* "pyoctomap/octomap.pyx":262
 *             self._end = NULL
 *         self._tree = None
 *         self._current_node = None             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_current_node);
  __Pyx_DECREF(__pyx_v_self->_current_node);
  __pyx_v_self->_current_node = Py_None;

  /* "pyoctomap/octomap.pyx":254
 *     cdef int _current_depth
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._it != NULL:
 *             del self._it
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyoctomap/octomap.pyx":264
 *         self._current_node = None
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._tree = None
 *         self._it = NULL
 */

/* Python wrapper */
static int __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_2__cinit__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_2__cinit__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "pyoctomap/octomap.pyx":265
 * 
 *     def __cinit__(self):
 *         self._tree = None             # <<<<<<<<<<<<<<
 *         self._it = NULL
 *         self._end = NULL
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_tree);
  __Pyx_DECREF(__pyx_v_self->_tree);
  __pyx_v_self->_tree = Py_None;

  /* "pyoctomap/octomap.pyx":266
 *     def __cinit__(self):
 *         self._tree = None
 *         self._it = NULL             # <<<<<<<<<<<<<<
 *         self._end = NULL
 *         self._is_end = True
 */
  __pyx_v_self->_it = NULL;

  /* "pyoctomap/octomap.pyx":267
 *         self._tree = None
 *         self._it = NULL
 *         self._end = NULL             # <<<<<<<<<<<<<<
 *         self._is_end = True
 *         self._current_node = None
 */
  __pyx_v_self->_end = NULL;

  /* "pyoctomap/octomap.pyx":268
 *         self._it = NULL
 *         self._end = NULL
 *         self._is_end = True             # <<<<<<<<<<<<<<
 *         self._current_node = None
 *         self._current_coord = None
 */
  __pyx_v_self->_is_end = 1;

  /* "pyoctomap/octomap.pyx":269
 *         self._end = NULL
 *         self._is_end = True
 *         self._current_node = None             # <<<<<<<<<<<<<<
 *         self._current_coord = None
 *         self._current_size = 0.0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_current_node);
  __Pyx_DECREF(__pyx_v_self->_current_node);
  __pyx_v_self->_current_node = Py_None;

  /* "pyoctomap/octomap.pyx":270
 *         self._is_end = True
 *         self._current_node = None
 *         self._current_coord = None             # <<<<<<<<<<<<<<
 *         self._current_size = 0.0
 *         self._current_depth = 0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_current_coord);
  __Pyx_DECREF(__pyx_v_self->_current_coord);
  __pyx_v_self->_current_coord = ((PyObject*)Py_None);

  /* "pyoctomap/octomap.pyx":271
 *         self._current_node = None
 *         self._current_coord = None
 *         self._current_size = 0.0             # <<<<<<<<<<<<<<
 *         self._current_depth = 0
 *         self._expected_version = 0
 */
  __pyx_v_self->_current_size = 0.0;

  /* "pyoctomap/octomap.pyx":272
 *         self._current_coord = None
 *         self._current_size = 0.0
 *         self._current_depth = 0             # <<<<<<<<<<<<<<
 *         self._expected_version = 0
 * 
 */
  __pyx_v_self->_current_depth = 0;

  /* "pyoctomap/octomap.pyx":273
 *         self._current_size = 0.0
 *         self._current_depth = 0
 *         self._expected_version = 0             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, OcTree tree, maxDepth=0):
 */
  __pyx_v_self->_expected_version = 0;

  /* "pyoctomap/octomap.pyx":264
 *         self._current_node = None
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._tree = None
 *         self._it = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":275
 *         self._expected_version = 0
 * 
 *     def __init__(self, OcTree tree, maxDepth=0):             # <<<<<<<<<<<<<<
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True
 */

/* Python wrapper */
static int __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_tree = 0;
  PyObject *__pyx_v_maxDepth = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_maxDepth,0};
    values[1] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tree)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 275, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxDepth);
          if (value) { values[1] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 275, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(1, 275, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tree = ((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)values[0]);
    __pyx_v_maxDepth = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 275, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), __pyx_ptype_9pyoctomap_7octomap_OcTree, 1, "tree", 0))) __PYX_ERR(1, 275, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_4__init__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self), __pyx_v_tree, __pyx_v_maxDepth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_4__init__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_tree, PyObject *__pyx_v_maxDepth) {
  unsigned char __pyx_v_depth;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_iterator __pyx_v_tmp_it;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_iterator __pyx_v_tmp_end;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  unsigned char __pyx_t_4;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_iterator __pyx_t_5;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_iterator *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "pyoctomap/octomap.pyx":276
 * 
 *     def __init__(self, OcTree tree, maxDepth=0):
 *         if tree is None or tree.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             return
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_tree) == Py_None);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_tree->thisptr == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":277
 *     def __init__(self, OcTree tree, maxDepth=0):
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True             # <<<<<<<<<<<<<<
 *             return
 *         self._tree = tree
 */
    __pyx_v_self->_is_end = 1;

    /* "pyoctomap/octomap.pyx":278
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True
 *             return             # <<<<<<<<<<<<<<
 *         self._tree = tree
 *         self._expected_version = tree._mod_version
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":276
 * 
 *     def __init__(self, OcTree tree, maxDepth=0):
 *         if tree is None or tree.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             return
 */
  }

  /* "pyoctomap/octomap.pyx":279
 *             self._is_end = True
 *             return
 *         self._tree = tree             # <<<<<<<<<<<<<<
 *         self._expected_version = tree._mod_version
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 */
  __Pyx_INCREF((PyObject *)__pyx_v_tree);
  __Pyx_GIVEREF((PyObject *)__pyx_v_tree);
  __Pyx_GOTREF(__pyx_v_self->_tree);
  __Pyx_DECREF(__pyx_v_self->_tree);
  __pyx_v_self->_tree = ((PyObject *)__pyx_v_tree);

  /* "pyoctomap/octomap.pyx":280
 *             return
 *         self._tree = tree
 *         self._expected_version = tree._mod_version             # <<<<<<<<<<<<<<
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator tmp_it = tree.thisptr.begin_leafs(depth)
 */
  __pyx_t_3 = __pyx_v_tree->_mod_version;
  __pyx_v_self->_expected_version = __pyx_t_3;

  /* "pyoctomap/octomap.pyx":281
 *         self._tree = tree
 *         self._expected_version = tree._mod_version
 *         cdef unsigned char depth = <unsigned char?>maxDepth             # <<<<<<<<<<<<<<
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator tmp_it = tree.thisptr.begin_leafs(depth)
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator tmp_end = tree.thisptr.end_leafs()
 */
  __pyx_t_4 = __Pyx_PyInt_As_unsigned_char(__pyx_v_maxDepth); if (unlikely((__pyx_t_4 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(1, 281, __pyx_L1_error)
  __pyx_v_depth = ((unsigned char)__pyx_t_4);

  /* "pyoctomap/octomap.pyx":282
 *         self._expected_version = tree._mod_version
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator tmp_it = tree.thisptr.begin_leafs(depth)             # <<<<<<<<<<<<<<
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator tmp_end = tree.thisptr.end_leafs()
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator(tmp_it)
 */
  try {
    __pyx_t_5 = __pyx_v_tree->thisptr->begin_leafs(__pyx_v_depth);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 282, __pyx_L1_error)
  }
  __pyx_v_tmp_it = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "pyoctomap/octomap.pyx":283
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator tmp_it = tree.thisptr.begin_leafs(depth)
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator tmp_end = tree.thisptr.end_leafs()             # <<<<<<<<<<<<<<
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator(tmp_it)
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator(tmp_end)
 */
  try {
    __pyx_t_5 = __pyx_v_tree->thisptr->end_leafs();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 283, __pyx_L1_error)
  }
  __pyx_v_tmp_end = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "pyoctomap/octomap.pyx":284
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator tmp_it = tree.thisptr.begin_leafs(depth)
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator tmp_end = tree.thisptr.end_leafs()
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator(tmp_it)             # <<<<<<<<<<<<<<
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator(tmp_end)
 *         self._is_end = False
 */
  try {
    __pyx_t_6 = new octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_iterator(__pyx_v_tmp_it);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 284, __pyx_L1_error)
  }
  __pyx_v_self->_it = __pyx_t_6;

  /* "pyoctomap/octomap.pyx":285
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator tmp_end = tree.thisptr.end_leafs()
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator(tmp_it)
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator(tmp_end)             # <<<<<<<<<<<<<<
 *         self._is_end = False
 * 
 */
  try {
    __pyx_t_6 = new octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_iterator(__pyx_v_tmp_end);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 285, __pyx_L1_error)
  }
  __pyx_v_self->_end = __pyx_t_6;

  /* "pyoctomap/octomap.pyx":286
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator(tmp_it)
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_iterator(tmp_end)
 *         self._is_end = False             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->_is_end = 0;

  /* "pyoctomap/octomap.pyx":275
 *         self._expected_version = 0
 * 
 *     def __init__(self, OcTree tree, maxDepth=0):             # <<<<<<<<<<<<<<
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":288
 *         self._is_end = False
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_7__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_7__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_6__iter__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_6__iter__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 1);

  /* "pyoctomap/octomap.pyx":289
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":288
 *         self._is_end = False
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":291
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self._is_end or self._it == NULL or self._end == NULL:
 *             raise StopIteration
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_9__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_9__next__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_8__next__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_8__next__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self) {
  octomap::point3d __pyx_v_p;
  PyArrayObject *__pyx_v__pt = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd__pt;
  __Pyx_Buffer __pyx_pybuffer__pt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_error_without_exception = 0; /* StopIteration */
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 1);
  __pyx_pybuffer__pt.pybuffer.buf = NULL;
  __pyx_pybuffer__pt.refcount = 0;
  __pyx_pybuffernd__pt.data = NULL;
  __pyx_pybuffernd__pt.rcbuffer = &__pyx_pybuffer__pt;

  /* "pyoctomap/octomap.pyx":292
 * 
 *     def __next__(self):
 *         if self._is_end or self._it == NULL or self._end == NULL:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 */
  if (!__pyx_v_self->_is_end) {
  } else {
    __pyx_t_1 = __pyx_v_self->_is_end;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_it == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_end == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":293
 *     def __next__(self):
 *         if self._is_end or self._it == NULL or self._end == NULL:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "pyoctomap/octomap.pyx":292
 * 
 *     def __next__(self):
 *         if self._is_end or self._it == NULL or self._end == NULL:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 */
  }

  /* "pyoctomap/octomap.pyx":295
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 */
  __pyx_t_2 = (__pyx_v_self->_tree == Py_None);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }

  /* "pyoctomap/octomap.pyx":296
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or
 *             (<OcTree>self._tree).thisptr == NULL or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 *             self._is_end = True
 */
  __pyx_t_2 = (((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self->_tree)->thisptr == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }

  /* "pyoctomap/octomap.pyx":297
 *         if (self._tree is None or
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             raise StopIteration
 */
  __pyx_t_2 = (((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self->_tree)->_mod_version != __pyx_v_self->_expected_version);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;

  /* "pyoctomap/octomap.pyx":295
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 */
  if (unlikely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":298
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 *             self._is_end = True             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):
 */
    __pyx_v_self->_is_end = 1;

    /* "pyoctomap/octomap.pyx":299
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 *             self._is_end = True
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         if deref(self._it) == deref(self._end):
 *             self._is_end = True
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "pyoctomap/octomap.pyx":295
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 */
  }

  /* "pyoctomap/octomap.pyx":300
 *             self._is_end = True
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             raise StopIteration
 */
  __pyx_t_1 = (((*__pyx_v_self->_it) == (*__pyx_v_self->_end)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":301
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):
 *             self._is_end = True             # <<<<<<<<<<<<<<
 *             raise StopIteration
 * 
 */
    __pyx_v_self->_is_end = 1;

    /* "pyoctomap/octomap.pyx":302
 *         if deref(self._it) == deref(self._end):
 *             self._is_end = True
 *             raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *         # Snapshot the current state
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "pyoctomap/octomap.pyx":300
 *             self._is_end = True
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             raise StopIteration
 */
  }

  /* "pyoctomap/octomap.pyx":305
 * 
 *         # Snapshot the current state
 *         cdef defs.point3d p = deref(self._it).getCoordinate()             # <<<<<<<<<<<<<<
 *         self._current_coord = [p.x(), p.y(), p.z()]
 *         self._current_size = deref(self._it).getSize()
 */
  __pyx_v_p = (*__pyx_v_self->_it).getCoordinate();

  /* "pyoctomap/octomap.pyx":306
 *         # Snapshot the current state
 *         cdef defs.point3d p = deref(self._it).getCoordinate()
 *         self._current_coord = [p.x(), p.y(), p.z()]             # <<<<<<<<<<<<<<
 *         self._current_size = deref(self._it).getSize()
 *         self._current_depth = <int?>deref(self._it).getDepth()
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p.x()); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_p.z()); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3)) __PYX_ERR(1, 306, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(1, 306, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5)) __PYX_ERR(1, 306, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_current_coord);
  __Pyx_DECREF(__pyx_v_self->_current_coord);
  __pyx_v_self->_current_coord = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pyoctomap/octomap.pyx":307
 *         cdef defs.point3d p = deref(self._it).getCoordinate()
 *         self._current_coord = [p.x(), p.y(), p.z()]
 *         self._current_size = deref(self._it).getSize()             # <<<<<<<<<<<<<<
 *         self._current_depth = <int?>deref(self._it).getDepth()
 * 
 */
  try {
    __pyx_t_7 = (*__pyx_v_self->_it).getSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 307, __pyx_L1_error)
  }
  __pyx_v_self->_current_size = __pyx_t_7;

  /* "pyoctomap/octomap.pyx":308
 *         self._current_coord = [p.x(), p.y(), p.z()]
 *         self._current_size = deref(self._it).getSize()
 *         self._current_depth = <int?>deref(self._it).getDepth()             # <<<<<<<<<<<<<<
 * 
 *         # Capture node by searching at current coordinate (robust approach)
 */
  __pyx_v_self->_current_depth = ((int)(*__pyx_v_self->_it).getDepth());

  /* "pyoctomap/octomap.pyx":311
 * 
 *         # Capture node by searching at current coordinate (robust approach)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _pt = np.array(self._current_coord, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         self._current_node = self._tree.search(_pt)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_self->_current_coord);
  __Pyx_GIVEREF(__pyx_v_self->_current_coord);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_self->_current_coord)) __PYX_ERR(1, 311, __pyx_L1_error);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 311, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd__pt.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v__pt = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd__pt.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 311, __pyx_L1_error)
    } else {__pyx_pybuffernd__pt.diminfo[0].strides = __pyx_pybuffernd__pt.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd__pt.diminfo[0].shape = __pyx_pybuffernd__pt.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v__pt = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "pyoctomap/octomap.pyx":312
 *         # Capture node by searching at current coordinate (robust approach)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _pt = np.array(self._current_coord, dtype=np.float64)
 *         self._current_node = self._tree.search(_pt)             # <<<<<<<<<<<<<<
 * 
 *         # Advance
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_tree, __pyx_n_s_search); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_10 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, ((PyObject *)__pyx_v__pt)};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->_current_node);
  __Pyx_DECREF(__pyx_v_self->_current_node);
  __pyx_v_self->_current_node = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "pyoctomap/octomap.pyx":315
 * 
 *         # Advance
 *         inc(deref(self._it))             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  (void)((++(*__pyx_v_self->_it)));

  /* "pyoctomap/octomap.pyx":316
 *         # Advance
 *         inc(deref(self._it))
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def getCoordinate(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":291
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self._is_end or self._it == NULL or self._end == NULL:
 *             raise StopIteration
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__pt.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  if (!__pyx_error_without_exception) {
    __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__pt.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v__pt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":318
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_11getCoordinate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_11getCoordinate = {"getCoordinate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_11getCoordinate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_11getCoordinate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCoordinate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getCoordinate", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getCoordinate", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_10getCoordinate(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_10getCoordinate(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCoordinate", 1);

  /* "pyoctomap/octomap.pyx":319
 * 
 *     def getCoordinate(self):
 *         if self._current_coord is not None:             # <<<<<<<<<<<<<<
 *             return self._current_coord
 *         return [0.0, 0.0, 0.0]
 */
  __pyx_t_1 = (__pyx_v_self->_current_coord != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":320
 *     def getCoordinate(self):
 *         if self._current_coord is not None:
 *             return self._current_coord             # <<<<<<<<<<<<<<
 *         return [0.0, 0.0, 0.0]
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_current_coord);
    __pyx_r = __pyx_v_self->_current_coord;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":319
 * 
 *     def getCoordinate(self):
 *         if self._current_coord is not None:             # <<<<<<<<<<<<<<
 *             return self._current_coord
 *         return [0.0, 0.0, 0.0]
 */
  }

  /* "pyoctomap/octomap.pyx":321
 *         if self._current_coord is not None:
 *             return self._current_coord
 *         return [0.0, 0.0, 0.0]             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_float_0_0)) __PYX_ERR(1, 321, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_float_0_0)) __PYX_ERR(1, 321, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_float_0_0)) __PYX_ERR(1, 321, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":318
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafIterator.getCoordinate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":323
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_13getSize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_13getSize = {"getSize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_13getSize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_13getSize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getSize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getSize", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_12getSize(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_12getSize(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize", 1);

  /* "pyoctomap/octomap.pyx":324
 * 
 *     def getSize(self):
 *         return self._current_size             # <<<<<<<<<<<<<<
 * 
 *     def getDepth(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_current_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":323
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafIterator.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":326
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_15getDepth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_15getDepth = {"getDepth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_15getDepth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_15getDepth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDepth (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getDepth", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getDepth", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_14getDepth(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_14getDepth(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDepth", 1);

  /* "pyoctomap/octomap.pyx":327
 * 
 *     def getDepth(self):
 *         return self._current_depth             # <<<<<<<<<<<<<<
 * 
 *     def isLeaf(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_current_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":326
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafIterator.getDepth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":329
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_17isLeaf(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_18SimpleLeafIterator_16isLeaf, "Check if current node is a leaf");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_17isLeaf = {"isLeaf", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_17isLeaf, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_18SimpleLeafIterator_16isLeaf};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_17isLeaf(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isLeaf (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("isLeaf", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "isLeaf", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_16isLeaf(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_16isLeaf(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isLeaf", 1);

  /* "pyoctomap/octomap.pyx":331
 *     def isLeaf(self):
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:             # <<<<<<<<<<<<<<
 *             return True
 *         return not self._tree.nodeHasChildren(self._current_node)
 */
  __pyx_t_1 = (__pyx_v_self->_current_node == Py_None);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":332
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:
 *             return True             # <<<<<<<<<<<<<<
 *         return not self._tree.nodeHasChildren(self._current_node)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":331
 *     def isLeaf(self):
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:             # <<<<<<<<<<<<<<
 *             return True
 *         return not self._tree.nodeHasChildren(self._current_node)
 */
  }

  /* "pyoctomap/octomap.pyx":333
 *         if self._current_node is None:
 *             return True
 *         return not self._tree.nodeHasChildren(self._current_node)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_tree, __pyx_n_s_nodeHasChildren); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_self->_current_node};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":329
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafIterator.isLeaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":335
 *         return not self._tree.nodeHasChildren(self._current_node)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def current_node(self):
 *         return self._current_node
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_12current_node_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_12current_node_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_12current_node___get__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_12current_node___get__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "pyoctomap/octomap.pyx":337
 *     @property
 *     def current_node(self):
 *         return self._current_node             # <<<<<<<<<<<<<<
 * 
 * cdef class SimpleLeafBBXIterator:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_current_node);
  __pyx_r = __pyx_v_self->_current_node;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":335
 *         return not self._tree.nodeHasChildren(self._current_node)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def current_node(self):
 *         return self._current_node
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_19__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_18__reduce_cython__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_21__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_20__setstate_cython__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_18SimpleLeafIterator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":355
 *     cdef int _current_depth
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._it != NULL:
 *             del self._it
 */

/* Python wrapper */
static void __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_1__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator___dealloc__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator___dealloc__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 1);

  /* "pyoctomap/octomap.pyx":356
 * 
 *     def __dealloc__(self):
 *         if self._it != NULL:             # <<<<<<<<<<<<<<
 *             del self._it
 *             self._it = NULL
 */
  __pyx_t_1 = (__pyx_v_self->_it != NULL);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":357
 *     def __dealloc__(self):
 *         if self._it != NULL:
 *             del self._it             # <<<<<<<<<<<<<<
 *             self._it = NULL
 *         if self._end != NULL:
 */
    delete __pyx_v_self->_it;

    /* "pyoctomap/octomap.pyx":358
 *         if self._it != NULL:
 *             del self._it
 *             self._it = NULL             # <<<<<<<<<<<<<<
 *         if self._end != NULL:
 *             del self._end
 */
    __pyx_v_self->_it = NULL;

    /* "pyoctomap/octomap.pyx":356
 * 
 *     def __dealloc__(self):
 *         if self._it != NULL:             # <<<<<<<<<<<<<<
 *             del self._it
 *             self._it = NULL
 */
  }

  /* "pyoctomap/octomap.pyx":359
 *             del self._it
 *             self._it = NULL
 *         if self._end != NULL:             # <<<<<<<<<<<<<<
 *             del self._end
 *             self._end = NULL
 */
  __pyx_t_1 = (__pyx_v_self->_end != NULL);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":360
 *             self._it = NULL
 *         if self._end != NULL:
 *             del self._end             # <<<<<<<<<<<<<<
 *             self._end = NULL
 *         self._tree = None
 */
    delete __pyx_v_self->_end;

    /* "pyoctomap/octomap.pyx":361
 *         if self._end != NULL:
 *             del self._end
 *             self._end = NULL             # <<<<<<<<<<<<<<
 *         self._tree = None
 *         self._current_node = None
 */
    __pyx_v_self->_end = NULL;

    /* "pyoctomap/octomap.pyx":359
 *             del self._it
 *             self._it = NULL
 *         if self._end != NULL:             # <<<<<<<<<<<<<<
 *             del self._end
 *             self._end = NULL
 */
  }

  /* "pyoctomap/octomap.pyx":362
 *             del self._end
 *             self._end = NULL
 *         self._tree = None             # <<<<<<<<<<<<<<
 *         self._current_node = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_tree);
  __Pyx_DECREF(__pyx_v_self->_tree);
  __pyx_v_self->_tree = Py_None;

  /* "pyoctomap/octomap.pyx":363
 *             self._end = NULL
 *         self._tree = None
 *         self._current_node = None             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_current_node);
  __Pyx_DECREF(__pyx_v_self->_current_node);
  __pyx_v_self->_current_node = Py_None;

  /* "pyoctomap/octomap.pyx":355
 *     cdef int _current_depth
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self._it != NULL:
 *             del self._it
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pyoctomap/octomap.pyx":365
 *         self._current_node = None
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._tree = None
 *         self._it = NULL
 */

/* Python wrapper */
static int __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_2__cinit__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_2__cinit__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "pyoctomap/octomap.pyx":366
 * 
 *     def __cinit__(self):
 *         self._tree = None             # <<<<<<<<<<<<<<
 *         self._it = NULL
 *         self._end = NULL
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_tree);
  __Pyx_DECREF(__pyx_v_self->_tree);
  __pyx_v_self->_tree = Py_None;

  /* "pyoctomap/octomap.pyx":367
 *     def __cinit__(self):
 *         self._tree = None
 *         self._it = NULL             # <<<<<<<<<<<<<<
 *         self._end = NULL
 *         self._is_end = True
 */
  __pyx_v_self->_it = NULL;

  /* "pyoctomap/octomap.pyx":368
 *         self._tree = None
 *         self._it = NULL
 *         self._end = NULL             # <<<<<<<<<<<<<<
 *         self._is_end = True
 *         self._current_node = None
 */
  __pyx_v_self->_end = NULL;

  /* "pyoctomap/octomap.pyx":369
 *         self._it = NULL
 *         self._end = NULL
 *         self._is_end = True             # <<<<<<<<<<<<<<
 *         self._current_node = None
 *         self._current_coord = None
 */
  __pyx_v_self->_is_end = 1;

  /* "pyoctomap/octomap.pyx":370
 *         self._end = NULL
 *         self._is_end = True
 *         self._current_node = None             # <<<<<<<<<<<<<<
 *         self._current_coord = None
 *         self._current_size = 0.0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_current_node);
  __Pyx_DECREF(__pyx_v_self->_current_node);
  __pyx_v_self->_current_node = Py_None;

  /* "pyoctomap/octomap.pyx":371
 *         self._is_end = True
 *         self._current_node = None
 *         self._current_coord = None             # <<<<<<<<<<<<<<
 *         self._current_size = 0.0
 *         self._current_depth = 0
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_current_coord);
  __Pyx_DECREF(__pyx_v_self->_current_coord);
  __pyx_v_self->_current_coord = ((PyObject*)Py_None);

  /* "pyoctomap/octomap.pyx":372
 *         self._current_node = None
 *         self._current_coord = None
 *         self._current_size = 0.0             # <<<<<<<<<<<<<<
 *         self._current_depth = 0
 *         self._expected_version = 0
 */
  __pyx_v_self->_current_size = 0.0;

  /* "pyoctomap/octomap.pyx":373
 *         self._current_coord = None
 *         self._current_size = 0.0
 *         self._current_depth = 0             # <<<<<<<<<<<<<<
 *         self._expected_version = 0
 * 
 */
  __pyx_v_self->_current_depth = 0;

  /* "pyoctomap/octomap.pyx":374
 *         self._current_size = 0.0
 *         self._current_depth = 0
 *         self._expected_version = 0             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, OcTree tree, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):
 */
  __pyx_v_self->_expected_version = 0;

  /* "pyoctomap/octomap.pyx":365
 *         self._current_node = None
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._tree = None
 *         self._it = NULL
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":376
 *         self._expected_version = 0
 * 
 *     def __init__(self, OcTree tree, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):             # <<<<<<<<<<<<<<
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True
 */

/* Python wrapper */
static int __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_5__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_tree = 0;
  PyArrayObject *__pyx_v_bbx_min = 0;
  PyArrayObject *__pyx_v_bbx_max = 0;
  PyObject *__pyx_v_maxDepth = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_bbx_min,&__pyx_n_s_bbx_max,&__pyx_n_s_maxDepth,0};
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tree)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bbx_min)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 1); __PYX_ERR(1, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bbx_max)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, 2); __PYX_ERR(1, 376, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxDepth);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 376, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(1, 376, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_tree = ((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)values[0]);
    __pyx_v_bbx_min = ((PyArrayObject *)values[1]);
    __pyx_v_bbx_max = ((PyArrayObject *)values[2]);
    __pyx_v_maxDepth = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 4, __pyx_nargs); __PYX_ERR(1, 376, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tree), __pyx_ptype_9pyoctomap_7octomap_OcTree, 1, "tree", 0))) __PYX_ERR(1, 376, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bbx_min), __pyx_ptype_5numpy_ndarray, 1, "bbx_min", 0))) __PYX_ERR(1, 376, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bbx_max), __pyx_ptype_5numpy_ndarray, 1, "bbx_max", 0))) __PYX_ERR(1, 376, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_4__init__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self), __pyx_v_tree, __pyx_v_bbx_min, __pyx_v_bbx_max, __pyx_v_maxDepth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_4__init__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_tree, PyArrayObject *__pyx_v_bbx_min, PyArrayObject *__pyx_v_bbx_max, PyObject *__pyx_v_maxDepth) {
  octomap::point3d __pyx_v_pmin;
  octomap::point3d __pyx_v_pmax;
  unsigned char __pyx_v_depth;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_bbx_iterator __pyx_v_tmp_it;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_bbx_iterator __pyx_v_tmp_end;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_bbx_max;
  __Pyx_Buffer __pyx_pybuffer_bbx_max;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_bbx_min;
  __Pyx_Buffer __pyx_pybuffer_bbx_min;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  octomap::point3d __pyx_t_8;
  unsigned char __pyx_t_9;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_bbx_iterator __pyx_t_10;
  octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_bbx_iterator *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 1);
  __pyx_pybuffer_bbx_min.pybuffer.buf = NULL;
  __pyx_pybuffer_bbx_min.refcount = 0;
  __pyx_pybuffernd_bbx_min.data = NULL;
  __pyx_pybuffernd_bbx_min.rcbuffer = &__pyx_pybuffer_bbx_min;
  __pyx_pybuffer_bbx_max.pybuffer.buf = NULL;
  __pyx_pybuffer_bbx_max.refcount = 0;
  __pyx_pybuffernd_bbx_max.data = NULL;
  __pyx_pybuffernd_bbx_max.rcbuffer = &__pyx_pybuffer_bbx_max;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bbx_min.rcbuffer->pybuffer, (PyObject*)__pyx_v_bbx_min, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 376, __pyx_L1_error)
  }
  __pyx_pybuffernd_bbx_min.diminfo[0].strides = __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_bbx_min.diminfo[0].shape = __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bbx_max.rcbuffer->pybuffer, (PyObject*)__pyx_v_bbx_max, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 376, __pyx_L1_error)
  }
  __pyx_pybuffernd_bbx_max.diminfo[0].strides = __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_bbx_max.diminfo[0].shape = __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":377
 * 
 *     def __init__(self, OcTree tree, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):
 *         if tree is None or tree.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             return
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_tree) == Py_None);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_tree->thisptr == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":378
 *     def __init__(self, OcTree tree, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True             # <<<<<<<<<<<<<<
 *             return
 *         self._tree = tree
 */
    __pyx_v_self->_is_end = 1;

    /* "pyoctomap/octomap.pyx":379
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True
 *             return             # <<<<<<<<<<<<<<
 *         self._tree = tree
 *         self._expected_version = tree._mod_version
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":377
 * 
 *     def __init__(self, OcTree tree, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):
 *         if tree is None or tree.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             return
 */
  }

  /* "pyoctomap/octomap.pyx":380
 *             self._is_end = True
 *             return
 *         self._tree = tree             # <<<<<<<<<<<<<<
 *         self._expected_version = tree._mod_version
 *         cdef defs.point3d pmin = defs.point3d(<float?>bbx_min[0], <float?>bbx_min[1], <float?>bbx_min[2])
 */
  __Pyx_INCREF((PyObject *)__pyx_v_tree);
  __Pyx_GIVEREF((PyObject *)__pyx_v_tree);
  __Pyx_GOTREF(__pyx_v_self->_tree);
  __Pyx_DECREF(__pyx_v_self->_tree);
  __pyx_v_self->_tree = ((PyObject *)__pyx_v_tree);

  /* "pyoctomap/octomap.pyx":381
 *             return
 *         self._tree = tree
 *         self._expected_version = tree._mod_version             # <<<<<<<<<<<<<<
 *         cdef defs.point3d pmin = defs.point3d(<float?>bbx_min[0], <float?>bbx_min[1], <float?>bbx_min[2])
 *         cdef defs.point3d pmax = defs.point3d(<float?>bbx_max[0], <float?>bbx_max[1], <float?>bbx_max[2])
 */
  __pyx_t_3 = __pyx_v_tree->_mod_version;
  __pyx_v_self->_expected_version = __pyx_t_3;

  /* "pyoctomap/octomap.pyx":382
 *         self._tree = tree
 *         self._expected_version = tree._mod_version
 *         cdef defs.point3d pmin = defs.point3d(<float?>bbx_min[0], <float?>bbx_min[1], <float?>bbx_min[2])             # <<<<<<<<<<<<<<
 *         cdef defs.point3d pmax = defs.point3d(<float?>bbx_max[0], <float?>bbx_max[1], <float?>bbx_max[2])
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 */
  __pyx_t_4 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_bbx_min.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_bbx_min.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(1, 382, __pyx_L1_error)
  }
  __pyx_t_6 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_bbx_min.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_bbx_min.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(1, 382, __pyx_L1_error)
  }
  __pyx_t_7 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_bbx_min.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_bbx_min.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(1, 382, __pyx_L1_error)
  }
  try {
    __pyx_t_8 = octomap::point3d(((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_bbx_min.diminfo[0].strides))), ((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_bbx_min.diminfo[0].strides))), ((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_bbx_min.diminfo[0].strides))));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 382, __pyx_L1_error)
  }
  __pyx_v_pmin = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);

  /* "pyoctomap/octomap.pyx":383
 *         self._expected_version = tree._mod_version
 *         cdef defs.point3d pmin = defs.point3d(<float?>bbx_min[0], <float?>bbx_min[1], <float?>bbx_min[2])
 *         cdef defs.point3d pmax = defs.point3d(<float?>bbx_max[0], <float?>bbx_max[1], <float?>bbx_max[2])             # <<<<<<<<<<<<<<
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator tmp_it = tree.thisptr.begin_leafs_bbx(pmin, pmax, depth)
 */
  __pyx_t_7 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_7 < 0) {
    __pyx_t_7 += __pyx_pybuffernd_bbx_max.diminfo[0].shape;
    if (unlikely(__pyx_t_7 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_bbx_max.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(1, 383, __pyx_L1_error)
  }
  __pyx_t_6 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_bbx_max.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_bbx_max.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(1, 383, __pyx_L1_error)
  }
  __pyx_t_4 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_bbx_max.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_bbx_max.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(1, 383, __pyx_L1_error)
  }
  try {
    __pyx_t_8 = octomap::point3d(((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_bbx_max.diminfo[0].strides))), ((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_bbx_max.diminfo[0].strides))), ((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_bbx_max.diminfo[0].strides))));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 383, __pyx_L1_error)
  }
  __pyx_v_pmax = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_8);

  /* "pyoctomap/octomap.pyx":384
 *         cdef defs.point3d pmin = defs.point3d(<float?>bbx_min[0], <float?>bbx_min[1], <float?>bbx_min[2])
 *         cdef defs.point3d pmax = defs.point3d(<float?>bbx_max[0], <float?>bbx_max[1], <float?>bbx_max[2])
 *         cdef unsigned char depth = <unsigned char?>maxDepth             # <<<<<<<<<<<<<<
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator tmp_it = tree.thisptr.begin_leafs_bbx(pmin, pmax, depth)
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator tmp_end = tree.thisptr.end_leafs_bbx()
 */
  __pyx_t_9 = __Pyx_PyInt_As_unsigned_char(__pyx_v_maxDepth); if (unlikely((__pyx_t_9 == (unsigned char)-1) && PyErr_Occurred())) __PYX_ERR(1, 384, __pyx_L1_error)
  __pyx_v_depth = ((unsigned char)__pyx_t_9);

  /* "pyoctomap/octomap.pyx":385
 *         cdef defs.point3d pmax = defs.point3d(<float?>bbx_max[0], <float?>bbx_max[1], <float?>bbx_max[2])
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator tmp_it = tree.thisptr.begin_leafs_bbx(pmin, pmax, depth)             # <<<<<<<<<<<<<<
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator tmp_end = tree.thisptr.end_leafs_bbx()
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator(tmp_it)
 */
  try {
    __pyx_t_10 = __pyx_v_tree->thisptr->begin_leafs_bbx(__pyx_v_pmin, __pyx_v_pmax, __pyx_v_depth);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 385, __pyx_L1_error)
  }
  __pyx_v_tmp_it = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_10);

  /* "pyoctomap/octomap.pyx":386
 *         cdef unsigned char depth = <unsigned char?>maxDepth
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator tmp_it = tree.thisptr.begin_leafs_bbx(pmin, pmax, depth)
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator tmp_end = tree.thisptr.end_leafs_bbx()             # <<<<<<<<<<<<<<
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator(tmp_it)
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator(tmp_end)
 */
  try {
    __pyx_t_10 = __pyx_v_tree->thisptr->end_leafs_bbx();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 386, __pyx_L1_error)
  }
  __pyx_v_tmp_end = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_10);

  /* "pyoctomap/octomap.pyx":387
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator tmp_it = tree.thisptr.begin_leafs_bbx(pmin, pmax, depth)
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator tmp_end = tree.thisptr.end_leafs_bbx()
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator(tmp_it)             # <<<<<<<<<<<<<<
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator(tmp_end)
 *         self._is_end = False
 */
  try {
    __pyx_t_11 = new octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_bbx_iterator(__pyx_v_tmp_it);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 387, __pyx_L1_error)
  }
  __pyx_v_self->_it = __pyx_t_11;

  /* "pyoctomap/octomap.pyx":388
 *         cdef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator tmp_end = tree.thisptr.end_leafs_bbx()
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator(tmp_it)
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator(tmp_end)             # <<<<<<<<<<<<<<
 *         self._is_end = False
 * 
 */
  try {
    __pyx_t_11 = new octomap::OccupancyOcTreeBase<octomap::OcTreeNode> ::leaf_bbx_iterator(__pyx_v_tmp_end);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 388, __pyx_L1_error)
  }
  __pyx_v_self->_end = __pyx_t_11;

  /* "pyoctomap/octomap.pyx":389
 *         self._it = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator(tmp_it)
 *         self._end = new defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator(tmp_end)
 *         self._is_end = False             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->_is_end = 0;

  /* "pyoctomap/octomap.pyx":376
 *         self._expected_version = 0
 * 
 *     def __init__(self, OcTree tree, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):             # <<<<<<<<<<<<<<
 *         if tree is None or tree.thisptr == NULL:
 *             self._is_end = True
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_max.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_min.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_max.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_min.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":391
 *         self._is_end = False
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_7__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_7__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_6__iter__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_6__iter__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 1);

  /* "pyoctomap/octomap.pyx":392
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":391
 *         self._is_end = False
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":394
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self._is_end or self._it == NULL or self._end == NULL:
 *             raise StopIteration
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_9__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_9__next__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_8__next__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_8__next__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  octomap::point3d __pyx_v_p;
  PyArrayObject *__pyx_v__pt = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd__pt;
  __Pyx_Buffer __pyx_pybuffer__pt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_error_without_exception = 0; /* StopIteration */
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 1);
  __pyx_pybuffer__pt.pybuffer.buf = NULL;
  __pyx_pybuffer__pt.refcount = 0;
  __pyx_pybuffernd__pt.data = NULL;
  __pyx_pybuffernd__pt.rcbuffer = &__pyx_pybuffer__pt;

  /* "pyoctomap/octomap.pyx":395
 * 
 *     def __next__(self):
 *         if self._is_end or self._it == NULL or self._end == NULL:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 */
  if (!__pyx_v_self->_is_end) {
  } else {
    __pyx_t_1 = __pyx_v_self->_is_end;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_it == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->_end == NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":396
 *     def __next__(self):
 *         if self._is_end or self._it == NULL or self._end == NULL:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "pyoctomap/octomap.pyx":395
 * 
 *     def __next__(self):
 *         if self._is_end or self._it == NULL or self._end == NULL:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 */
  }

  /* "pyoctomap/octomap.pyx":398
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 */
  __pyx_t_2 = (__pyx_v_self->_tree == Py_None);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }

  /* "pyoctomap/octomap.pyx":399
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or
 *             (<OcTree>self._tree).thisptr == NULL or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 *             self._is_end = True
 */
  __pyx_t_2 = (((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self->_tree)->thisptr == NULL);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L8_bool_binop_done;
  }

  /* "pyoctomap/octomap.pyx":400
 *         if (self._tree is None or
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             raise StopIteration
 */
  __pyx_t_2 = (((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self->_tree)->_mod_version != __pyx_v_self->_expected_version);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L8_bool_binop_done:;

  /* "pyoctomap/octomap.pyx":398
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 */
  if (unlikely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":401
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 *             self._is_end = True             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):
 */
    __pyx_v_self->_is_end = 1;

    /* "pyoctomap/octomap.pyx":402
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 *             self._is_end = True
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         if deref(self._it) == deref(self._end):
 *             self._is_end = True
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "pyoctomap/octomap.pyx":398
 *             raise StopIteration
 *         # Stop safely if tree was modified concurrently
 *         if (self._tree is None or             # <<<<<<<<<<<<<<
 *             (<OcTree>self._tree).thisptr == NULL or
 *             (<OcTree>self._tree)._mod_version != self._expected_version):
 */
  }

  /* "pyoctomap/octomap.pyx":403
 *             self._is_end = True
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             raise StopIteration
 */
  __pyx_t_1 = (((*__pyx_v_self->_it) == (*__pyx_v_self->_end)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":404
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):
 *             self._is_end = True             # <<<<<<<<<<<<<<
 *             raise StopIteration
 * 
 */
    __pyx_v_self->_is_end = 1;

    /* "pyoctomap/octomap.pyx":405
 *         if deref(self._it) == deref(self._end):
 *             self._is_end = True
 *             raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *         # Snapshot
 */
    __pyx_error_without_exception = 1;
    goto __pyx_L1_error;;

    /* "pyoctomap/octomap.pyx":403
 *             self._is_end = True
 *             raise StopIteration
 *         if deref(self._it) == deref(self._end):             # <<<<<<<<<<<<<<
 *             self._is_end = True
 *             raise StopIteration
 */
  }

  /* "pyoctomap/octomap.pyx":408
 * 
 *         # Snapshot
 *         cdef defs.point3d p = deref(self._it).getCoordinate()             # <<<<<<<<<<<<<<
 *         self._current_coord = [p.x(), p.y(), p.z()]
 *         self._current_size = deref(self._it).getSize()
 */
  __pyx_v_p = (*__pyx_v_self->_it).getCoordinate();

  /* "pyoctomap/octomap.pyx":409
 *         # Snapshot
 *         cdef defs.point3d p = deref(self._it).getCoordinate()
 *         self._current_coord = [p.x(), p.y(), p.z()]             # <<<<<<<<<<<<<<
 *         self._current_size = deref(self._it).getSize()
 *         self._current_depth = <int?>deref(self._it).getDepth()
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_p.x()); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_p.z()); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_3)) __PYX_ERR(1, 409, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(1, 409, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5)) __PYX_ERR(1, 409, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_6);
  __Pyx_GOTREF(__pyx_v_self->_current_coord);
  __Pyx_DECREF(__pyx_v_self->_current_coord);
  __pyx_v_self->_current_coord = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pyoctomap/octomap.pyx":410
 *         cdef defs.point3d p = deref(self._it).getCoordinate()
 *         self._current_coord = [p.x(), p.y(), p.z()]
 *         self._current_size = deref(self._it).getSize()             # <<<<<<<<<<<<<<
 *         self._current_depth = <int?>deref(self._it).getDepth()
 * 
 */
  try {
    __pyx_t_7 = (*__pyx_v_self->_it).getSize();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 410, __pyx_L1_error)
  }
  __pyx_v_self->_current_size = __pyx_t_7;

  /* "pyoctomap/octomap.pyx":411
 *         self._current_coord = [p.x(), p.y(), p.z()]
 *         self._current_size = deref(self._it).getSize()
 *         self._current_depth = <int?>deref(self._it).getDepth()             # <<<<<<<<<<<<<<
 * 
 *         # Capture node by searching at current coordinate (robust approach)
 */
  __pyx_v_self->_current_depth = ((int)(*__pyx_v_self->_it).getDepth());

  /* "pyoctomap/octomap.pyx":414
 * 
 *         # Capture node by searching at current coordinate (robust approach)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _pt = np.array(self._current_coord, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         self._current_node = self._tree.search(_pt)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_INCREF(__pyx_v_self->_current_coord);
  __Pyx_GIVEREF(__pyx_v_self->_current_coord);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_self->_current_coord)) __PYX_ERR(1, 414, __pyx_L1_error);
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 414, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd__pt.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v__pt = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd__pt.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 414, __pyx_L1_error)
    } else {__pyx_pybuffernd__pt.diminfo[0].strides = __pyx_pybuffernd__pt.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd__pt.diminfo[0].shape = __pyx_pybuffernd__pt.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_9 = 0;
  __pyx_v__pt = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "pyoctomap/octomap.pyx":415
 *         # Capture node by searching at current coordinate (robust approach)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _pt = np.array(self._current_coord, dtype=np.float64)
 *         self._current_node = self._tree.search(_pt)             # <<<<<<<<<<<<<<
 * 
 *         inc(deref(self._it))
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_tree, __pyx_n_s_search); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = NULL;
  __pyx_t_10 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_10 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, ((PyObject *)__pyx_v__pt)};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_8);
  __Pyx_GOTREF(__pyx_v_self->_current_node);
  __Pyx_DECREF(__pyx_v_self->_current_node);
  __pyx_v_self->_current_node = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "pyoctomap/octomap.pyx":417
 *         self._current_node = self._tree.search(_pt)
 * 
 *         inc(deref(self._it))             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  (void)((++(*__pyx_v_self->_it)));

  /* "pyoctomap/octomap.pyx":418
 * 
 *         inc(deref(self._it))
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def getCoordinate(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":394
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         if self._is_end or self._it == NULL or self._end == NULL:
 *             raise StopIteration
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__pt.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  if (!__pyx_error_without_exception) {
    __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__pt.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v__pt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":420
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_11getCoordinate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_11getCoordinate = {"getCoordinate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_11getCoordinate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_11getCoordinate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getCoordinate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getCoordinate", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getCoordinate", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_10getCoordinate(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_10getCoordinate(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getCoordinate", 1);

  /* "pyoctomap/octomap.pyx":421
 * 
 *     def getCoordinate(self):
 *         if self._current_coord is not None:             # <<<<<<<<<<<<<<
 *             return self._current_coord
 *         return [0.0, 0.0, 0.0]
 */
  __pyx_t_1 = (__pyx_v_self->_current_coord != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":422
 *     def getCoordinate(self):
 *         if self._current_coord is not None:
 *             return self._current_coord             # <<<<<<<<<<<<<<
 *         return [0.0, 0.0, 0.0]
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_self->_current_coord);
    __pyx_r = __pyx_v_self->_current_coord;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":421
 * 
 *     def getCoordinate(self):
 *         if self._current_coord is not None:             # <<<<<<<<<<<<<<
 *             return self._current_coord
 *         return [0.0, 0.0, 0.0]
 */
  }

  /* "pyoctomap/octomap.pyx":423
 *         if self._current_coord is not None:
 *             return self._current_coord
 *         return [0.0, 0.0, 0.0]             # <<<<<<<<<<<<<<
 * 
 *     def getSize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_float_0_0)) __PYX_ERR(1, 423, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 1, __pyx_float_0_0)) __PYX_ERR(1, 423, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 2, __pyx_float_0_0)) __PYX_ERR(1, 423, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":420
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.getCoordinate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":425
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_13getSize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_13getSize = {"getSize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_13getSize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_13getSize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getSize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getSize", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_12getSize(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_12getSize(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getSize", 1);

  /* "pyoctomap/octomap.pyx":426
 * 
 *     def getSize(self):
 *         return self._current_size             # <<<<<<<<<<<<<<
 * 
 *     def getDepth(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_current_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":425
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.getSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":428
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_15getDepth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_15getDepth = {"getDepth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_15getDepth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_15getDepth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDepth (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getDepth", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getDepth", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_14getDepth(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_14getDepth(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getDepth", 1);

  /* "pyoctomap/octomap.pyx":429
 * 
 *     def getDepth(self):
 *         return self._current_depth             # <<<<<<<<<<<<<<
 * 
 *     def isLeaf(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_current_depth); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":428
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.getDepth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":431
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_17isLeaf(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_21SimpleLeafBBXIterator_16isLeaf, "Check if current node is a leaf");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_17isLeaf = {"isLeaf", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_17isLeaf, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_21SimpleLeafBBXIterator_16isLeaf};
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_17isLeaf(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isLeaf (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("isLeaf", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "isLeaf", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_16isLeaf(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_16isLeaf(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isLeaf", 1);

  /* "pyoctomap/octomap.pyx":433
 *     def isLeaf(self):
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:             # <<<<<<<<<<<<<<
 *             return True
 *         return not self._tree.nodeHasChildren(self._current_node)
 */
  __pyx_t_1 = (__pyx_v_self->_current_node == Py_None);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":434
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:
 *             return True             # <<<<<<<<<<<<<<
 *         return not self._tree.nodeHasChildren(self._current_node)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":433
 *     def isLeaf(self):
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:             # <<<<<<<<<<<<<<
 *             return True
 *         return not self._tree.nodeHasChildren(self._current_node)
 */
  }

  /* "pyoctomap/octomap.pyx":435
 *         if self._current_node is None:
 *             return True
 *         return not self._tree.nodeHasChildren(self._current_node)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_tree, __pyx_n_s_nodeHasChildren); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_self->_current_node};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":431
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.isLeaf", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":437
 *         return not self._tree.nodeHasChildren(self._current_node)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def current_node(self):
 *         return self._current_node
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_12current_node_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_12current_node_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_12current_node___get__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_12current_node___get__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "pyoctomap/octomap.pyx":439
 *     @property
 *     def current_node(self):
 *         return self._current_node             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_current_node);
  __pyx_r = __pyx_v_self->_current_node;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":437
 *         return not self._tree.nodeHasChildren(self._current_node)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def current_node(self):
 *         return self._current_node
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":441
 *         return self._current_node
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def is_end(self):
 *         return self._is_end
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_6is_end_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_6is_end_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_6is_end___get__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_6is_end___get__(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "pyoctomap/octomap.pyx":443
 *     @property
 *     def is_end(self):
 *         return self._is_end             # <<<<<<<<<<<<<<
 * 
 * def _octree_read(filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_is_end); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":441
 *         return self._current_node
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def is_end(self):
 *         return self._is_end
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.is_end.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_19__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_19__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_18__reduce_cython__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_21__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_21__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_20__setstate_cython__(((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_21SimpleLeafBBXIterator_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.SimpleLeafBBXIterator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":445
 *         return self._is_end
 * 
 * def _octree_read(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read the file header, create the appropriate class and deserialize.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_1_octree_read(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap__octree_read, "\n    Read the file header, create the appropriate class and deserialize.\n    This creates a new octree which you need to delete yourself.\n    ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_1_octree_read = {"_octree_read", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_1_octree_read, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap__octree_read};
static PyObject *__pyx_pw_9pyoctomap_7octomap_1_octree_read(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_octree_read (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filename)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 445, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_octree_read") < 0)) __PYX_ERR(1, 445, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_octree_read", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 445, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap._octree_read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap__octree_read(__pyx_self, __pyx_v_filename);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap__octree_read(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  std::istringstream __pyx_v_iss;
  struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_tree = 0;
  std::string __pyx_v_c_filename;
  octomap::OcTree *__pyx_v_new_tree;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  char *__pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_octree_read", 1);

  /* "pyoctomap/octomap.pyx":451
 *     """
 *     cdef defs.istringstream iss
 *     cdef OcTree tree = OcTree(0.1)             # <<<<<<<<<<<<<<
 *     cdef string c_filename = filename.encode('utf-8')
 *     cdef defs.OcTree* new_tree = NULL
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree), __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tree = ((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":452
 *     cdef defs.istringstream iss
 *     cdef OcTree tree = OcTree(0.1)
 *     cdef string c_filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *     cdef defs.OcTree* new_tree = NULL
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_utf_8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_c_filename = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "pyoctomap/octomap.pyx":453
 *     cdef OcTree tree = OcTree(0.1)
 *     cdef string c_filename = filename.encode('utf-8')
 *     cdef defs.OcTree* new_tree = NULL             # <<<<<<<<<<<<<<
 * 
 *     if filename.startswith(b"# Octomap OcTree file"):
 */
  __pyx_v_new_tree = NULL;

  /* "pyoctomap/octomap.pyx":455
 *     cdef defs.OcTree* new_tree = NULL
 * 
 *     if filename.startswith(b"# Octomap OcTree file"):             # <<<<<<<<<<<<<<
 *         iss.str(string(<char*?>filename, len(filename)))
 *         new_tree = <defs.OcTree*>tree.thisptr.read(<defs.istream&?>iss)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_startswith); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_b_Octomap_OcTree_file};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "pyoctomap/octomap.pyx":456
 * 
 *     if filename.startswith(b"# Octomap OcTree file"):
 *         iss.str(string(<char*?>filename, len(filename)))             # <<<<<<<<<<<<<<
 *         new_tree = <defs.OcTree*>tree.thisptr.read(<defs.istream&?>iss)
 *     else:
 */
    __pyx_t_7 = __Pyx_PyObject_AsWritableString(__pyx_v_filename); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 456, __pyx_L1_error)
    __pyx_t_8 = PyObject_Length(__pyx_v_filename); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 456, __pyx_L1_error)
    try {
      __pyx_t_5 = std::string(((char *)__pyx_t_7), __pyx_t_8);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 456, __pyx_L1_error)
    }
    __pyx_v_iss.str(__pyx_t_5);

    /* "pyoctomap/octomap.pyx":457
 *     if filename.startswith(b"# Octomap OcTree file"):
 *         iss.str(string(<char*?>filename, len(filename)))
 *         new_tree = <defs.OcTree*>tree.thisptr.read(<defs.istream&?>iss)             # <<<<<<<<<<<<<<
 *     else:
 *         new_tree = <defs.OcTree*>tree.thisptr.read(c_filename)
 */
    __pyx_v_new_tree = ((octomap::OcTree *)__pyx_v_tree->thisptr->read(((std::istream &)__pyx_v_iss)));

    /* "pyoctomap/octomap.pyx":455
 *     cdef defs.OcTree* new_tree = NULL
 * 
 *     if filename.startswith(b"# Octomap OcTree file"):             # <<<<<<<<<<<<<<
 *         iss.str(string(<char*?>filename, len(filename)))
 *         new_tree = <defs.OcTree*>tree.thisptr.read(<defs.istream&?>iss)
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":459
 *         new_tree = <defs.OcTree*>tree.thisptr.read(<defs.istream&?>iss)
 *     else:
 *         new_tree = <defs.OcTree*>tree.thisptr.read(c_filename)             # <<<<<<<<<<<<<<
 * 
 *     if new_tree != NULL:
 */
  /*else*/ {
    __pyx_v_new_tree = ((octomap::OcTree *)__pyx_v_tree->thisptr->read(__pyx_v_c_filename));
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":461
 *         new_tree = <defs.OcTree*>tree.thisptr.read(c_filename)
 * 
 *     if new_tree != NULL:             # <<<<<<<<<<<<<<
 *         # Clean up the original tree and replace with the loaded one
 *         if tree.thisptr != NULL:
 */
  __pyx_t_6 = (__pyx_v_new_tree != NULL);
  if (__pyx_t_6) {

    /* "pyoctomap/octomap.pyx":463
 *     if new_tree != NULL:
 *         # Clean up the original tree and replace with the loaded one
 *         if tree.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del tree.thisptr
 *         tree.thisptr = new_tree
 */
    __pyx_t_6 = (__pyx_v_tree->thisptr != NULL);
    if (__pyx_t_6) {

      /* "pyoctomap/octomap.pyx":464
 *         # Clean up the original tree and replace with the loaded one
 *         if tree.thisptr != NULL:
 *             del tree.thisptr             # <<<<<<<<<<<<<<
 *         tree.thisptr = new_tree
 *         tree.owner = True
 */
      delete __pyx_v_tree->thisptr;

      /* "pyoctomap/octomap.pyx":463
 *     if new_tree != NULL:
 *         # Clean up the original tree and replace with the loaded one
 *         if tree.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del tree.thisptr
 *         tree.thisptr = new_tree
 */
    }

    /* "pyoctomap/octomap.pyx":465
 *         if tree.thisptr != NULL:
 *             del tree.thisptr
 *         tree.thisptr = new_tree             # <<<<<<<<<<<<<<
 *         tree.owner = True
 * 
 */
    __pyx_v_tree->thisptr = __pyx_v_new_tree;

    /* "pyoctomap/octomap.pyx":466
 *             del tree.thisptr
 *         tree.thisptr = new_tree
 *         tree.owner = True             # <<<<<<<<<<<<<<
 * 
 *     return tree
 */
    __pyx_v_tree->owner = 1;

    /* "pyoctomap/octomap.pyx":461
 *         new_tree = <defs.OcTree*>tree.thisptr.read(c_filename)
 * 
 *     if new_tree != NULL:             # <<<<<<<<<<<<<<
 *         # Clean up the original tree and replace with the loaded one
 *         if tree.thisptr != NULL:
 */
  }

  /* "pyoctomap/octomap.pyx":468
 *         tree.owner = True
 * 
 *     return tree             # <<<<<<<<<<<<<<
 * 
 * cdef class OcTree:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_tree);
  __pyx_r = ((PyObject *)__pyx_v_tree);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":445
 *         return self._is_end
 * 
 * def _octree_read(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read the file header, create the appropriate class and deserialize.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyoctomap.octomap._octree_read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":479
 *     cdef unsigned long _mod_version
 * 
 *     def __cinit__(self, arg):             # <<<<<<<<<<<<<<
 *         import numbers
 *         self.owner = True
 */

/* Python wrapper */
static int __pyx_pw_9pyoctomap_7octomap_6OcTree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_9pyoctomap_7octomap_6OcTree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_arg)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 479, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(1, 479, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 479, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree___cinit__(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_9pyoctomap_7octomap_6OcTree___cinit__(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_v_numbers = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  octomap::OcTree *__pyx_t_4;
  char *__pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "pyoctomap/octomap.pyx":480
 * 
 *     def __cinit__(self, arg):
 *         import numbers             # <<<<<<<<<<<<<<
 *         self.owner = True
 *         self.edtptr = NULL  # Initialize to NULL
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_numbers, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_numbers = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":481
 *     def __cinit__(self, arg):
 *         import numbers
 *         self.owner = True             # <<<<<<<<<<<<<<
 *         self.edtptr = NULL  # Initialize to NULL
 *         self._mod_version = 0
 */
  __pyx_v_self->owner = 1;

  /* "pyoctomap/octomap.pyx":482
 *         import numbers
 *         self.owner = True
 *         self.edtptr = NULL  # Initialize to NULL             # <<<<<<<<<<<<<<
 *         self._mod_version = 0
 *         if isinstance(arg, numbers.Number):
 */
  __pyx_v_self->edtptr = NULL;

  /* "pyoctomap/octomap.pyx":483
 *         self.owner = True
 *         self.edtptr = NULL  # Initialize to NULL
 *         self._mod_version = 0             # <<<<<<<<<<<<<<
 *         if isinstance(arg, numbers.Number):
 *             self.thisptr = new defs.OcTree(<double?>arg)
 */
  __pyx_v_self->_mod_version = 0;

  /* "pyoctomap/octomap.pyx":484
 *         self.edtptr = NULL  # Initialize to NULL
 *         self._mod_version = 0
 *         if isinstance(arg, numbers.Number):             # <<<<<<<<<<<<<<
 *             self.thisptr = new defs.OcTree(<double?>arg)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_numbers, __pyx_n_s_Number); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_arg, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pyoctomap/octomap.pyx":485
 *         self._mod_version = 0
 *         if isinstance(arg, numbers.Number):
 *             self.thisptr = new defs.OcTree(<double?>arg)             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new defs.OcTree(string(<char*?>arg))
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_arg); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 485, __pyx_L1_error)
    try {
      __pyx_t_4 = new octomap::OcTree(((double)__pyx_t_3));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 485, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_4;

    /* "pyoctomap/octomap.pyx":484
 *         self.edtptr = NULL  # Initialize to NULL
 *         self._mod_version = 0
 *         if isinstance(arg, numbers.Number):             # <<<<<<<<<<<<<<
 *             self.thisptr = new defs.OcTree(<double?>arg)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":487
 *             self.thisptr = new defs.OcTree(<double?>arg)
 *         else:
 *             self.thisptr = new defs.OcTree(string(<char*?>arg))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_AsWritableString(__pyx_v_arg); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(1, 487, __pyx_L1_error)
    try {
      __pyx_t_6 = std::string(((char *)__pyx_t_5));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 487, __pyx_L1_error)
    }
    try {
      __pyx_t_4 = new octomap::OcTree(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 487, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_4;
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":479
 *     cdef unsigned long _mod_version
 * 
 *     def __cinit__(self, arg):             # <<<<<<<<<<<<<<
 *         import numbers
 *         self.owner = True
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_numbers);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":489
 *             self.thisptr = new defs.OcTree(string(<char*?>arg))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         # Clean up DynamicEDT first (it may reference the tree)
 *         if self.edtptr != NULL:
 */

/* Python wrapper */
static void __pyx_pw_9pyoctomap_7octomap_6OcTree_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_9pyoctomap_7octomap_6OcTree_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_9pyoctomap_7octomap_6OcTree_2__dealloc__(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_9pyoctomap_7octomap_6OcTree_2__dealloc__(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  int __pyx_t_1;
  int __pyx_t_2;

  /* "pyoctomap/octomap.pyx":491
 *     def __dealloc__(self):
 *         # Clean up DynamicEDT first (it may reference the tree)
 *         if self.edtptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.edtptr
 *             self.edtptr = NULL
 */
  __pyx_t_1 = (__pyx_v_self->edtptr != NULL);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":492
 *         # Clean up DynamicEDT first (it may reference the tree)
 *         if self.edtptr != NULL:
 *             del self.edtptr             # <<<<<<<<<<<<<<
 *             self.edtptr = NULL
 * 
 */
    delete __pyx_v_self->edtptr;

    /* "pyoctomap/octomap.pyx":493
 *         if self.edtptr != NULL:
 *             del self.edtptr
 *             self.edtptr = NULL             # <<<<<<<<<<<<<<
 * 
 *         # Then clean up the OcTree itself
 */
    __pyx_v_self->edtptr = NULL;

    /* "pyoctomap/octomap.pyx":491
 *     def __dealloc__(self):
 *         # Clean up DynamicEDT first (it may reference the tree)
 *         if self.edtptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.edtptr
 *             self.edtptr = NULL
 */
  }

  /* "pyoctomap/octomap.pyx":496
 * 
 *         # Then clean up the OcTree itself
 *         if self.owner and self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *             self.thisptr = NULL
 */
  if (__pyx_v_self->owner) {
  } else {
    __pyx_t_1 = __pyx_v_self->owner;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->thisptr != NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":497
 *         # Then clean up the OcTree itself
 *         if self.owner and self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr = NULL
 * 
 */
    delete __pyx_v_self->thisptr;

    /* "pyoctomap/octomap.pyx":498
 *         if self.owner and self.thisptr != NULL:
 *             del self.thisptr
 *             self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def adjustKeyAtDepth(self, OcTreeKey key, depth):
 */
    __pyx_v_self->thisptr = NULL;

    /* "pyoctomap/octomap.pyx":496
 * 
 *         # Then clean up the OcTree itself
 *         if self.owner and self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *             self.thisptr = NULL
 */
  }

  /* "pyoctomap/octomap.pyx":489
 *             self.thisptr = new defs.OcTree(string(<char*?>arg))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         # Clean up DynamicEDT first (it may reference the tree)
 *         if self.edtptr != NULL:
 */

  /* function exit code */
}

/* "pyoctomap/octomap.pyx":500
 *             self.thisptr = NULL
 * 
 *     def adjustKeyAtDepth(self, OcTreeKey key, depth):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         key_in.k[0] = key[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_5adjustKeyAtDepth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_5adjustKeyAtDepth = {"adjustKeyAtDepth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_5adjustKeyAtDepth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_5adjustKeyAtDepth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key = 0;
  PyObject *__pyx_v_depth = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adjustKeyAtDepth (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_depth,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 500, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_depth)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 500, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("adjustKeyAtDepth", 1, 2, 2, 1); __PYX_ERR(1, 500, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "adjustKeyAtDepth") < 0)) __PYX_ERR(1, 500, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_key = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)values[0]);
    __pyx_v_depth = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("adjustKeyAtDepth", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 500, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.adjustKeyAtDepth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9pyoctomap_7octomap_OcTreeKey, 1, "key", 0))) __PYX_ERR(1, 500, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_4adjustKeyAtDepth(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_key, __pyx_v_depth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_4adjustKeyAtDepth(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key, PyObject *__pyx_v_depth) {
  struct octomap::OcTreeKey __pyx_v_key_in;
  struct octomap::OcTreeKey __pyx_v_key_out;
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_res = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  octomap::key_type __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adjustKeyAtDepth", 1);

  /* "pyoctomap/octomap.pyx":502
 *     def adjustKeyAtDepth(self, OcTreeKey key, depth):
 *         cdef defs.OcTreeKey key_in
 *         key_in.k[0] = key[0]             # <<<<<<<<<<<<<<
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_2 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 502, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_key_in.k[0]) = __pyx_t_2;

  /* "pyoctomap/octomap.pyx":503
 *         cdef defs.OcTreeKey key_in
 *         key_in.k[0] = key[0]
 *         key_in.k[1] = key[1]             # <<<<<<<<<<<<<<
 *         key_in.k[2] = key[2]
 *         cdef defs.OcTreeKey key_out = self.thisptr.adjustKeyAtDepth(key_in, <int?>depth)
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_2 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_key_in.k[1]) = __pyx_t_2;

  /* "pyoctomap/octomap.pyx":504
 *         key_in.k[0] = key[0]
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_out = self.thisptr.adjustKeyAtDepth(key_in, <int?>depth)
 *         res = OcTreeKey()
 */
  __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_2 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_key_in.k[2]) = __pyx_t_2;

  /* "pyoctomap/octomap.pyx":505
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]
 *         cdef defs.OcTreeKey key_out = self.thisptr.adjustKeyAtDepth(key_in, <int?>depth)             # <<<<<<<<<<<<<<
 *         res = OcTreeKey()
 *         res.thisptr.k[0] = key_out.k[0]
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_depth); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 505, __pyx_L1_error)
  __pyx_v_key_out = __pyx_v_self->thisptr->adjustKeyAtDepth(__pyx_v_key_in, ((int)__pyx_t_3));

  /* "pyoctomap/octomap.pyx":506
 *         key_in.k[2] = key[2]
 *         cdef defs.OcTreeKey key_out = self.thisptr.adjustKeyAtDepth(key_in, <int?>depth)
 *         res = OcTreeKey()             # <<<<<<<<<<<<<<
 *         res.thisptr.k[0] = key_out.k[0]
 *         res.thisptr.k[1] = key_out.k[1]
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeKey)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_res = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":507
 *         cdef defs.OcTreeKey key_out = self.thisptr.adjustKeyAtDepth(key_in, <int?>depth)
 *         res = OcTreeKey()
 *         res.thisptr.k[0] = key_out.k[0]             # <<<<<<<<<<<<<<
 *         res.thisptr.k[1] = key_out.k[1]
 *         res.thisptr.k[2] = key_out.k[2]
 */
  (__pyx_v_res->thisptr.k[0]) = (__pyx_v_key_out.k[0]);

  /* "pyoctomap/octomap.pyx":508
 *         res = OcTreeKey()
 *         res.thisptr.k[0] = key_out.k[0]
 *         res.thisptr.k[1] = key_out.k[1]             # <<<<<<<<<<<<<<
 *         res.thisptr.k[2] = key_out.k[2]
 *         return res
 */
  (__pyx_v_res->thisptr.k[1]) = (__pyx_v_key_out.k[1]);

  /* "pyoctomap/octomap.pyx":509
 *         res.thisptr.k[0] = key_out.k[0]
 *         res.thisptr.k[1] = key_out.k[1]
 *         res.thisptr.k[2] = key_out.k[2]             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  (__pyx_v_res->thisptr.k[2]) = (__pyx_v_key_out.k[2]);

  /* "pyoctomap/octomap.pyx":510
 *         res.thisptr.k[1] = key_out.k[1]
 *         res.thisptr.k[2] = key_out.k[2]
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def bbxSet(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":500
 *             self.thisptr = NULL
 * 
 *     def adjustKeyAtDepth(self, OcTreeKey key, depth):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         key_in.k[0] = key[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.adjustKeyAtDepth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":512
 *         return res
 * 
 *     def bbxSet(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.bbxSet()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_7bbxSet(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_7bbxSet = {"bbxSet", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_7bbxSet, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_7bbxSet(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bbxSet (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("bbxSet", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "bbxSet", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_6bbxSet(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_6bbxSet(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bbxSet", 1);

  /* "pyoctomap/octomap.pyx":513
 * 
 *     def bbxSet(self):
 *         return self.thisptr.bbxSet()             # <<<<<<<<<<<<<<
 * 
 *     def calcNumNodes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->bbxSet()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":512
 *         return res
 * 
 *     def bbxSet(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.bbxSet()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.bbxSet", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":515
 *         return self.thisptr.bbxSet()
 * 
 *     def calcNumNodes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.calcNumNodes()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_9calcNumNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_9calcNumNodes = {"calcNumNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_9calcNumNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_9calcNumNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcNumNodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("calcNumNodes", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "calcNumNodes", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_8calcNumNodes(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_8calcNumNodes(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calcNumNodes", 1);

  /* "pyoctomap/octomap.pyx":516
 * 
 *     def calcNumNodes(self):
 *         return self.thisptr.calcNumNodes()             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->calcNumNodes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":515
 *         return self.thisptr.bbxSet()
 * 
 *     def calcNumNodes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.calcNumNodes()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.calcNumNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":518
 *         return self.thisptr.calcNumNodes()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clear()
 *         self._mod_version += 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_11clear(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_11clear = {"clear", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_11clear, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_11clear(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("clear", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "clear", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_10clear(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_10clear(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 1);

  /* "pyoctomap/octomap.pyx":519
 * 
 *     def clear(self):
 *         self.thisptr.clear()             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 * 
 */
  __pyx_v_self->thisptr->clear();

  /* "pyoctomap/octomap.pyx":520
 *     def clear(self):
 *         self.thisptr.clear()
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 * 
 *     def coordToKey(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":518
 *         return self.thisptr.calcNumNodes()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clear()
 *         self._mod_version += 1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":522
 *         self._mod_version += 1
 * 
 *     def coordToKey(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key
 *         if depth is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_13coordToKey(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_13coordToKey = {"coordToKey", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_13coordToKey, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_13coordToKey(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_coord = 0;
  PyObject *__pyx_v_depth = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("coordToKey (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coord,&__pyx_n_s_depth,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_coord)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 522, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_depth);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 522, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "coordToKey") < 0)) __PYX_ERR(1, 522, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coord = ((PyArrayObject *)values[0]);
    __pyx_v_depth = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("coordToKey", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 522, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.coordToKey", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coord), __pyx_ptype_5numpy_ndarray, 1, "coord", 0))) __PYX_ERR(1, 522, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_12coordToKey(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_coord, __pyx_v_depth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_12coordToKey(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_coord, PyObject *__pyx_v_depth) {
  struct octomap::OcTreeKey __pyx_v_key;
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_res = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coord;
  __Pyx_Buffer __pyx_pybuffer_coord;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  octomap::point3d __pyx_t_6;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("coordToKey", 1);
  __pyx_pybuffer_coord.pybuffer.buf = NULL;
  __pyx_pybuffer_coord.refcount = 0;
  __pyx_pybuffernd_coord.data = NULL;
  __pyx_pybuffernd_coord.rcbuffer = &__pyx_pybuffer_coord;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coord.rcbuffer->pybuffer, (PyObject*)__pyx_v_coord, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 522, __pyx_L1_error)
  }
  __pyx_pybuffernd_coord.diminfo[0].strides = __pyx_pybuffernd_coord.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coord.diminfo[0].shape = __pyx_pybuffernd_coord.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":524
 *     def coordToKey(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):
 *         cdef defs.OcTreeKey key
 *         if depth is None:             # <<<<<<<<<<<<<<
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],
 *                                                        coord[1],
 */
  __pyx_t_1 = (__pyx_v_depth == Py_None);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":525
 *         cdef defs.OcTreeKey key
 *         if depth is None:
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],             # <<<<<<<<<<<<<<
 *                                                        coord[1],
 *                                                        coord[2]))
 */
    __pyx_t_2 = 0;
    __pyx_t_3 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 525, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":526
 *         if depth is None:
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],
 *                                                        coord[1],             # <<<<<<<<<<<<<<
 *                                                        coord[2]))
 *         else:
 */
    __pyx_t_4 = 1;
    __pyx_t_3 = -1;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 526, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":527
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],
 *                                                        coord[1],
 *                                                        coord[2]))             # <<<<<<<<<<<<<<
 *         else:
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],
 */
    __pyx_t_5 = 2;
    __pyx_t_3 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 527, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":525
 *         cdef defs.OcTreeKey key
 *         if depth is None:
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],             # <<<<<<<<<<<<<<
 *                                                        coord[1],
 *                                                        coord[2]))
 */
    try {
      __pyx_t_6 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_coord.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_coord.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_coord.diminfo[0].strides)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 525, __pyx_L1_error)
    }
    __pyx_v_key = __pyx_v_self->thisptr->coordToKey(__pyx_t_6);

    /* "pyoctomap/octomap.pyx":524
 *     def coordToKey(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):
 *         cdef defs.OcTreeKey key
 *         if depth is None:             # <<<<<<<<<<<<<<
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],
 *                                                        coord[1],
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":529
 *                                                        coord[2]))
 *         else:
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],             # <<<<<<<<<<<<<<
 *                                                        coord[1],
 *                                                        coord[2]),
 */
  /*else*/ {
    __pyx_t_5 = 0;
    __pyx_t_3 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 529, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":530
 *         else:
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],
 *                                                        coord[1],             # <<<<<<<<<<<<<<
 *                                                        coord[2]),
 *                                           <unsigned int?>depth)
 */
    __pyx_t_4 = 1;
    __pyx_t_3 = -1;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 530, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":531
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],
 *                                                        coord[1],
 *                                                        coord[2]),             # <<<<<<<<<<<<<<
 *                                           <unsigned int?>depth)
 *         res = OcTreeKey()
 */
    __pyx_t_2 = 2;
    __pyx_t_3 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 531, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":529
 *                                                        coord[2]))
 *         else:
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],             # <<<<<<<<<<<<<<
 *                                                        coord[1],
 *                                                        coord[2]),
 */
    try {
      __pyx_t_6 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_coord.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_coord.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_coord.diminfo[0].strides)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 529, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":532
 *                                                        coord[1],
 *                                                        coord[2]),
 *                                           <unsigned int?>depth)             # <<<<<<<<<<<<<<
 *         res = OcTreeKey()
 *         res.thisptr.k[0] = key.k[0]
 */
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_v_depth); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 532, __pyx_L1_error)

    /* "pyoctomap/octomap.pyx":529
 *                                                        coord[2]))
 *         else:
 *             key = self.thisptr.coordToKey(defs.point3d(coord[0],             # <<<<<<<<<<<<<<
 *                                                        coord[1],
 *                                                        coord[2]),
 */
    __pyx_v_key = __pyx_v_self->thisptr->coordToKey(__pyx_t_6, ((unsigned int)__pyx_t_7));
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":533
 *                                                        coord[2]),
 *                                           <unsigned int?>depth)
 *         res = OcTreeKey()             # <<<<<<<<<<<<<<
 *         res.thisptr.k[0] = key.k[0]
 *         res.thisptr.k[1] = key.k[1]
 */
  __pyx_t_8 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeKey)); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_res = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "pyoctomap/octomap.pyx":534
 *                                           <unsigned int?>depth)
 *         res = OcTreeKey()
 *         res.thisptr.k[0] = key.k[0]             # <<<<<<<<<<<<<<
 *         res.thisptr.k[1] = key.k[1]
 *         res.thisptr.k[2] = key.k[2]
 */
  (__pyx_v_res->thisptr.k[0]) = (__pyx_v_key.k[0]);

  /* "pyoctomap/octomap.pyx":535
 *         res = OcTreeKey()
 *         res.thisptr.k[0] = key.k[0]
 *         res.thisptr.k[1] = key.k[1]             # <<<<<<<<<<<<<<
 *         res.thisptr.k[2] = key.k[2]
 *         return res
 */
  (__pyx_v_res->thisptr.k[1]) = (__pyx_v_key.k[1]);

  /* "pyoctomap/octomap.pyx":536
 *         res.thisptr.k[0] = key.k[0]
 *         res.thisptr.k[1] = key.k[1]
 *         res.thisptr.k[2] = key.k[2]             # <<<<<<<<<<<<<<
 *         return res
 * 
 */
  (__pyx_v_res->thisptr.k[2]) = (__pyx_v_key.k[2]);

  /* "pyoctomap/octomap.pyx":537
 *         res.thisptr.k[1] = key.k[1]
 *         res.thisptr.k[2] = key.k[2]
 *         return res             # <<<<<<<<<<<<<<
 * 
 *     def coordToKeyChecked(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_res);
  __pyx_r = ((PyObject *)__pyx_v_res);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":522
 *         self._mod_version += 1
 * 
 *     def coordToKey(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key
 *         if depth is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coord.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.coordToKey", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coord.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":539
 *         return res
 * 
 *     def coordToKeyChecked(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key
 *         cdef cppbool chk
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_15coordToKeyChecked(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_15coordToKeyChecked = {"coordToKeyChecked", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_15coordToKeyChecked, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_15coordToKeyChecked(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_coord = 0;
  PyObject *__pyx_v_depth = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("coordToKeyChecked (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coord,&__pyx_n_s_depth,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_coord)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 539, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_depth);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 539, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "coordToKeyChecked") < 0)) __PYX_ERR(1, 539, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coord = ((PyArrayObject *)values[0]);
    __pyx_v_depth = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("coordToKeyChecked", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 539, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.coordToKeyChecked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coord), __pyx_ptype_5numpy_ndarray, 1, "coord", 0))) __PYX_ERR(1, 539, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_14coordToKeyChecked(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_coord, __pyx_v_depth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_14coordToKeyChecked(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_coord, PyObject *__pyx_v_depth) {
  struct octomap::OcTreeKey __pyx_v_key;
  bool __pyx_v_chk;
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_res = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coord;
  __Pyx_Buffer __pyx_pybuffer_coord;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  octomap::point3d __pyx_t_6;
  unsigned int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("coordToKeyChecked", 1);
  __pyx_pybuffer_coord.pybuffer.buf = NULL;
  __pyx_pybuffer_coord.refcount = 0;
  __pyx_pybuffernd_coord.data = NULL;
  __pyx_pybuffernd_coord.rcbuffer = &__pyx_pybuffer_coord;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coord.rcbuffer->pybuffer, (PyObject*)__pyx_v_coord, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 539, __pyx_L1_error)
  }
  __pyx_pybuffernd_coord.diminfo[0].strides = __pyx_pybuffernd_coord.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coord.diminfo[0].shape = __pyx_pybuffernd_coord.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":542
 *         cdef defs.OcTreeKey key
 *         cdef cppbool chk
 *         if depth is None:             # <<<<<<<<<<<<<<
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],
 *                                                               coord[1],
 */
  __pyx_t_1 = (__pyx_v_depth == Py_None);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":543
 *         cdef cppbool chk
 *         if depth is None:
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],             # <<<<<<<<<<<<<<
 *                                                               coord[1],
 *                                                               coord[2]),
 */
    __pyx_t_2 = 0;
    __pyx_t_3 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 543, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":544
 *         if depth is None:
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],
 *                                                               coord[1],             # <<<<<<<<<<<<<<
 *                                                               coord[2]),
 *                                                  key)
 */
    __pyx_t_4 = 1;
    __pyx_t_3 = -1;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 544, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":545
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],
 *                                                               coord[1],
 *                                                               coord[2]),             # <<<<<<<<<<<<<<
 *                                                  key)
 *         else:
 */
    __pyx_t_5 = 2;
    __pyx_t_3 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 545, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":543
 *         cdef cppbool chk
 *         if depth is None:
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],             # <<<<<<<<<<<<<<
 *                                                               coord[1],
 *                                                               coord[2]),
 */
    try {
      __pyx_t_6 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_coord.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_coord.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_coord.diminfo[0].strides)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 543, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":546
 *                                                               coord[1],
 *                                                               coord[2]),
 *                                                  key)             # <<<<<<<<<<<<<<
 *         else:
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],
 */
    __pyx_v_chk = __pyx_v_self->thisptr->coordToKeyChecked(__pyx_t_6, __pyx_v_key);

    /* "pyoctomap/octomap.pyx":542
 *         cdef defs.OcTreeKey key
 *         cdef cppbool chk
 *         if depth is None:             # <<<<<<<<<<<<<<
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],
 *                                                               coord[1],
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":548
 *                                                  key)
 *         else:
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],             # <<<<<<<<<<<<<<
 *                                                               coord[1],
 *                                                               coord[2]),
 */
  /*else*/ {
    __pyx_t_5 = 0;
    __pyx_t_3 = -1;
    if (__pyx_t_5 < 0) {
      __pyx_t_5 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 548, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":549
 *         else:
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],
 *                                                               coord[1],             # <<<<<<<<<<<<<<
 *                                                               coord[2]),
 *                                                  <unsigned int?>depth,
 */
    __pyx_t_4 = 1;
    __pyx_t_3 = -1;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 549, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":550
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],
 *                                                               coord[1],
 *                                                               coord[2]),             # <<<<<<<<<<<<<<
 *                                                  <unsigned int?>depth,
 *                                                  key)
 */
    __pyx_t_2 = 2;
    __pyx_t_3 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_pybuffernd_coord.diminfo[0].shape;
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_coord.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(1, 550, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":548
 *                                                  key)
 *         else:
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],             # <<<<<<<<<<<<<<
 *                                                               coord[1],
 *                                                               coord[2]),
 */
    try {
      __pyx_t_6 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_coord.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_coord.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_coord.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_coord.diminfo[0].strides)));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 548, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":551
 *                                                               coord[1],
 *                                                               coord[2]),
 *                                                  <unsigned int?>depth,             # <<<<<<<<<<<<<<
 *                                                  key)
 *         if chk:
 */
    __pyx_t_7 = __Pyx_PyInt_As_unsigned_int(__pyx_v_depth); if (unlikely((__pyx_t_7 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 551, __pyx_L1_error)

    /* "pyoctomap/octomap.pyx":548
 *                                                  key)
 *         else:
 *             chk = self.thisptr.coordToKeyChecked(defs.point3d(coord[0],             # <<<<<<<<<<<<<<
 *                                                               coord[1],
 *                                                               coord[2]),
 */
    __pyx_v_chk = __pyx_v_self->thisptr->coordToKeyChecked(__pyx_t_6, ((unsigned int)__pyx_t_7), __pyx_v_key);
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":553
 *                                                  <unsigned int?>depth,
 *                                                  key)
 *         if chk:             # <<<<<<<<<<<<<<
 *             res = OcTreeKey()
 *             res.thisptr.k[0] = key.k[0]
 */
  __pyx_t_1 = (__pyx_v_chk != 0);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":554
 *                                                  key)
 *         if chk:
 *             res = OcTreeKey()             # <<<<<<<<<<<<<<
 *             res.thisptr.k[0] = key.k[0]
 *             res.thisptr.k[1] = key.k[1]
 */
    __pyx_t_8 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeKey)); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_v_res = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_t_8);
    __pyx_t_8 = 0;

    /* "pyoctomap/octomap.pyx":555
 *         if chk:
 *             res = OcTreeKey()
 *             res.thisptr.k[0] = key.k[0]             # <<<<<<<<<<<<<<
 *             res.thisptr.k[1] = key.k[1]
 *             res.thisptr.k[2] = key.k[2]
 */
    (__pyx_v_res->thisptr.k[0]) = (__pyx_v_key.k[0]);

    /* "pyoctomap/octomap.pyx":556
 *             res = OcTreeKey()
 *             res.thisptr.k[0] = key.k[0]
 *             res.thisptr.k[1] = key.k[1]             # <<<<<<<<<<<<<<
 *             res.thisptr.k[2] = key.k[2]
 *             return chk, res
 */
    (__pyx_v_res->thisptr.k[1]) = (__pyx_v_key.k[1]);

    /* "pyoctomap/octomap.pyx":557
 *             res.thisptr.k[0] = key.k[0]
 *             res.thisptr.k[1] = key.k[1]
 *             res.thisptr.k[2] = key.k[2]             # <<<<<<<<<<<<<<
 *             return chk, res
 *         else:
 */
    (__pyx_v_res->thisptr.k[2]) = (__pyx_v_key.k[2]);

    /* "pyoctomap/octomap.pyx":558
 *             res.thisptr.k[1] = key.k[1]
 *             res.thisptr.k[2] = key.k[2]
 *             return chk, res             # <<<<<<<<<<<<<<
 *         else:
 *             return chk, None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_PyBool_FromLong(__pyx_v_chk); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_8);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8)) __PYX_ERR(1, 558, __pyx_L1_error);
    __Pyx_INCREF((PyObject *)__pyx_v_res);
    __Pyx_GIVEREF((PyObject *)__pyx_v_res);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, ((PyObject *)__pyx_v_res))) __PYX_ERR(1, 558, __pyx_L1_error);
    __pyx_t_8 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":553
 *                                                  <unsigned int?>depth,
 *                                                  key)
 *         if chk:             # <<<<<<<<<<<<<<
 *             res = OcTreeKey()
 *             res.thisptr.k[0] = key.k[0]
 */
  }

  /* "pyoctomap/octomap.pyx":560
 *             return chk, res
 *         else:
 *             return chk, None             # <<<<<<<<<<<<<<
 * 
 *     def deleteNode(self, np.ndarray[DOUBLE_t, ndim=1] value, depth=1):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_9 = __Pyx_PyBool_FromLong(__pyx_v_chk); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9)) __PYX_ERR(1, 560, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, Py_None)) __PYX_ERR(1, 560, __pyx_L1_error);
    __pyx_t_9 = 0;
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;
  }

  /* "pyoctomap/octomap.pyx":539
 *         return res
 * 
 *     def coordToKeyChecked(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key
 *         cdef cppbool chk
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coord.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.coordToKeyChecked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coord.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":562
 *             return chk, None
 * 
 *     def deleteNode(self, np.ndarray[DOUBLE_t, ndim=1] value, depth=1):             # <<<<<<<<<<<<<<
 *         cdef cppbool _ret = self.thisptr.deleteNode(defs.point3d(value[0],
 *                                                                  value[1],
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_17deleteNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_17deleteNode = {"deleteNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_17deleteNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_17deleteNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_value = 0;
  PyObject *__pyx_v_depth = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deleteNode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_depth,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_1));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 562, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_depth);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 562, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "deleteNode") < 0)) __PYX_ERR(1, 562, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = ((PyArrayObject *)values[0]);
    __pyx_v_depth = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("deleteNode", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 562, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.deleteNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_5numpy_ndarray, 1, "value", 0))) __PYX_ERR(1, 562, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_16deleteNode(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_value, __pyx_v_depth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_16deleteNode(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_value, PyObject *__pyx_v_depth) {
  bool __pyx_v__ret;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_value;
  __Pyx_Buffer __pyx_pybuffer_value;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  octomap::point3d __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("deleteNode", 1);
  __pyx_pybuffer_value.pybuffer.buf = NULL;
  __pyx_pybuffer_value.refcount = 0;
  __pyx_pybuffernd_value.data = NULL;
  __pyx_pybuffernd_value.rcbuffer = &__pyx_pybuffer_value;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_value.rcbuffer->pybuffer, (PyObject*)__pyx_v_value, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 562, __pyx_L1_error)
  }
  __pyx_pybuffernd_value.diminfo[0].strides = __pyx_pybuffernd_value.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_value.diminfo[0].shape = __pyx_pybuffernd_value.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":563
 * 
 *     def deleteNode(self, np.ndarray[DOUBLE_t, ndim=1] value, depth=1):
 *         cdef cppbool _ret = self.thisptr.deleteNode(defs.point3d(value[0],             # <<<<<<<<<<<<<<
 *                                                                  value[1],
 *                                                                  value[2]),
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_pybuffernd_value.diminfo[0].shape;
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_pybuffernd_value.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 563, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":564
 *     def deleteNode(self, np.ndarray[DOUBLE_t, ndim=1] value, depth=1):
 *         cdef cppbool _ret = self.thisptr.deleteNode(defs.point3d(value[0],
 *                                                                  value[1],             # <<<<<<<<<<<<<<
 *                                                                  value[2]),
 *                                                     <int?>depth)
 */
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_value.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_value.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 564, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":565
 *         cdef cppbool _ret = self.thisptr.deleteNode(defs.point3d(value[0],
 *                                                                  value[1],
 *                                                                  value[2]),             # <<<<<<<<<<<<<<
 *                                                     <int?>depth)
 *         self._mod_version += 1
 */
  __pyx_t_4 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_value.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_value.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 565, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":563
 * 
 *     def deleteNode(self, np.ndarray[DOUBLE_t, ndim=1] value, depth=1):
 *         cdef cppbool _ret = self.thisptr.deleteNode(defs.point3d(value[0],             # <<<<<<<<<<<<<<
 *                                                                  value[1],
 *                                                                  value[2]),
 */
  try {
    __pyx_t_5 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_value.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_value.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_value.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_value.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_value.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_value.diminfo[0].strides)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 563, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":566
 *                                                                  value[1],
 *                                                                  value[2]),
 *                                                     <int?>depth)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 *         return _ret
 */
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_depth); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 566, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":563
 * 
 *     def deleteNode(self, np.ndarray[DOUBLE_t, ndim=1] value, depth=1):
 *         cdef cppbool _ret = self.thisptr.deleteNode(defs.point3d(value[0],             # <<<<<<<<<<<<<<
 *                                                                  value[1],
 *                                                                  value[2]),
 */
  __pyx_v__ret = __pyx_v_self->thisptr->deleteNode(__pyx_t_5, ((int)__pyx_t_2));

  /* "pyoctomap/octomap.pyx":567
 *                                                                  value[2]),
 *                                                     <int?>depth)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 *         return _ret
 * 
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":568
 *                                                     <int?>depth)
 *         self._mod_version += 1
 *         return _ret             # <<<<<<<<<<<<<<
 * 
 *     def castRay(self, origin,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v__ret); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":562
 *             return chk, None
 * 
 *     def deleteNode(self, np.ndarray[DOUBLE_t, ndim=1] value, depth=1):             # <<<<<<<<<<<<<<
 *         cdef cppbool _ret = self.thisptr.deleteNode(defs.point3d(value[0],
 *                                                                  value[1],
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_value.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.deleteNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_value.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":570
 *         return _ret
 * 
 *     def castRay(self, origin,             # <<<<<<<<<<<<<<
 *                 direction,
 *                 end,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_19castRay(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_18castRay, "\n        A ray is cast from origin with a given direction,\n        the first occupied cell is returned (as center coordinate).\n        If the starting coordinate is already occupied in the tree,\n        this coordinate will be returned as a hit.\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_19castRay = {"castRay", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_19castRay, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_18castRay};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_19castRay(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_origin = 0;
  PyObject *__pyx_v_direction = 0;
  PyObject *__pyx_v_end = 0;
  PyObject *__pyx_v_ignoreUnknownCells = 0;
  PyObject *__pyx_v_maxRange = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("castRay (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_origin,&__pyx_n_s_direction,&__pyx_n_s_end,&__pyx_n_s_ignoreUnknownCells,&__pyx_n_s_maxRange,0};

    /* "pyoctomap/octomap.pyx":573
 *                 direction,
 *                 end,
 *                 ignoreUnknownCells=False,             # <<<<<<<<<<<<<<
 *                 maxRange=-1.0):
 *         """
 */
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_float_neg_1_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_origin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 570, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_direction)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 570, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("castRay", 0, 3, 5, 1); __PYX_ERR(1, 570, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_end)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 570, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("castRay", 0, 3, 5, 2); __PYX_ERR(1, 570, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ignoreUnknownCells);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 570, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxRange);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 570, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "castRay") < 0)) __PYX_ERR(1, 570, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_origin = values[0];
    __pyx_v_direction = values[1];
    __pyx_v_end = values[2];
    __pyx_v_ignoreUnknownCells = values[3];
    __pyx_v_maxRange = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("castRay", 0, 3, 5, __pyx_nargs); __PYX_ERR(1, 570, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.castRay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_18castRay(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_origin, __pyx_v_direction, __pyx_v_end, __pyx_v_ignoreUnknownCells, __pyx_v_maxRange);

  /* "pyoctomap/octomap.pyx":570
 *         return _ret
 * 
 *     def castRay(self, origin,             # <<<<<<<<<<<<<<
 *                 direction,
 *                 end,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_18castRay(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_origin, PyObject *__pyx_v_direction, PyObject *__pyx_v_end, PyObject *__pyx_v_ignoreUnknownCells, PyObject *__pyx_v_maxRange) {
  octomap::point3d __pyx_v_e;
  bool __pyx_v_hit;
  PyArrayObject *__pyx_v__origin = 0;
  PyArrayObject *__pyx_v__direction = 0;
  PyArrayObject *__pyx_v__end = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd__direction;
  __Pyx_Buffer __pyx_pybuffer__direction;
  __Pyx_LocalBuf_ND __pyx_pybuffernd__end;
  __Pyx_Buffer __pyx_pybuffer__end;
  __Pyx_LocalBuf_ND __pyx_pybuffernd__origin;
  __Pyx_Buffer __pyx_pybuffer__origin;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  octomap::point3d __pyx_t_13;
  octomap::point3d __pyx_t_14;
  int __pyx_t_15;
  double __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("castRay", 1);
  __pyx_pybuffer__origin.pybuffer.buf = NULL;
  __pyx_pybuffer__origin.refcount = 0;
  __pyx_pybuffernd__origin.data = NULL;
  __pyx_pybuffernd__origin.rcbuffer = &__pyx_pybuffer__origin;
  __pyx_pybuffer__direction.pybuffer.buf = NULL;
  __pyx_pybuffer__direction.refcount = 0;
  __pyx_pybuffernd__direction.data = NULL;
  __pyx_pybuffernd__direction.rcbuffer = &__pyx_pybuffer__direction;
  __pyx_pybuffer__end.pybuffer.buf = NULL;
  __pyx_pybuffer__end.refcount = 0;
  __pyx_pybuffernd__end.data = NULL;
  __pyx_pybuffernd__end.rcbuffer = &__pyx_pybuffer__end;

  /* "pyoctomap/octomap.pyx":584
 *         cdef cppbool hit
 *         # Upcast inputs to float64 internally to satisfy C++ interface
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _origin = np.ascontiguousarray(origin, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _direction = np.ascontiguousarray(direction, dtype=np.float64)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _end = np.zeros(3, dtype=np.float64)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_origin);
  __Pyx_GIVEREF(__pyx_v_origin);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_origin)) __PYX_ERR(1, 584, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 584, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd__origin.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v__origin = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd__origin.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 584, __pyx_L1_error)
    } else {__pyx_pybuffernd__origin.diminfo[0].strides = __pyx_pybuffernd__origin.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd__origin.diminfo[0].shape = __pyx_pybuffernd__origin.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v__origin = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pyoctomap/octomap.pyx":585
 *         # Upcast inputs to float64 internally to satisfy C++ interface
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _origin = np.ascontiguousarray(origin, dtype=np.float64)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _direction = np.ascontiguousarray(direction, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _end = np.zeros(3, dtype=np.float64)
 *         hit = self.thisptr.castRay(
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_direction);
  __Pyx_GIVEREF(__pyx_v_direction);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_direction)) __PYX_ERR(1, 585, __pyx_L1_error);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 585, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd__direction.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v__direction = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd__direction.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 585, __pyx_L1_error)
    } else {__pyx_pybuffernd__direction.diminfo[0].strides = __pyx_pybuffernd__direction.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd__direction.diminfo[0].shape = __pyx_pybuffernd__direction.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v__direction = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":586
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _origin = np.ascontiguousarray(origin, dtype=np.float64)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _direction = np.ascontiguousarray(direction, dtype=np.float64)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _end = np.zeros(3, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         hit = self.thisptr.castRay(
 *             defs.point3d(_origin[0], _origin[1], _origin[2]),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__7, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 586, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd__end.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v__end = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd__end.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 586, __pyx_L1_error)
    } else {__pyx_pybuffernd__end.diminfo[0].strides = __pyx_pybuffernd__end.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd__end.diminfo[0].shape = __pyx_pybuffernd__end.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v__end = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "pyoctomap/octomap.pyx":588
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _end = np.zeros(3, dtype=np.float64)
 *         hit = self.thisptr.castRay(
 *             defs.point3d(_origin[0], _origin[1], _origin[2]),             # <<<<<<<<<<<<<<
 *             defs.point3d(_direction[0], _direction[1], _direction[2]),
 *             e,
 */
  __pyx_t_9 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd__origin.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd__origin.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(1, 588, __pyx_L1_error)
  }
  __pyx_t_11 = 1;
  __pyx_t_10 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd__origin.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd__origin.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(1, 588, __pyx_L1_error)
  }
  __pyx_t_12 = 2;
  __pyx_t_10 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd__origin.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd__origin.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(1, 588, __pyx_L1_error)
  }
  try {
    __pyx_t_13 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd__origin.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd__origin.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd__origin.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd__origin.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd__origin.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd__origin.diminfo[0].strides)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 588, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":589
 *         hit = self.thisptr.castRay(
 *             defs.point3d(_origin[0], _origin[1], _origin[2]),
 *             defs.point3d(_direction[0], _direction[1], _direction[2]),             # <<<<<<<<<<<<<<
 *             e,
 *             bool(ignoreUnknownCells),
 */
  __pyx_t_12 = 0;
  __pyx_t_10 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd__direction.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd__direction.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(1, 589, __pyx_L1_error)
  }
  __pyx_t_11 = 1;
  __pyx_t_10 = -1;
  if (__pyx_t_11 < 0) {
    __pyx_t_11 += __pyx_pybuffernd__direction.diminfo[0].shape;
    if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd__direction.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(1, 589, __pyx_L1_error)
  }
  __pyx_t_9 = 2;
  __pyx_t_10 = -1;
  if (__pyx_t_9 < 0) {
    __pyx_t_9 += __pyx_pybuffernd__direction.diminfo[0].shape;
    if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
  } else if (unlikely(__pyx_t_9 >= __pyx_pybuffernd__direction.diminfo[0].shape)) __pyx_t_10 = 0;
  if (unlikely(__pyx_t_10 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_10);
    __PYX_ERR(1, 589, __pyx_L1_error)
  }
  try {
    __pyx_t_14 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd__direction.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd__direction.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd__direction.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd__direction.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd__direction.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd__direction.diminfo[0].strides)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 589, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":591
 *             defs.point3d(_direction[0], _direction[1], _direction[2]),
 *             e,
 *             bool(ignoreUnknownCells),             # <<<<<<<<<<<<<<
 *             <double?>maxRange
 *         )
 */
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_ignoreUnknownCells); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(1, 591, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":592
 *             e,
 *             bool(ignoreUnknownCells),
 *             <double?>maxRange             # <<<<<<<<<<<<<<
 *         )
 *         if hit:
 */
  __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_v_maxRange); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 592, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":587
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _direction = np.ascontiguousarray(direction, dtype=np.float64)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _end = np.zeros(3, dtype=np.float64)
 *         hit = self.thisptr.castRay(             # <<<<<<<<<<<<<<
 *             defs.point3d(_origin[0], _origin[1], _origin[2]),
 *             defs.point3d(_direction[0], _direction[1], _direction[2]),
 */
  __pyx_v_hit = __pyx_v_self->thisptr->castRay(__pyx_t_13, __pyx_t_14, __pyx_v_e, (!(!__pyx_t_15)), ((double)__pyx_t_16));

  /* "pyoctomap/octomap.pyx":594
 *             <double?>maxRange
 *         )
 *         if hit:             # <<<<<<<<<<<<<<
 *             _end[0:3] = e.x(), e.y(), e.z()
 *             # Copy back into provided end buffer (dtype-agnostic)
 */
  __pyx_t_15 = (__pyx_v_hit != 0);
  if (__pyx_t_15) {

    /* "pyoctomap/octomap.pyx":595
 *         )
 *         if hit:
 *             _end[0:3] = e.x(), e.y(), e.z()             # <<<<<<<<<<<<<<
 *             # Copy back into provided end buffer (dtype-agnostic)
 *             try:
 */
    __pyx_t_3 = PyFloat_FromDouble(__pyx_v_e.x()); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_e.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_e.z()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3)) __PYX_ERR(1, 595, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4)) __PYX_ERR(1, 595, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_1)) __PYX_ERR(1, 595, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    if (unlikely((PyObject_SetItem(((PyObject *)__pyx_v__end), __pyx_slice__8, __pyx_t_5) < 0))) __PYX_ERR(1, 595, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "pyoctomap/octomap.pyx":597
 *             _end[0:3] = e.x(), e.y(), e.z()
 *             # Copy back into provided end buffer (dtype-agnostic)
 *             try:             # <<<<<<<<<<<<<<
 *                 end[0:3] = _end
 *             except Exception:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      /*try:*/ {

        /* "pyoctomap/octomap.pyx":598
 *             # Copy back into provided end buffer (dtype-agnostic)
 *             try:
 *                 end[0:3] = _end             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 # If end is not writeable/compatible, ignore copy-back
 */
        if (__Pyx_PyObject_SetSlice(__pyx_v_end, ((PyObject *)__pyx_v__end), 0, 3, NULL, NULL, &__pyx_slice__8, 1, 1, 1) < 0) __PYX_ERR(1, 598, __pyx_L4_error)

        /* "pyoctomap/octomap.pyx":597
 *             _end[0:3] = e.x(), e.y(), e.z()
 *             # Copy back into provided end buffer (dtype-agnostic)
 *             try:             # <<<<<<<<<<<<<<
 *                 end[0:3] = _end
 *             except Exception:
 */
      }
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "pyoctomap/octomap.pyx":599
 *             try:
 *                 end[0:3] = _end
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 # If end is not writeable/compatible, ignore copy-back
 *                 pass
 */
      __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_10) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;

      /* "pyoctomap/octomap.pyx":597
 *             _end[0:3] = e.x(), e.y(), e.z()
 *             # Copy back into provided end buffer (dtype-agnostic)
 *             try:             # <<<<<<<<<<<<<<
 *                 end[0:3] = _end
 *             except Exception:
 */
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      goto __pyx_L1_error;
      __pyx_L5_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_XGIVEREF(__pyx_t_18);
      __Pyx_XGIVEREF(__pyx_t_19);
      __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      __pyx_L9_try_end:;
    }

    /* "pyoctomap/octomap.pyx":594
 *             <double?>maxRange
 *         )
 *         if hit:             # <<<<<<<<<<<<<<
 *             _end[0:3] = e.x(), e.y(), e.z()
 *             # Copy back into provided end buffer (dtype-agnostic)
 */
  }

  /* "pyoctomap/octomap.pyx":602
 *                 # If end is not writeable/compatible, ignore copy-back
 *                 pass
 *         return hit             # <<<<<<<<<<<<<<
 * 
 *     def read(self, filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_hit); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":570
 *         return _ret
 * 
 *     def castRay(self, origin,             # <<<<<<<<<<<<<<
 *                 direction,
 *                 end,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__direction.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__end.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__origin.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.castRay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__direction.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__end.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__origin.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v__origin);
  __Pyx_XDECREF((PyObject *)__pyx_v__direction);
  __Pyx_XDECREF((PyObject *)__pyx_v__end);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":604
 *         return hit
 * 
 *     def read(self, filename):             # <<<<<<<<<<<<<<
 *         cdef string c_filename = filename.encode('utf-8')
 *         cdef defs.OcTree* result
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_21read(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_21read = {"read", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_21read, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_21read(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filename)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 604, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "read") < 0)) __PYX_ERR(1, 604, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("read", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 604, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_20read(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_20read(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_filename) {
  std::string __pyx_v_c_filename;
  octomap::OcTree *__pyx_v_result;
  struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_new_tree = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("read", 1);

  /* "pyoctomap/octomap.pyx":605
 * 
 *     def read(self, filename):
 *         cdef string c_filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *         cdef defs.OcTree* result
 *         result = <defs.OcTree*>self.thisptr.read(c_filename)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_utf_8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_c_filename = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_5);

  /* "pyoctomap/octomap.pyx":607
 *         cdef string c_filename = filename.encode('utf-8')
 *         cdef defs.OcTree* result
 *         result = <defs.OcTree*>self.thisptr.read(c_filename)             # <<<<<<<<<<<<<<
 *         if result != NULL:
 *             # Create new OcTree instance with the loaded data
 */
  __pyx_v_result = ((octomap::OcTree *)__pyx_v_self->thisptr->read(__pyx_v_c_filename));

  /* "pyoctomap/octomap.pyx":608
 *         cdef defs.OcTree* result
 *         result = <defs.OcTree*>self.thisptr.read(c_filename)
 *         if result != NULL:             # <<<<<<<<<<<<<<
 *             # Create new OcTree instance with the loaded data
 *             new_tree = OcTree(0.1)  # Temporary resolution, will be overwritten
 */
  __pyx_t_6 = (__pyx_v_result != NULL);
  if (__pyx_t_6) {

    /* "pyoctomap/octomap.pyx":610
 *         if result != NULL:
 *             # Create new OcTree instance with the loaded data
 *             new_tree = OcTree(0.1)  # Temporary resolution, will be overwritten             # <<<<<<<<<<<<<<
 *             new_tree.thisptr = result
 *             new_tree.owner = True
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree), __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 610, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_new_tree = ((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":611
 *             # Create new OcTree instance with the loaded data
 *             new_tree = OcTree(0.1)  # Temporary resolution, will be overwritten
 *             new_tree.thisptr = result             # <<<<<<<<<<<<<<
 *             new_tree.owner = True
 *             return new_tree
 */
    __pyx_v_new_tree->thisptr = __pyx_v_result;

    /* "pyoctomap/octomap.pyx":612
 *             new_tree = OcTree(0.1)  # Temporary resolution, will be overwritten
 *             new_tree.thisptr = result
 *             new_tree.owner = True             # <<<<<<<<<<<<<<
 *             return new_tree
 *         return None
 */
    __pyx_v_new_tree->owner = 1;

    /* "pyoctomap/octomap.pyx":613
 *             new_tree.thisptr = result
 *             new_tree.owner = True
 *             return new_tree             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_new_tree);
    __pyx_r = ((PyObject *)__pyx_v_new_tree);
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":608
 *         cdef defs.OcTree* result
 *         result = <defs.OcTree*>self.thisptr.read(c_filename)
 *         if result != NULL:             # <<<<<<<<<<<<<<
 *             # Create new OcTree instance with the loaded data
 *             new_tree = OcTree(0.1)  # Temporary resolution, will be overwritten
 */
  }

  /* "pyoctomap/octomap.pyx":614
 *             new_tree.owner = True
 *             return new_tree
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     def write(self, filename=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":604
 *         return hit
 * 
 *     def read(self, filename):             # <<<<<<<<<<<<<<
 *         cdef string c_filename = filename.encode('utf-8')
 *         cdef defs.OcTree* result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.read", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_new_tree);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":616
 *         return None
 * 
 *     def write(self, filename=None):             # <<<<<<<<<<<<<<
 *         """
 *         Write file header and complete tree to file/stream (serialization)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_23write(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_22write, "\n        Write file header and complete tree to file/stream (serialization)\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_23write = {"write", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_23write, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_22write};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_23write(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filename);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 616, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "write") < 0)) __PYX_ERR(1, 616, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 616, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_22write(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_22write(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_filename) {
  std::ostringstream __pyx_v_oss;
  std::string __pyx_v_c_filename;
  bool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("write", 1);

  /* "pyoctomap/octomap.pyx":622
 *         cdef defs.ostringstream oss
 *         cdef string c_filename
 *         if not filename is None:             # <<<<<<<<<<<<<<
 *             c_filename = filename.encode('utf-8')
 *             return self.thisptr.write(c_filename)
 */
  __pyx_t_1 = (__pyx_v_filename != Py_None);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":623
 *         cdef string c_filename
 *         if not filename is None:
 *             c_filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *             return self.thisptr.write(c_filename)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_utf_8};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 623, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 623, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_c_filename = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

    /* "pyoctomap/octomap.pyx":624
 *         if not filename is None:
 *             c_filename = filename.encode('utf-8')
 *             return self.thisptr.write(c_filename)             # <<<<<<<<<<<<<<
 *         else:
 *             ret = self.thisptr.write(<defs.ostream&?>oss)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->write(__pyx_v_c_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":622
 *         cdef defs.ostringstream oss
 *         cdef string c_filename
 *         if not filename is None:             # <<<<<<<<<<<<<<
 *             c_filename = filename.encode('utf-8')
 *             return self.thisptr.write(c_filename)
 */
  }

  /* "pyoctomap/octomap.pyx":626
 *             return self.thisptr.write(c_filename)
 *         else:
 *             ret = self.thisptr.write(<defs.ostream&?>oss)             # <<<<<<<<<<<<<<
 *             if ret:
 *                 return oss.str().c_str()[:oss.str().length()]
 */
  /*else*/ {
    __pyx_v_ret = __pyx_v_self->thisptr->write(((std::ostream &)__pyx_v_oss));

    /* "pyoctomap/octomap.pyx":627
 *         else:
 *             ret = self.thisptr.write(<defs.ostream&?>oss)
 *             if ret:             # <<<<<<<<<<<<<<
 *                 return oss.str().c_str()[:oss.str().length()]
 *             else:
 */
    __pyx_t_1 = (__pyx_v_ret != 0);
    if (__pyx_t_1) {

      /* "pyoctomap/octomap.pyx":628
 *             ret = self.thisptr.write(<defs.ostream&?>oss)
 *             if ret:
 *                 return oss.str().c_str()[:oss.str().length()]             # <<<<<<<<<<<<<<
 *             else:
 *                 return False
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_oss.str().c_str() + 0, __pyx_v_oss.str().length() - 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 628, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "pyoctomap/octomap.pyx":627
 *         else:
 *             ret = self.thisptr.write(<defs.ostream&?>oss)
 *             if ret:             # <<<<<<<<<<<<<<
 *                 return oss.str().c_str()[:oss.str().length()]
 *             else:
 */
    }

    /* "pyoctomap/octomap.pyx":630
 *                 return oss.str().c_str()[:oss.str().length()]
 *             else:
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *     def readBinary(self, filename):
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;
    }
  }

  /* "pyoctomap/octomap.pyx":616
 *         return None
 * 
 *     def write(self, filename=None):             # <<<<<<<<<<<<<<
 *         """
 *         Write file header and complete tree to file/stream (serialization)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":632
 *                 return False
 * 
 *     def readBinary(self, filename):             # <<<<<<<<<<<<<<
 *         # Treat input as a filesystem path; accept str or bytes
 *         cdef string c_filename
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_25readBinary(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_25readBinary = {"readBinary", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_25readBinary, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_25readBinary(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("readBinary (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filename)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 632, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "readBinary") < 0)) __PYX_ERR(1, 632, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("readBinary", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 632, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.readBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_24readBinary(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_24readBinary(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_filename) {
  std::string __pyx_v_c_filename;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::string __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("readBinary", 1);

  /* "pyoctomap/octomap.pyx":635
 *         # Treat input as a filesystem path; accept str or bytes
 *         cdef string c_filename
 *         if isinstance(filename, (bytes, bytearray)):             # <<<<<<<<<<<<<<
 *             c_filename = (<bytes>filename).decode('utf-8')
 *         else:
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_filename); 
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = PyByteArray_Check(__pyx_v_filename); 
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":636
 *         cdef string c_filename
 *         if isinstance(filename, (bytes, bytearray)):
 *             c_filename = (<bytes>filename).decode('utf-8')             # <<<<<<<<<<<<<<
 *         else:
 *             c_filename = (<str>filename).encode('utf-8')
 */
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
      __PYX_ERR(1, 636, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_decode_bytes(((PyObject*)__pyx_v_filename), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 636, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_c_filename = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);

    /* "pyoctomap/octomap.pyx":635
 *         # Treat input as a filesystem path; accept str or bytes
 *         cdef string c_filename
 *         if isinstance(filename, (bytes, bytearray)):             # <<<<<<<<<<<<<<
 *             c_filename = (<bytes>filename).decode('utf-8')
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":638
 *             c_filename = (<bytes>filename).decode('utf-8')
 *         else:
 *             c_filename = (<str>filename).encode('utf-8')             # <<<<<<<<<<<<<<
 *         return self.thisptr.readBinary(c_filename)
 * 
 */
  /*else*/ {
    if (unlikely(__pyx_v_filename == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(1, 638, __pyx_L1_error)
    }
    __pyx_t_3 = PyUnicode_AsUTF8String(((PyObject*)__pyx_v_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_c_filename = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_4);
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":639
 *         else:
 *             c_filename = (<str>filename).encode('utf-8')
 *         return self.thisptr.readBinary(c_filename)             # <<<<<<<<<<<<<<
 * 
 *     def writeBinary(self, filename=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->readBinary(__pyx_v_c_filename)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":632
 *                 return False
 * 
 *     def readBinary(self, filename):             # <<<<<<<<<<<<<<
 *         # Treat input as a filesystem path; accept str or bytes
 *         cdef string c_filename
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.readBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":641
 *         return self.thisptr.readBinary(c_filename)
 * 
 *     def writeBinary(self, filename=None):             # <<<<<<<<<<<<<<
 *         cdef defs.ostringstream oss
 *         cdef string c_filename
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_27writeBinary(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_27writeBinary = {"writeBinary", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_27writeBinary, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_27writeBinary(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("writeBinary (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filename);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 641, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "writeBinary") < 0)) __PYX_ERR(1, 641, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("writeBinary", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 641, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.writeBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_26writeBinary(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_26writeBinary(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_filename) {
  std::ostringstream __pyx_v_oss;
  std::string __pyx_v_c_filename;
  bool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("writeBinary", 1);

  /* "pyoctomap/octomap.pyx":644
 *         cdef defs.ostringstream oss
 *         cdef string c_filename
 *         if not filename is None:             # <<<<<<<<<<<<<<
 *             c_filename = filename.encode('utf-8')
 *             return self.thisptr.writeBinary(c_filename)
 */
  __pyx_t_1 = (__pyx_v_filename != Py_None);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":645
 *         cdef string c_filename
 *         if not filename is None:
 *             c_filename = filename.encode('utf-8')             # <<<<<<<<<<<<<<
 *             return self.thisptr.writeBinary(c_filename)
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_utf_8};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 645, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_c_filename = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

    /* "pyoctomap/octomap.pyx":646
 *         if not filename is None:
 *             c_filename = filename.encode('utf-8')
 *             return self.thisptr.writeBinary(c_filename)             # <<<<<<<<<<<<<<
 *         else:
 *             ret = self.thisptr.writeBinary(<defs.ostream&?>oss)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->writeBinary(__pyx_v_c_filename)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 646, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":644
 *         cdef defs.ostringstream oss
 *         cdef string c_filename
 *         if not filename is None:             # <<<<<<<<<<<<<<
 *             c_filename = filename.encode('utf-8')
 *             return self.thisptr.writeBinary(c_filename)
 */
  }

  /* "pyoctomap/octomap.pyx":648
 *             return self.thisptr.writeBinary(c_filename)
 *         else:
 *             ret = self.thisptr.writeBinary(<defs.ostream&?>oss)             # <<<<<<<<<<<<<<
 *             if ret:
 *                 return oss.str().c_str()[:oss.str().length()]
 */
  /*else*/ {
    __pyx_v_ret = __pyx_v_self->thisptr->writeBinary(((std::ostream &)__pyx_v_oss));

    /* "pyoctomap/octomap.pyx":649
 *         else:
 *             ret = self.thisptr.writeBinary(<defs.ostream&?>oss)
 *             if ret:             # <<<<<<<<<<<<<<
 *                 return oss.str().c_str()[:oss.str().length()]
 *             else:
 */
    __pyx_t_1 = (__pyx_v_ret != 0);
    if (__pyx_t_1) {

      /* "pyoctomap/octomap.pyx":650
 *             ret = self.thisptr.writeBinary(<defs.ostream&?>oss)
 *             if ret:
 *                 return oss.str().c_str()[:oss.str().length()]             # <<<<<<<<<<<<<<
 *             else:
 *                 return False
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_oss.str().c_str() + 0, __pyx_v_oss.str().length() - 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 650, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "pyoctomap/octomap.pyx":649
 *         else:
 *             ret = self.thisptr.writeBinary(<defs.ostream&?>oss)
 *             if ret:             # <<<<<<<<<<<<<<
 *                 return oss.str().c_str()[:oss.str().length()]
 *             else:
 */
    }

    /* "pyoctomap/octomap.pyx":652
 *                 return oss.str().c_str()[:oss.str().length()]
 *             else:
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *     def isNodeOccupied(self, node):
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;
    }
  }

  /* "pyoctomap/octomap.pyx":641
 *         return self.thisptr.readBinary(c_filename)
 * 
 *     def writeBinary(self, filename=None):             # <<<<<<<<<<<<<<
 *         cdef defs.ostringstream oss
 *         cdef string c_filename
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.writeBinary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":654
 *                 return False
 * 
 *     def isNodeOccupied(self, node):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d search_point
 *         cdef defs.OcTreeNode* found_node
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_29isNodeOccupied(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_29isNodeOccupied = {"isNodeOccupied", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_29isNodeOccupied, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_29isNodeOccupied(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_node = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeOccupied (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_node)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 654, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isNodeOccupied") < 0)) __PYX_ERR(1, 654, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_node = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeOccupied", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 654, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.isNodeOccupied", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_28isNodeOccupied(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_node);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_28isNodeOccupied(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED octomap::point3d __pyx_v_search_point;
  octomap::OcTreeNode *__pyx_v_found_node;
  PyObject *__pyx_v_coord = NULL;
  bool __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  octomap::point3d __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeOccupied", 1);

  /* "pyoctomap/octomap.pyx":658
 *         cdef defs.OcTreeNode* found_node
 * 
 *         if isinstance(node, OcTreeNode):             # <<<<<<<<<<<<<<
 *             if (<OcTreeNode>node).thisptr:
 *                 return self.thisptr.isNodeOccupied(deref((<OcTreeNode>node).thisptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_9pyoctomap_7octomap_OcTreeNode); 
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":659
 * 
 *         if isinstance(node, OcTreeNode):
 *             if (<OcTreeNode>node).thisptr:             # <<<<<<<<<<<<<<
 *                 return self.thisptr.isNodeOccupied(deref((<OcTreeNode>node).thisptr))
 *             else:
 */
    __pyx_t_1 = (((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr != 0);
    if (likely(__pyx_t_1)) {

      /* "pyoctomap/octomap.pyx":660
 *         if isinstance(node, OcTreeNode):
 *             if (<OcTreeNode>node).thisptr:
 *                 return self.thisptr.isNodeOccupied(deref((<OcTreeNode>node).thisptr))             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NullPointerException
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->isNodeOccupied((*((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "pyoctomap/octomap.pyx":659
 * 
 *         if isinstance(node, OcTreeNode):
 *             if (<OcTreeNode>node).thisptr:             # <<<<<<<<<<<<<<
 *                 return self.thisptr.isNodeOccupied(deref((<OcTreeNode>node).thisptr))
 *             else:
 */
    }

    /* "pyoctomap/octomap.pyx":662
 *                 return self.thisptr.isNodeOccupied(deref((<OcTreeNode>node).thisptr))
 *             else:
 *                 raise NullPointerException             # <<<<<<<<<<<<<<
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):
 *             # Handle iterator case - use coordinate to search for the node
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 662, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 662, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":658
 *         cdef defs.OcTreeNode* found_node
 * 
 *         if isinstance(node, OcTreeNode):             # <<<<<<<<<<<<<<
 *             if (<OcTreeNode>node).thisptr:
 *                 return self.thisptr.isNodeOccupied(deref((<OcTreeNode>node).thisptr))
 */
  }

  /* "pyoctomap/octomap.pyx":663
 *             else:
 *                 raise NullPointerException
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):             # <<<<<<<<<<<<<<
 *             # Handle iterator case - use coordinate to search for the node
 *             try:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator); 
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator); 
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator); 
  __pyx_t_1 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":665
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):
 *             # Handle iterator case - use coordinate to search for the node
 *             try:             # <<<<<<<<<<<<<<
 *                 coord = node.getCoordinate()
 *                 # Convert coordinate to point3d for search
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      /*try:*/ {

        /* "pyoctomap/octomap.pyx":666
 *             # Handle iterator case - use coordinate to search for the node
 *             try:
 *                 coord = node.getCoordinate()             # <<<<<<<<<<<<<<
 *                 # Convert coordinate to point3d for search
 *                 search_point = defs.point3d(coord[0], coord[1], coord[2])
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_getCoordinate); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 666, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 666, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_v_coord = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "pyoctomap/octomap.pyx":668
 *                 coord = node.getCoordinate()
 *                 # Convert coordinate to point3d for search
 *                 search_point = defs.point3d(coord[0], coord[1], coord[2])             # <<<<<<<<<<<<<<
 *                 found_node = self.thisptr.search(<double>coord[0], <double>coord[1], <double>coord[2], <unsigned int>0)
 *                 if found_node != NULL:
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 668, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 668, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 668, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 668, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 668, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 668, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        try {
          __pyx_t_13 = octomap::point3d(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 668, __pyx_L8_error)
        }
        __pyx_v_search_point = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_13);

        /* "pyoctomap/octomap.pyx":669
 *                 # Convert coordinate to point3d for search
 *                 search_point = defs.point3d(coord[0], coord[1], coord[2])
 *                 found_node = self.thisptr.search(<double>coord[0], <double>coord[1], <double>coord[2], <unsigned int>0)             # <<<<<<<<<<<<<<
 *                 if found_node != NULL:
 *                     result = self.thisptr.isNodeOccupied(deref(found_node))
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 669, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 669, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 669, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 669, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 669, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 669, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_found_node = __pyx_v_self->thisptr->search(((double)__pyx_t_14), ((double)__pyx_t_15), ((double)__pyx_t_16), ((unsigned int)0));

        /* "pyoctomap/octomap.pyx":670
 *                 search_point = defs.point3d(coord[0], coord[1], coord[2])
 *                 found_node = self.thisptr.search(<double>coord[0], <double>coord[1], <double>coord[2], <unsigned int>0)
 *                 if found_node != NULL:             # <<<<<<<<<<<<<<
 *                     result = self.thisptr.isNodeOccupied(deref(found_node))
 *                     return result
 */
        __pyx_t_1 = (__pyx_v_found_node != NULL);
        if (__pyx_t_1) {

          /* "pyoctomap/octomap.pyx":671
 *                 found_node = self.thisptr.search(<double>coord[0], <double>coord[1], <double>coord[2], <unsigned int>0)
 *                 if found_node != NULL:
 *                     result = self.thisptr.isNodeOccupied(deref(found_node))             # <<<<<<<<<<<<<<
 *                     return result
 *                 else:
 */
          __pyx_v_result = __pyx_v_self->thisptr->isNodeOccupied((*__pyx_v_found_node));

          /* "pyoctomap/octomap.pyx":672
 *                 if found_node != NULL:
 *                     result = self.thisptr.isNodeOccupied(deref(found_node))
 *                     return result             # <<<<<<<<<<<<<<
 *                 else:
 *                     return False
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 672, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L12_try_return;

          /* "pyoctomap/octomap.pyx":670
 *                 search_point = defs.point3d(coord[0], coord[1], coord[2])
 *                 found_node = self.thisptr.search(<double>coord[0], <double>coord[1], <double>coord[2], <unsigned int>0)
 *                 if found_node != NULL:             # <<<<<<<<<<<<<<
 *                     result = self.thisptr.isNodeOccupied(deref(found_node))
 *                     return result
 */
        }

        /* "pyoctomap/octomap.pyx":674
 *                     return result
 *                 else:
 *                     return False             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 return False
 */
        /*else*/ {
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_False);
          __pyx_r = Py_False;
          goto __pyx_L12_try_return;
        }

        /* "pyoctomap/octomap.pyx":665
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):
 *             # Handle iterator case - use coordinate to search for the node
 *             try:             # <<<<<<<<<<<<<<
 *                 coord = node.getCoordinate()
 *                 # Convert coordinate to point3d for search
 */
      }
      __pyx_L8_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "pyoctomap/octomap.pyx":675
 *                 else:
 *                     return False
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 return False
 *         else:
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_9) {
        __Pyx_AddTraceback("pyoctomap.octomap.OcTree.isNodeOccupied", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 675, __pyx_L10_except_error)
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);

        /* "pyoctomap/octomap.pyx":676
 *                     return False
 *             except Exception:
 *                 return False             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L11_except_return;
      }
      goto __pyx_L10_except_error;

      /* "pyoctomap/octomap.pyx":665
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):
 *             # Handle iterator case - use coordinate to search for the node
 *             try:             # <<<<<<<<<<<<<<
 *                 coord = node.getCoordinate()
 *                 # Convert coordinate to point3d for search
 */
      __pyx_L10_except_error:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L1_error;
      __pyx_L12_try_return:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L0;
      __pyx_L11_except_return:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L0;
    }

    /* "pyoctomap/octomap.pyx":663
 *             else:
 *                 raise NullPointerException
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):             # <<<<<<<<<<<<<<
 *             # Handle iterator case - use coordinate to search for the node
 *             try:
 */
  }

  /* "pyoctomap/octomap.pyx":678
 *                 return False
 *         else:
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")             # <<<<<<<<<<<<<<
 * 
 *     def isNodeAtThreshold(self, node):
 */
  /*else*/ {
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_node)), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Expected_OcTreeNode_or_iterator, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(1, 678, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":654
 *                 return False
 * 
 *     def isNodeOccupied(self, node):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d search_point
 *         cdef defs.OcTreeNode* found_node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.isNodeOccupied", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coord);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":680
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")
 * 
 *     def isNodeAtThreshold(self, node):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d search_point
 *         cdef defs.OcTreeNode* found_node
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_31isNodeAtThreshold(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_31isNodeAtThreshold = {"isNodeAtThreshold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_31isNodeAtThreshold, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_31isNodeAtThreshold(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_node = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeAtThreshold (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_node)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 680, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isNodeAtThreshold") < 0)) __PYX_ERR(1, 680, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_node = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeAtThreshold", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 680, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.isNodeAtThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_30isNodeAtThreshold(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_node);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_30isNodeAtThreshold(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node) {
  CYTHON_UNUSED octomap::point3d __pyx_v_search_point;
  octomap::OcTreeNode *__pyx_v_found_node;
  PyObject *__pyx_v_coord = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  float __pyx_t_12;
  octomap::point3d __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeAtThreshold", 1);

  /* "pyoctomap/octomap.pyx":684
 *         cdef defs.OcTreeNode* found_node
 * 
 *         if isinstance(node, OcTreeNode):             # <<<<<<<<<<<<<<
 *             if (<OcTreeNode>node).thisptr:
 *                 return self.thisptr.isNodeAtThreshold(deref((<OcTreeNode>node).thisptr))
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_9pyoctomap_7octomap_OcTreeNode); 
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":685
 * 
 *         if isinstance(node, OcTreeNode):
 *             if (<OcTreeNode>node).thisptr:             # <<<<<<<<<<<<<<
 *                 return self.thisptr.isNodeAtThreshold(deref((<OcTreeNode>node).thisptr))
 *             else:
 */
    __pyx_t_1 = (((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr != 0);
    if (likely(__pyx_t_1)) {

      /* "pyoctomap/octomap.pyx":686
 *         if isinstance(node, OcTreeNode):
 *             if (<OcTreeNode>node).thisptr:
 *                 return self.thisptr.isNodeAtThreshold(deref((<OcTreeNode>node).thisptr))             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NullPointerException
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->isNodeAtThreshold((*((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 686, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "pyoctomap/octomap.pyx":685
 * 
 *         if isinstance(node, OcTreeNode):
 *             if (<OcTreeNode>node).thisptr:             # <<<<<<<<<<<<<<
 *                 return self.thisptr.isNodeAtThreshold(deref((<OcTreeNode>node).thisptr))
 *             else:
 */
    }

    /* "pyoctomap/octomap.pyx":688
 *                 return self.thisptr.isNodeAtThreshold(deref((<OcTreeNode>node).thisptr))
 *             else:
 *                 raise NullPointerException             # <<<<<<<<<<<<<<
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):
 *             # Handle iterator case - use coordinate to search for the node
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 688, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 688, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":684
 *         cdef defs.OcTreeNode* found_node
 * 
 *         if isinstance(node, OcTreeNode):             # <<<<<<<<<<<<<<
 *             if (<OcTreeNode>node).thisptr:
 *                 return self.thisptr.isNodeAtThreshold(deref((<OcTreeNode>node).thisptr))
 */
  }

  /* "pyoctomap/octomap.pyx":689
 *             else:
 *                 raise NullPointerException
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):             # <<<<<<<<<<<<<<
 *             # Handle iterator case - use coordinate to search for the node
 *             try:
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator); 
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator); 
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator); 
  __pyx_t_1 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":691
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):
 *             # Handle iterator case - use coordinate to search for the node
 *             try:             # <<<<<<<<<<<<<<
 *                 coord = node.getCoordinate()
 *                 # Convert coordinate to point3d for search
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      /*try:*/ {

        /* "pyoctomap/octomap.pyx":692
 *             # Handle iterator case - use coordinate to search for the node
 *             try:
 *                 coord = node.getCoordinate()             # <<<<<<<<<<<<<<
 *                 # Convert coordinate to point3d for search
 *                 search_point = defs.point3d(coord[0], coord[1], coord[2])
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_getCoordinate); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 692, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = NULL;
        __pyx_t_9 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_9 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 692, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __pyx_v_coord = __pyx_t_2;
        __pyx_t_2 = 0;

        /* "pyoctomap/octomap.pyx":694
 *                 coord = node.getCoordinate()
 *                 # Convert coordinate to point3d for search
 *                 search_point = defs.point3d(coord[0], coord[1], coord[2])             # <<<<<<<<<<<<<<
 *                 found_node = self.thisptr.search(<double>coord[0], <double>coord[1], <double>coord[2], <unsigned int>0)
 *                 if found_node != NULL:
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 694, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 694, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 694, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 694, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 694, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_12 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 694, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        try {
          __pyx_t_13 = octomap::point3d(__pyx_t_10, __pyx_t_11, __pyx_t_12);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          __PYX_ERR(1, 694, __pyx_L8_error)
        }
        __pyx_v_search_point = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_13);

        /* "pyoctomap/octomap.pyx":695
 *                 # Convert coordinate to point3d for search
 *                 search_point = defs.point3d(coord[0], coord[1], coord[2])
 *                 found_node = self.thisptr.search(<double>coord[0], <double>coord[1], <double>coord[2], <unsigned int>0)             # <<<<<<<<<<<<<<
 *                 if found_node != NULL:
 *                     return self.thisptr.isNodeAtThreshold(deref(found_node))
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 695, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 695, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 695, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 695, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coord, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 695, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 695, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_found_node = __pyx_v_self->thisptr->search(((double)__pyx_t_14), ((double)__pyx_t_15), ((double)__pyx_t_16), ((unsigned int)0));

        /* "pyoctomap/octomap.pyx":696
 *                 search_point = defs.point3d(coord[0], coord[1], coord[2])
 *                 found_node = self.thisptr.search(<double>coord[0], <double>coord[1], <double>coord[2], <unsigned int>0)
 *                 if found_node != NULL:             # <<<<<<<<<<<<<<
 *                     return self.thisptr.isNodeAtThreshold(deref(found_node))
 *                 else:
 */
        __pyx_t_1 = (__pyx_v_found_node != NULL);
        if (__pyx_t_1) {

          /* "pyoctomap/octomap.pyx":697
 *                 found_node = self.thisptr.search(<double>coord[0], <double>coord[1], <double>coord[2], <unsigned int>0)
 *                 if found_node != NULL:
 *                     return self.thisptr.isNodeAtThreshold(deref(found_node))             # <<<<<<<<<<<<<<
 *                 else:
 *                     return False
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->isNodeAtThreshold((*__pyx_v_found_node))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 697, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_r = __pyx_t_2;
          __pyx_t_2 = 0;
          goto __pyx_L12_try_return;

          /* "pyoctomap/octomap.pyx":696
 *                 search_point = defs.point3d(coord[0], coord[1], coord[2])
 *                 found_node = self.thisptr.search(<double>coord[0], <double>coord[1], <double>coord[2], <unsigned int>0)
 *                 if found_node != NULL:             # <<<<<<<<<<<<<<
 *                     return self.thisptr.isNodeAtThreshold(deref(found_node))
 *                 else:
 */
        }

        /* "pyoctomap/octomap.pyx":699
 *                     return self.thisptr.isNodeAtThreshold(deref(found_node))
 *                 else:
 *                     return False             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 return False
 */
        /*else*/ {
          __Pyx_XDECREF(__pyx_r);
          __Pyx_INCREF(Py_False);
          __pyx_r = Py_False;
          goto __pyx_L12_try_return;
        }

        /* "pyoctomap/octomap.pyx":691
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):
 *             # Handle iterator case - use coordinate to search for the node
 *             try:             # <<<<<<<<<<<<<<
 *                 coord = node.getCoordinate()
 *                 # Convert coordinate to point3d for search
 */
      }
      __pyx_L8_error:;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "pyoctomap/octomap.pyx":700
 *                 else:
 *                     return False
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 return False
 *         else:
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_9) {
        __Pyx_AddTraceback("pyoctomap.octomap.OcTree.isNodeAtThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(1, 700, __pyx_L10_except_error)
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);

        /* "pyoctomap/octomap.pyx":701
 *                     return False
 *             except Exception:
 *                 return False             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(Py_False);
        __pyx_r = Py_False;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L11_except_return;
      }
      goto __pyx_L10_except_error;

      /* "pyoctomap/octomap.pyx":691
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):
 *             # Handle iterator case - use coordinate to search for the node
 *             try:             # <<<<<<<<<<<<<<
 *                 coord = node.getCoordinate()
 *                 # Convert coordinate to point3d for search
 */
      __pyx_L10_except_error:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L1_error;
      __pyx_L12_try_return:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L0;
      __pyx_L11_except_return:;
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      goto __pyx_L0;
    }

    /* "pyoctomap/octomap.pyx":689
 *             else:
 *                 raise NullPointerException
 *         elif isinstance(node, (SimpleTreeIterator, SimpleLeafIterator, SimpleLeafBBXIterator)):             # <<<<<<<<<<<<<<
 *             # Handle iterator case - use coordinate to search for the node
 *             try:
 */
  }

  /* "pyoctomap/octomap.pyx":703
 *                 return False
 *         else:
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")             # <<<<<<<<<<<<<<
 * 
 *     def getLabels(self, np.ndarray[DOUBLE_t, ndim=2] points):
 */
  /*else*/ {
    __pyx_t_8 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_node)), __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Expected_OcTreeNode_or_iterator, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(1, 703, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":680
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")
 * 
 *     def isNodeAtThreshold(self, node):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d search_point
 *         cdef defs.OcTreeNode* found_node
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.isNodeAtThreshold", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_coord);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":705
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")
 * 
 *     def getLabels(self, np.ndarray[DOUBLE_t, ndim=2] points):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[DOUBLE_t, ndim=1] pt
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_33getLabels(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_33getLabels = {"getLabels", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_33getLabels, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_33getLabels(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_points = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLabels (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_points)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 705, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getLabels") < 0)) __PYX_ERR(1, 705, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_points = ((PyArrayObject *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getLabels", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 705, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getLabels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_points), __pyx_ptype_5numpy_ndarray, 1, "points", 0))) __PYX_ERR(1, 705, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_32getLabels(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_points);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_32getLabels(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_points) {
  int __pyx_v_i;
  PyArrayObject *__pyx_v_pt = 0;
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key = 0;
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_node = 0;
  PyArrayObject *__pyx_v_labels = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_labels;
  __Pyx_Buffer __pyx_pybuffer_labels;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pt;
  __Pyx_Buffer __pyx_pybuffer_pt;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyArrayObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  __pyx_t_5numpy_int32_t __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getLabels", 1);
  __pyx_pybuffer_pt.pybuffer.buf = NULL;
  __pyx_pybuffer_pt.refcount = 0;
  __pyx_pybuffernd_pt.data = NULL;
  __pyx_pybuffernd_pt.rcbuffer = &__pyx_pybuffer_pt;
  __pyx_pybuffer_labels.pybuffer.buf = NULL;
  __pyx_pybuffer_labels.refcount = 0;
  __pyx_pybuffernd_labels.data = NULL;
  __pyx_pybuffernd_labels.rcbuffer = &__pyx_pybuffer_labels;
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(1, 705, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];

  /* "pyoctomap/octomap.pyx":712
 *         # -1: unknown, 0: empty, 1: occupied
 *         cdef np.ndarray[np.int32_t, ndim=1] labels = \
 *             np.full((points.shape[0],), -1, dtype=np.int32)             # <<<<<<<<<<<<<<
 *         for i, pt in enumerate(points):
 *             key = self.coordToKey(pt)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_full); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_npy_intp((__pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_points))[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(1, 712, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3)) __PYX_ERR(1, 712, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_neg_1)) __PYX_ERR(1, 712, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 712, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_labels.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_labels = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_labels.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 711, __pyx_L1_error)
    } else {__pyx_pybuffernd_labels.diminfo[0].strides = __pyx_pybuffernd_labels.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_labels.diminfo[0].shape = __pyx_pybuffernd_labels.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_labels = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pyoctomap/octomap.pyx":713
 *         cdef np.ndarray[np.int32_t, ndim=1] labels = \
 *             np.full((points.shape[0],), -1, dtype=np.int32)
 *         for i, pt in enumerate(points):             # <<<<<<<<<<<<<<
 *             key = self.coordToKey(pt)
 *             node = self.search(key)
 */
  __pyx_t_7 = 0;
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_points))) || PyTuple_CheckExact(((PyObject *)__pyx_v_points))) {
    __pyx_t_5 = ((PyObject *)__pyx_v_points); __Pyx_INCREF(__pyx_t_5);
    __pyx_t_8 = 0;
    __pyx_t_9 = NULL;
  } else {
    __pyx_t_8 = -1; __pyx_t_5 = PyObject_GetIter(((PyObject *)__pyx_v_points)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 713, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_9)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 713, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(1, 713, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 713, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 713, __pyx_L1_error)
          #endif
          if (__pyx_t_8 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(1, 713, __pyx_L1_error)
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 713, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_9(__pyx_t_5);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 713, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 713, __pyx_L1_error)
    __pyx_t_10 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pt.rcbuffer->pybuffer);
      __pyx_t_11 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pt.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_11 < 0)) {
        PyErr_Fetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pt.rcbuffer->pybuffer, (PyObject*)__pyx_v_pt, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        }
        __pyx_t_12 = __pyx_t_13 = __pyx_t_14 = 0;
      }
      __pyx_pybuffernd_pt.diminfo[0].strides = __pyx_pybuffernd_pt.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pt.diminfo[0].shape = __pyx_pybuffernd_pt.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(1, 713, __pyx_L1_error)
    }
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_pt, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;
    __pyx_v_i = __pyx_t_7;
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "pyoctomap/octomap.pyx":714
 *             np.full((points.shape[0],), -1, dtype=np.int32)
 *         for i, pt in enumerate(points):
 *             key = self.coordToKey(pt)             # <<<<<<<<<<<<<<
 *             node = self.search(key)
 *             if node is None:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coordToKey); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_pt)};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9pyoctomap_7octomap_OcTreeKey))))) __PYX_ERR(1, 714, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_key, ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pyoctomap/octomap.pyx":715
 *         for i, pt in enumerate(points):
 *             key = self.coordToKey(pt)
 *             node = self.search(key)             # <<<<<<<<<<<<<<
 *             if node is None:
 *                 labels[i] = -1
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_search); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_key)};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_9pyoctomap_7octomap_OcTreeNode))))) __PYX_ERR(1, 715, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_node, ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "pyoctomap/octomap.pyx":716
 *             key = self.coordToKey(pt)
 *             node = self.search(key)
 *             if node is None:             # <<<<<<<<<<<<<<
 *                 labels[i] = -1
 *             else:
 */
    __pyx_t_15 = (((PyObject *)__pyx_v_node) == Py_None);
    if (__pyx_t_15) {

      /* "pyoctomap/octomap.pyx":717
 *             node = self.search(key)
 *             if node is None:
 *                 labels[i] = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 try:
 */
      __pyx_t_16 = __pyx_v_i;
      __pyx_t_11 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_labels.diminfo[0].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_11 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_labels.diminfo[0].shape)) __pyx_t_11 = 0;
      if (unlikely(__pyx_t_11 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_11);
        __PYX_ERR(1, 717, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_labels.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_labels.diminfo[0].strides) = -1;

      /* "pyoctomap/octomap.pyx":716
 *             key = self.coordToKey(pt)
 *             node = self.search(key)
 *             if node is None:             # <<<<<<<<<<<<<<
 *                 labels[i] = -1
 *             else:
 */
      goto __pyx_L5;
    }

    /* "pyoctomap/octomap.pyx":719
 *                 labels[i] = -1
 *             else:
 *                 try:             # <<<<<<<<<<<<<<
 *                     labels[i] = 1 if self.isNodeOccupied(node) else 0
 *                 except Exception:
 */
    /*else*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_12);
        /*try:*/ {

          /* "pyoctomap/octomap.pyx":720
 *             else:
 *                 try:
 *                     labels[i] = 1 if self.isNodeOccupied(node) else 0             # <<<<<<<<<<<<<<
 *                 except Exception:
 *                     labels[i] = -1
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isNodeOccupied); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 720, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = NULL;
          __pyx_t_11 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_2)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_2);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_11 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_node)};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 720, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(1, 720, __pyx_L6_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__pyx_t_15) {
            __pyx_t_17 = 1;
          } else {
            __pyx_t_17 = 0;
          }
          __pyx_t_16 = __pyx_v_i;
          __pyx_t_11 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_labels.diminfo[0].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_11 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_labels.diminfo[0].shape)) __pyx_t_11 = 0;
          if (unlikely(__pyx_t_11 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_11);
            __PYX_ERR(1, 720, __pyx_L6_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_labels.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_labels.diminfo[0].strides) = __pyx_t_17;

          /* "pyoctomap/octomap.pyx":719
 *                 labels[i] = -1
 *             else:
 *                 try:             # <<<<<<<<<<<<<<
 *                     labels[i] = 1 if self.isNodeOccupied(node) else 0
 *                 except Exception:
 */
        }
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L13_try_end;
        __pyx_L6_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "pyoctomap/octomap.pyx":721
 *                 try:
 *                     labels[i] = 1 if self.isNodeOccupied(node) else 0
 *                 except Exception:             # <<<<<<<<<<<<<<
 *                     labels[i] = -1
 *         return labels
 */
        __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
        if (__pyx_t_11) {
          __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getLabels", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_2) < 0) __PYX_ERR(1, 721, __pyx_L8_except_error)
          __Pyx_XGOTREF(__pyx_t_3);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_2);

          /* "pyoctomap/octomap.pyx":722
 *                     labels[i] = 1 if self.isNodeOccupied(node) else 0
 *                 except Exception:
 *                     labels[i] = -1             # <<<<<<<<<<<<<<
 *         return labels
 * 
 */
          __pyx_t_16 = __pyx_v_i;
          __pyx_t_11 = -1;
          if (__pyx_t_16 < 0) {
            __pyx_t_16 += __pyx_pybuffernd_labels.diminfo[0].shape;
            if (unlikely(__pyx_t_16 < 0)) __pyx_t_11 = 0;
          } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_labels.diminfo[0].shape)) __pyx_t_11 = 0;
          if (unlikely(__pyx_t_11 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_11);
            __PYX_ERR(1, 722, __pyx_L8_except_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int32_t *, __pyx_pybuffernd_labels.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_labels.diminfo[0].strides) = -1;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L7_exception_handled;
        }
        goto __pyx_L8_except_error;

        /* "pyoctomap/octomap.pyx":719
 *                 labels[i] = -1
 *             else:
 *                 try:             # <<<<<<<<<<<<<<
 *                     labels[i] = 1 if self.isNodeOccupied(node) else 0
 *                 except Exception:
 */
        __pyx_L8_except_error:;
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
        goto __pyx_L1_error;
        __pyx_L7_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_14);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
        __pyx_L13_try_end:;
      }
    }
    __pyx_L5:;

    /* "pyoctomap/octomap.pyx":713
 *         cdef np.ndarray[np.int32_t, ndim=1] labels = \
 *             np.full((points.shape[0],), -1, dtype=np.int32)
 *         for i, pt in enumerate(points):             # <<<<<<<<<<<<<<
 *             key = self.coordToKey(pt)
 *             node = self.search(key)
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pyoctomap/octomap.pyx":723
 *                 except Exception:
 *                     labels[i] = -1
 *         return labels             # <<<<<<<<<<<<<<
 * 
 *     def extractPointCloud(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_labels);
  __pyx_r = ((PyObject *)__pyx_v_labels);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":705
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")
 * 
 *     def getLabels(self, np.ndarray[DOUBLE_t, ndim=2] points):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[DOUBLE_t, ndim=1] pt
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pt.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getLabels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pt.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pt);
  __Pyx_XDECREF((PyObject *)__pyx_v_key);
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XDECREF((PyObject *)__pyx_v_labels);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":725
 *         return labels
 * 
 *     def extractPointCloud(self):             # <<<<<<<<<<<<<<
 *         cdef float resolution = self.getResolution()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_35extractPointCloud(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_35extractPointCloud = {"extractPointCloud", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_35extractPointCloud, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_35extractPointCloud(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("extractPointCloud (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("extractPointCloud", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "extractPointCloud", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_34extractPointCloud(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_34extractPointCloud(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  float __pyx_v_resolution;
  PyObject *__pyx_v_occupied = 0;
  PyObject *__pyx_v_empty = 0;
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_it = 0;
  CYTHON_UNUSED float __pyx_v_size;
  int __pyx_v_is_occupied;
  PyArrayObject *__pyx_v_center = 0;
  PyArrayObject *__pyx_v_origin = 0;
  PyArrayObject *__pyx_v_indices = 0;
  PyArrayObject *__pyx_v_points = 0;
  int __pyx_v_dimension;
  PyObject *__pyx_v_raw_dimension = NULL;
  PyArrayObject *__pyx_v_occupied_arr = 0;
  PyArrayObject *__pyx_v_empty_arr = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_center;
  __Pyx_Buffer __pyx_pybuffer_center;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_empty_arr;
  __Pyx_Buffer __pyx_pybuffer_empty_arr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_indices;
  __Pyx_Buffer __pyx_pybuffer_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_occupied_arr;
  __Pyx_Buffer __pyx_pybuffer_occupied_arr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_origin;
  __Pyx_Buffer __pyx_pybuffer_origin;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  float __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  long __pyx_t_15;
  int __pyx_t_16;
  PyArrayObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyArrayObject *__pyx_t_23 = NULL;
  PyArrayObject *__pyx_t_24 = NULL;
  int __pyx_t_25;
  PyArrayObject *__pyx_t_26 = NULL;
  PyArrayObject *__pyx_t_27 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("extractPointCloud", 1);
  __pyx_pybuffer_center.pybuffer.buf = NULL;
  __pyx_pybuffer_center.refcount = 0;
  __pyx_pybuffernd_center.data = NULL;
  __pyx_pybuffernd_center.rcbuffer = &__pyx_pybuffer_center;
  __pyx_pybuffer_origin.pybuffer.buf = NULL;
  __pyx_pybuffer_origin.refcount = 0;
  __pyx_pybuffernd_origin.data = NULL;
  __pyx_pybuffernd_origin.rcbuffer = &__pyx_pybuffer_origin;
  __pyx_pybuffer_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_indices.refcount = 0;
  __pyx_pybuffernd_indices.data = NULL;
  __pyx_pybuffernd_indices.rcbuffer = &__pyx_pybuffer_indices;
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_occupied_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_occupied_arr.refcount = 0;
  __pyx_pybuffernd_occupied_arr.data = NULL;
  __pyx_pybuffernd_occupied_arr.rcbuffer = &__pyx_pybuffer_occupied_arr;
  __pyx_pybuffer_empty_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_empty_arr.refcount = 0;
  __pyx_pybuffernd_empty_arr.data = NULL;
  __pyx_pybuffernd_empty_arr.rcbuffer = &__pyx_pybuffer_empty_arr;

  /* "pyoctomap/octomap.pyx":726
 * 
 *     def extractPointCloud(self):
 *         cdef float resolution = self.getResolution()             # <<<<<<<<<<<<<<
 * 
 *         cdef list occupied = []
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getResolution); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_resolution = __pyx_t_5;

  /* "pyoctomap/octomap.pyx":728
 *         cdef float resolution = self.getResolution()
 * 
 *         cdef list occupied = []             # <<<<<<<<<<<<<<
 *         cdef list empty = []
 *         cdef SimpleLeafIterator it
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_occupied = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":729
 * 
 *         cdef list occupied = []
 *         cdef list empty = []             # <<<<<<<<<<<<<<
 *         cdef SimpleLeafIterator it
 *         cdef float size
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_empty = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":739
 *         cdef np.ndarray keep
 *         cdef int dimension
 *         for it in self.begin_leafs():             # <<<<<<<<<<<<<<
 *             # Try to get occupancy status from the iterator
 *             try:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_begin_leafs); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 739, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 739, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(1, 739, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 739, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(1, 739, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 739, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 739, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator))))) __PYX_ERR(1, 739, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_it, ((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":741
 *         for it in self.begin_leafs():
 *             # Try to get occupancy status from the iterator
 *             try:             # <<<<<<<<<<<<<<
 *                 is_occupied = self.isNodeOccupied(it)
 *             except:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "pyoctomap/octomap.pyx":742
 *             # Try to get occupancy status from the iterator
 *             try:
 *                 is_occupied = self.isNodeOccupied(it)             # <<<<<<<<<<<<<<
 *             except:
 *                 # Fallback: assume occupied if we can't determine status
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_isNodeOccupied); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 742, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = NULL;
        __pyx_t_4 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_4 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, ((PyObject *)__pyx_v_it)};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 742, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 742, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_is_occupied = __pyx_t_4;

        /* "pyoctomap/octomap.pyx":741
 *         for it in self.begin_leafs():
 *             # Try to get occupancy status from the iterator
 *             try:             # <<<<<<<<<<<<<<
 *                 is_occupied = self.isNodeOccupied(it)
 *             except:
 */
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "pyoctomap/octomap.pyx":743
 *             try:
 *                 is_occupied = self.isNodeOccupied(it)
 *             except:             # <<<<<<<<<<<<<<
 *                 # Fallback: assume occupied if we can't determine status
 *                 is_occupied = True
 */
      /*except:*/ {
        __Pyx_AddTraceback("pyoctomap.octomap.OcTree.extractPointCloud", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_11) < 0) __PYX_ERR(1, 743, __pyx_L7_except_error)
        __Pyx_XGOTREF(__pyx_t_1);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_11);

        /* "pyoctomap/octomap.pyx":745
 *             except:
 *                 # Fallback: assume occupied if we can't determine status
 *                 is_occupied = True             # <<<<<<<<<<<<<<
 *             size = it.getSize()
 *             center = np.array(it.getCoordinate(), dtype=np.float64)
 */
        __pyx_v_is_occupied = 1;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L6_exception_handled;
      }

      /* "pyoctomap/octomap.pyx":741
 *         for it in self.begin_leafs():
 *             # Try to get occupancy status from the iterator
 *             try:             # <<<<<<<<<<<<<<
 *                 is_occupied = self.isNodeOccupied(it)
 *             except:
 */
      __pyx_L7_except_error:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_L12_try_end:;
    }

    /* "pyoctomap/octomap.pyx":746
 *                 # Fallback: assume occupied if we can't determine status
 *                 is_occupied = True
 *             size = it.getSize()             # <<<<<<<<<<<<<<
 *             center = np.array(it.getCoordinate(), dtype=np.float64)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_it), __pyx_n_s_getSize); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
      __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 746, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 746, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_size = __pyx_t_5;

    /* "pyoctomap/octomap.pyx":747
 *                 is_occupied = True
 *             size = it.getSize()
 *             center = np.array(it.getCoordinate(), dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *             # Limit dimension to prevent memory issues
 */
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_it), __pyx_n_s_getCoordinate); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_12, NULL};
      __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 747, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_11);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_11)) __PYX_ERR(1, 747, __pyx_L1_error);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_float64); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_13) < 0) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 747, __pyx_L1_error)
    __pyx_t_14 = ((PyArrayObject *)__pyx_t_13);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_center.rcbuffer->pybuffer);
      __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_center.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_4 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_center.rcbuffer->pybuffer, (PyObject*)__pyx_v_center, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_center.diminfo[0].strides = __pyx_pybuffernd_center.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_center.diminfo[0].shape = __pyx_pybuffernd_center.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 747, __pyx_L1_error)
    }
    __pyx_t_14 = 0;
    __Pyx_XDECREF_SET(__pyx_v_center, ((PyArrayObject *)__pyx_t_13));
    __pyx_t_13 = 0;

    /* "pyoctomap/octomap.pyx":750
 * 
 *             # Limit dimension to prevent memory issues
 *             raw_dimension = max(1, round(it.getSize() / resolution))             # <<<<<<<<<<<<<<
 *             dimension = min(raw_dimension, 100)  # Cap at 100 to prevent memory issues
 *             origin = center - (dimension / 2 - 0.5) * resolution
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_it), __pyx_n_s_getSize); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
      __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __pyx_t_11 = PyFloat_FromDouble(__pyx_v_resolution); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_13, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_round, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_15 = 1;
    __pyx_t_13 = __Pyx_PyInt_From_long(__pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_11, __pyx_t_13, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 750, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_16 < 0))) __PYX_ERR(1, 750, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_16) {
      __Pyx_INCREF(__pyx_t_11);
      __pyx_t_1 = __pyx_t_11;
    } else {
      __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 750, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __pyx_t_3;
      __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_raw_dimension, __pyx_t_11);
    __pyx_t_11 = 0;

    /* "pyoctomap/octomap.pyx":751
 *             # Limit dimension to prevent memory issues
 *             raw_dimension = max(1, round(it.getSize() / resolution))
 *             dimension = min(raw_dimension, 100)  # Cap at 100 to prevent memory issues             # <<<<<<<<<<<<<<
 *             origin = center - (dimension / 2 - 0.5) * resolution
 *             indices = np.column_stack(np.nonzero(np.ones((dimension, dimension, dimension))))
 */
    __pyx_t_15 = 0x64;
    __Pyx_INCREF(__pyx_v_raw_dimension);
    __pyx_t_11 = __pyx_v_raw_dimension;
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = PyObject_RichCompare(__pyx_t_3, __pyx_t_11, Py_LT); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 751, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_16 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely((__pyx_t_16 < 0))) __PYX_ERR(1, 751, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (__pyx_t_16) {
      __pyx_t_13 = __Pyx_PyInt_From_long(__pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 751, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_1 = __pyx_t_13;
      __pyx_t_13 = 0;
    } else {
      __Pyx_INCREF(__pyx_t_11);
      __pyx_t_1 = __pyx_t_11;
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 751, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_dimension = __pyx_t_4;

    /* "pyoctomap/octomap.pyx":752
 *             raw_dimension = max(1, round(it.getSize() / resolution))
 *             dimension = min(raw_dimension, 100)  # Cap at 100 to prevent memory issues
 *             origin = center - (dimension / 2 - 0.5) * resolution             # <<<<<<<<<<<<<<
 *             indices = np.column_stack(np.nonzero(np.ones((dimension, dimension, dimension))))
 *             points = origin + indices * np.array(resolution)
 */
    __pyx_t_1 = PyFloat_FromDouble((((((double)__pyx_v_dimension) / 2.0) - 0.5) * __pyx_v_resolution)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = PyNumber_Subtract(((PyObject *)__pyx_v_center), __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 752, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 752, __pyx_L1_error)
    __pyx_t_17 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_origin.rcbuffer->pybuffer);
      __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_origin.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_4 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_origin.rcbuffer->pybuffer, (PyObject*)__pyx_v_origin, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_origin.diminfo[0].strides = __pyx_pybuffernd_origin.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_origin.diminfo[0].shape = __pyx_pybuffernd_origin.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 752, __pyx_L1_error)
    }
    __pyx_t_17 = 0;
    __Pyx_XDECREF_SET(__pyx_v_origin, ((PyArrayObject *)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "pyoctomap/octomap.pyx":753
 *             dimension = min(raw_dimension, 100)  # Cap at 100 to prevent memory issues
 *             origin = center - (dimension / 2 - 0.5) * resolution
 *             indices = np.column_stack(np.nonzero(np.ones((dimension, dimension, dimension))))             # <<<<<<<<<<<<<<
 *             points = origin + indices * np.array(resolution)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_column_stack); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_nonzero); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_np); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_ones); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    __pyx_t_18 = __Pyx_PyInt_From_int(__pyx_v_dimension); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_18);
    __pyx_t_20 = __Pyx_PyInt_From_int(__pyx_v_dimension); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_21 = __Pyx_PyInt_From_int(__pyx_v_dimension); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_21);
    __pyx_t_22 = PyTuple_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 753, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_GIVEREF(__pyx_t_18);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_18)) __PYX_ERR(1, 753, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_20);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_t_20)) __PYX_ERR(1, 753, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_21);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_22, 2, __pyx_t_21)) __PYX_ERR(1, 753, __pyx_L1_error);
    __pyx_t_18 = 0;
    __pyx_t_20 = 0;
    __pyx_t_21 = 0;
    __pyx_t_21 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_19))) {
      __pyx_t_21 = PyMethod_GET_SELF(__pyx_t_19);
      if (likely(__pyx_t_21)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
        __Pyx_INCREF(__pyx_t_21);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_19, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_21, __pyx_t_22};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_19, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    }
    __pyx_t_19 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_19, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __pyx_t_12 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_1};
      __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 753, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 753, __pyx_L1_error)
    __pyx_t_23 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
      __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_23, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_4 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_indices.diminfo[1].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_indices.diminfo[1].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[1];
      if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 753, __pyx_L1_error)
    }
    __pyx_t_23 = 0;
    __Pyx_XDECREF_SET(__pyx_v_indices, ((PyArrayObject *)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "pyoctomap/octomap.pyx":754
 *             origin = center - (dimension / 2 - 0.5) * resolution
 *             indices = np.column_stack(np.nonzero(np.ones((dimension, dimension, dimension))))
 *             points = origin + indices * np.array(resolution)             # <<<<<<<<<<<<<<
 * 
 *             if is_occupied:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = PyFloat_FromDouble(__pyx_v_resolution); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_12 = NULL;
    __pyx_t_4 = 0;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_13};
      __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 754, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_v_indices), __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_11 = PyNumber_Add(((PyObject *)__pyx_v_origin), __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 754, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 754, __pyx_L1_error)
    __pyx_t_24 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
      __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_t_24, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_4 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
      if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 754, __pyx_L1_error)
    }
    __pyx_t_24 = 0;
    __Pyx_XDECREF_SET(__pyx_v_points, ((PyArrayObject *)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "pyoctomap/octomap.pyx":756
 *             points = origin + indices * np.array(resolution)
 * 
 *             if is_occupied:             # <<<<<<<<<<<<<<
 *                 occupied.append(points)
 *             else:
 */
    __pyx_t_16 = (__pyx_v_is_occupied != 0);
    if (__pyx_t_16) {

      /* "pyoctomap/octomap.pyx":757
 * 
 *             if is_occupied:
 *                 occupied.append(points)             # <<<<<<<<<<<<<<
 *             else:
 *                 empty.append(points)
 */
      __pyx_t_25 = __Pyx_PyList_Append(__pyx_v_occupied, ((PyObject *)__pyx_v_points)); if (unlikely(__pyx_t_25 == ((int)-1))) __PYX_ERR(1, 757, __pyx_L1_error)

      /* "pyoctomap/octomap.pyx":756
 *             points = origin + indices * np.array(resolution)
 * 
 *             if is_occupied:             # <<<<<<<<<<<<<<
 *                 occupied.append(points)
 *             else:
 */
      goto __pyx_L15;
    }

    /* "pyoctomap/octomap.pyx":759
 *                 occupied.append(points)
 *             else:
 *                 empty.append(points)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[DOUBLE_t, ndim=2] occupied_arr
 */
    /*else*/ {
      __pyx_t_25 = __Pyx_PyList_Append(__pyx_v_empty, ((PyObject *)__pyx_v_points)); if (unlikely(__pyx_t_25 == ((int)-1))) __PYX_ERR(1, 759, __pyx_L1_error)
    }
    __pyx_L15:;

    /* "pyoctomap/octomap.pyx":739
 *         cdef np.ndarray keep
 *         cdef int dimension
 *         for it in self.begin_leafs():             # <<<<<<<<<<<<<<
 *             # Try to get occupancy status from the iterator
 *             try:
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyoctomap/octomap.pyx":763
 *         cdef np.ndarray[DOUBLE_t, ndim=2] occupied_arr
 *         cdef np.ndarray[DOUBLE_t, ndim=2] empty_arr
 *         if len(occupied) == 0:             # <<<<<<<<<<<<<<
 *             occupied_arr = np.zeros((0, 3), dtype=float)
 *         else:
 */
  __pyx_t_6 = __Pyx_PyList_GET_SIZE(__pyx_v_occupied); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 763, __pyx_L1_error)
  __pyx_t_16 = (__pyx_t_6 == 0);
  if (__pyx_t_16) {

    /* "pyoctomap/octomap.pyx":764
 *         cdef np.ndarray[DOUBLE_t, ndim=2] empty_arr
 *         if len(occupied) == 0:
 *             occupied_arr = np.zeros((0, 3), dtype=float)             # <<<<<<<<<<<<<<
 *         else:
 *             occupied_arr = np.concatenate(occupied, axis=0)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(1, 764, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__10, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 764, __pyx_L1_error)
    __pyx_t_26 = ((PyArrayObject *)__pyx_t_1);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer);
      __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_26, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_4 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer, (PyObject*)__pyx_v_occupied_arr, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_occupied_arr.diminfo[0].strides = __pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_occupied_arr.diminfo[0].shape = __pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_occupied_arr.diminfo[1].strides = __pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_occupied_arr.diminfo[1].shape = __pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer.shape[1];
      if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 764, __pyx_L1_error)
    }
    __pyx_t_26 = 0;
    __pyx_v_occupied_arr = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":763
 *         cdef np.ndarray[DOUBLE_t, ndim=2] occupied_arr
 *         cdef np.ndarray[DOUBLE_t, ndim=2] empty_arr
 *         if len(occupied) == 0:             # <<<<<<<<<<<<<<
 *             occupied_arr = np.zeros((0, 3), dtype=float)
 *         else:
 */
    goto __pyx_L17;
  }

  /* "pyoctomap/octomap.pyx":766
 *             occupied_arr = np.zeros((0, 3), dtype=float)
 *         else:
 *             occupied_arr = np.concatenate(occupied, axis=0)             # <<<<<<<<<<<<<<
 *         if len(empty) == 0:
 *             empty_arr = np.zeros((0, 3), dtype=float)
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_occupied);
    __Pyx_GIVEREF(__pyx_v_occupied);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_occupied)) __PYX_ERR(1, 766, __pyx_L1_error);
    __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(1, 766, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 766, __pyx_L1_error)
    __pyx_t_26 = ((PyArrayObject *)__pyx_t_13);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer);
      __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_26, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_4 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer, (PyObject*)__pyx_v_occupied_arr, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_occupied_arr.diminfo[0].strides = __pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_occupied_arr.diminfo[0].shape = __pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_occupied_arr.diminfo[1].strides = __pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_occupied_arr.diminfo[1].shape = __pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer.shape[1];
      if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 766, __pyx_L1_error)
    }
    __pyx_t_26 = 0;
    __pyx_v_occupied_arr = ((PyArrayObject *)__pyx_t_13);
    __pyx_t_13 = 0;
  }
  __pyx_L17:;

  /* "pyoctomap/octomap.pyx":767
 *         else:
 *             occupied_arr = np.concatenate(occupied, axis=0)
 *         if len(empty) == 0:             # <<<<<<<<<<<<<<
 *             empty_arr = np.zeros((0, 3), dtype=float)
 *         else:
 */
  __pyx_t_6 = __Pyx_PyList_GET_SIZE(__pyx_v_empty); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 767, __pyx_L1_error)
  __pyx_t_16 = (__pyx_t_6 == 0);
  if (__pyx_t_16) {

    /* "pyoctomap/octomap.pyx":768
 *             occupied_arr = np.concatenate(occupied, axis=0)
 *         if len(empty) == 0:
 *             empty_arr = np.zeros((0, 3), dtype=float)             # <<<<<<<<<<<<<<
 *         else:
 *             empty_arr = np.concatenate(empty, axis=0)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_zeros); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(1, 768, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_tuple__10, __pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 768, __pyx_L1_error)
    __pyx_t_27 = ((PyArrayObject *)__pyx_t_1);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_empty_arr.rcbuffer->pybuffer);
      __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_empty_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_27, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_4 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_empty_arr.rcbuffer->pybuffer, (PyObject*)__pyx_v_empty_arr, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
        __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
      }
      __pyx_pybuffernd_empty_arr.diminfo[0].strides = __pyx_pybuffernd_empty_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_empty_arr.diminfo[0].shape = __pyx_pybuffernd_empty_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_empty_arr.diminfo[1].strides = __pyx_pybuffernd_empty_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_empty_arr.diminfo[1].shape = __pyx_pybuffernd_empty_arr.rcbuffer->pybuffer.shape[1];
      if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 768, __pyx_L1_error)
    }
    __pyx_t_27 = 0;
    __pyx_v_empty_arr = ((PyArrayObject *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":767
 *         else:
 *             occupied_arr = np.concatenate(occupied, axis=0)
 *         if len(empty) == 0:             # <<<<<<<<<<<<<<
 *             empty_arr = np.zeros((0, 3), dtype=float)
 *         else:
 */
    goto __pyx_L18;
  }

  /* "pyoctomap/octomap.pyx":770
 *             empty_arr = np.zeros((0, 3), dtype=float)
 *         else:
 *             empty_arr = np.concatenate(empty, axis=0)             # <<<<<<<<<<<<<<
 *         return occupied_arr, empty_arr
 * 
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_concatenate); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_empty);
    __Pyx_GIVEREF(__pyx_v_empty);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_empty)) __PYX_ERR(1, 770, __pyx_L1_error);
    __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(1, 770, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_1, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 770, __pyx_L1_error)
    __pyx_t_27 = ((PyArrayObject *)__pyx_t_2);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_empty_arr.rcbuffer->pybuffer);
      __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_empty_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_27, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_4 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_empty_arr.rcbuffer->pybuffer, (PyObject*)__pyx_v_empty_arr, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
        __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
      }
      __pyx_pybuffernd_empty_arr.diminfo[0].strides = __pyx_pybuffernd_empty_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_empty_arr.diminfo[0].shape = __pyx_pybuffernd_empty_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_empty_arr.diminfo[1].strides = __pyx_pybuffernd_empty_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_empty_arr.diminfo[1].shape = __pyx_pybuffernd_empty_arr.rcbuffer->pybuffer.shape[1];
      if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 770, __pyx_L1_error)
    }
    __pyx_t_27 = 0;
    __pyx_v_empty_arr = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L18:;

  /* "pyoctomap/octomap.pyx":771
 *         else:
 *             empty_arr = np.concatenate(empty, axis=0)
 *         return occupied_arr, empty_arr             # <<<<<<<<<<<<<<
 * 
 *     def insertPointCloud(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_occupied_arr);
  __Pyx_GIVEREF((PyObject *)__pyx_v_occupied_arr);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_occupied_arr))) __PYX_ERR(1, 771, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_empty_arr);
  __Pyx_GIVEREF((PyObject *)__pyx_v_empty_arr);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_empty_arr))) __PYX_ERR(1, 771, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":725
 *         return labels
 * 
 *     def extractPointCloud(self):             # <<<<<<<<<<<<<<
 *         cdef float resolution = self.getResolution()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_center.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_empty_arr.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_origin.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.extractPointCloud", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_center.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_empty_arr.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_occupied_arr.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_origin.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_occupied);
  __Pyx_XDECREF(__pyx_v_empty);
  __Pyx_XDECREF((PyObject *)__pyx_v_it);
  __Pyx_XDECREF((PyObject *)__pyx_v_center);
  __Pyx_XDECREF((PyObject *)__pyx_v_origin);
  __Pyx_XDECREF((PyObject *)__pyx_v_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_raw_dimension);
  __Pyx_XDECREF((PyObject *)__pyx_v_occupied_arr);
  __Pyx_XDECREF((PyObject *)__pyx_v_empty_arr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":773
 *         return occupied_arr, empty_arr
 * 
 *     def insertPointCloud(self,             # <<<<<<<<<<<<<<
 *                          pointcloud,
 *                          origin,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_37insertPointCloud(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_36insertPointCloud, "\n        Integrate a Pointcloud (in global reference frame), parallelized with OpenMP.\n\n        Special care is taken that each voxel in the map is updated only once, and occupied\n        nodes have a preference over free ones. This avoids holes in the floor from mutual\n        deletion.\n        :param pointcloud: Pointcloud (measurement endpoints), in global reference frame\n        :param origin: measurement origin in global reference frame\n        :param maxrange: maximum range for how long individual beams are inserted (default -1: complete beam)\n        :param : whether update of inner nodes is omitted after the update (default: false).\n        This speeds up the insertion, but you need to call updateInnerOccupancy() when done.\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_37insertPointCloud = {"insertPointCloud", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_37insertPointCloud, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_36insertPointCloud};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_37insertPointCloud(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_pointcloud = 0;
  PyObject *__pyx_v_origin = 0;
  PyObject *__pyx_v_maxrange = 0;
  PyObject *__pyx_v_lazy_eval = 0;
  PyObject *__pyx_v_discretize = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insertPointCloud (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pointcloud,&__pyx_n_s_origin,&__pyx_n_s_maxrange,&__pyx_n_s_lazy_eval,&__pyx_n_s_discretize,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_float_neg_1_));

    /* "pyoctomap/octomap.pyx":777
 *                          origin,
 *                          maxrange=-1.,
 *                          lazy_eval=False,             # <<<<<<<<<<<<<<
 *                          discretize=False):
 *         """
 */
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));

    /* "pyoctomap/octomap.pyx":778
 *                          maxrange=-1.,
 *                          lazy_eval=False,
 *                          discretize=False):             # <<<<<<<<<<<<<<
 *         """
 *         Integrate a Pointcloud (in global reference frame), parallelized with OpenMP.
 */
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pointcloud)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 773, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_origin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 773, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("insertPointCloud", 0, 2, 5, 1); __PYX_ERR(1, 773, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxrange);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 773, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lazy_eval);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 773, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_discretize);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 773, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "insertPointCloud") < 0)) __PYX_ERR(1, 773, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pointcloud = values[0];
    __pyx_v_origin = values[1];
    __pyx_v_maxrange = values[2];
    __pyx_v_lazy_eval = values[3];
    __pyx_v_discretize = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insertPointCloud", 0, 2, 5, __pyx_nargs); __PYX_ERR(1, 773, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.insertPointCloud", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_36insertPointCloud(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_pointcloud, __pyx_v_origin, __pyx_v_maxrange, __pyx_v_lazy_eval, __pyx_v_discretize);

  /* "pyoctomap/octomap.pyx":773
 *         return occupied_arr, empty_arr
 * 
 *     def insertPointCloud(self,             # <<<<<<<<<<<<<<
 *                          pointcloud,
 *                          origin,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_36insertPointCloud(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_pointcloud, PyObject *__pyx_v_origin, PyObject *__pyx_v_maxrange, PyObject *__pyx_v_lazy_eval, PyObject *__pyx_v_discretize) {
  octomap::Pointcloud __pyx_v_pc;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  octomap::Pointcloud __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  float __pyx_t_9;
  float __pyx_t_10;
  float __pyx_t_11;
  octomath::Vector3 __pyx_t_12;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("insertPointCloud", 0);
  __Pyx_INCREF(__pyx_v_pointcloud);
  __Pyx_INCREF(__pyx_v_origin);

  /* "pyoctomap/octomap.pyx":792
 *         """
 *         # Upcast inputs to float64 to satisfy C++ interface
 *         pointcloud = np.ascontiguousarray(pointcloud, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         origin = np.ascontiguousarray(origin, dtype=np.float64)
 *         cdef defs.Pointcloud pc = defs.Pointcloud()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_pointcloud);
  __Pyx_GIVEREF(__pyx_v_pointcloud);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_pointcloud)) __PYX_ERR(1, 792, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_pointcloud, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "pyoctomap/octomap.pyx":793
 *         # Upcast inputs to float64 to satisfy C++ interface
 *         pointcloud = np.ascontiguousarray(pointcloud, dtype=np.float64)
 *         origin = np.ascontiguousarray(origin, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef defs.Pointcloud pc = defs.Pointcloud()
 *         for p in pointcloud:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_origin);
  __Pyx_GIVEREF(__pyx_v_origin);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_origin)) __PYX_ERR(1, 793, __pyx_L1_error);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_origin, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":794
 *         pointcloud = np.ascontiguousarray(pointcloud, dtype=np.float64)
 *         origin = np.ascontiguousarray(origin, dtype=np.float64)
 *         cdef defs.Pointcloud pc = defs.Pointcloud()             # <<<<<<<<<<<<<<
 *         for p in pointcloud:
 *             pc.push_back(<float>p[0],
 */
  try {
    __pyx_t_6 = octomap::Pointcloud();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 794, __pyx_L1_error)
  }
  __pyx_v_pc = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6);

  /* "pyoctomap/octomap.pyx":795
 *         origin = np.ascontiguousarray(origin, dtype=np.float64)
 *         cdef defs.Pointcloud pc = defs.Pointcloud()
 *         for p in pointcloud:             # <<<<<<<<<<<<<<
 *             pc.push_back(<float>p[0],
 *                          <float>p[1],
 */
  if (likely(PyList_CheckExact(__pyx_v_pointcloud)) || PyTuple_CheckExact(__pyx_v_pointcloud)) {
    __pyx_t_4 = __pyx_v_pointcloud; __Pyx_INCREF(__pyx_t_4);
    __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_pointcloud); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 795, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 795, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(1, 795, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 795, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 795, __pyx_L1_error)
          #endif
          if (__pyx_t_7 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(1, 795, __pyx_L1_error)
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 795, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 795, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":796
 *         cdef defs.Pointcloud pc = defs.Pointcloud()
 *         for p in pointcloud:
 *             pc.push_back(<float>p[0],             # <<<<<<<<<<<<<<
 *                          <float>p[1],
 *                          <float>p[2])
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 796, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 796, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":797
 *         for p in pointcloud:
 *             pc.push_back(<float>p[0],
 *                          <float>p[1],             # <<<<<<<<<<<<<<
 *                          <float>p[2])
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 797, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 797, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":798
 *             pc.push_back(<float>p[0],
 *                          <float>p[1],
 *                          <float>p[2])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.insertPointCloud(pc,
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_p, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":796
 *         cdef defs.Pointcloud pc = defs.Pointcloud()
 *         for p in pointcloud:
 *             pc.push_back(<float>p[0],             # <<<<<<<<<<<<<<
 *                          <float>p[1],
 *                          <float>p[2])
 */
    __pyx_v_pc.push_back(((float)__pyx_t_9), ((float)__pyx_t_10), ((float)__pyx_t_11));

    /* "pyoctomap/octomap.pyx":795
 *         origin = np.ascontiguousarray(origin, dtype=np.float64)
 *         cdef defs.Pointcloud pc = defs.Pointcloud()
 *         for p in pointcloud:             # <<<<<<<<<<<<<<
 *             pc.push_back(<float>p[0],
 *                          <float>p[1],
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":801
 * 
 *         self.thisptr.insertPointCloud(pc,
 *                                       defs.Vector3(<float>origin[0],             # <<<<<<<<<<<<<<
 *                                                    <float>origin[1],
 *                                                    <float>origin[2]),
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_origin, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":802
 *         self.thisptr.insertPointCloud(pc,
 *                                       defs.Vector3(<float>origin[0],
 *                                                    <float>origin[1],             # <<<<<<<<<<<<<<
 *                                                    <float>origin[2]),
 *                                       <double?>maxrange,
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_origin, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":803
 *                                       defs.Vector3(<float>origin[0],
 *                                                    <float>origin[1],
 *                                                    <float>origin[2]),             # <<<<<<<<<<<<<<
 *                                       <double?>maxrange,
 *                                       bool(lazy_eval),
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_origin, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":801
 * 
 *         self.thisptr.insertPointCloud(pc,
 *                                       defs.Vector3(<float>origin[0],             # <<<<<<<<<<<<<<
 *                                                    <float>origin[1],
 *                                                    <float>origin[2]),
 */
  try {
    __pyx_t_12 = octomath::Vector3(((float)__pyx_t_11), ((float)__pyx_t_10), ((float)__pyx_t_9));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 801, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":804
 *                                                    <float>origin[1],
 *                                                    <float>origin[2]),
 *                                       <double?>maxrange,             # <<<<<<<<<<<<<<
 *                                       bool(lazy_eval),
 *                                       bool(discretize))
 */
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_v_maxrange); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 804, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":805
 *                                                    <float>origin[2]),
 *                                       <double?>maxrange,
 *                                       bool(lazy_eval),             # <<<<<<<<<<<<<<
 *                                       bool(discretize))
 * 
 */
  __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_v_lazy_eval); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(1, 805, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":806
 *                                       <double?>maxrange,
 *                                       bool(lazy_eval),
 *                                       bool(discretize))             # <<<<<<<<<<<<<<
 * 
 *     def begin_tree(self, maxDepth=0):
 */
  __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_discretize); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(1, 806, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":800
 *                          <float>p[2])
 * 
 *         self.thisptr.insertPointCloud(pc,             # <<<<<<<<<<<<<<
 *                                       defs.Vector3(<float>origin[0],
 *                                                    <float>origin[1],
 */
  __pyx_v_self->thisptr->insertPointCloud(__pyx_v_pc, __pyx_t_12, ((double)__pyx_t_13), (!(!__pyx_t_14)), (!(!__pyx_t_15)));

  /* "pyoctomap/octomap.pyx":773
 *         return occupied_arr, empty_arr
 * 
 *     def insertPointCloud(self,             # <<<<<<<<<<<<<<
 *                          pointcloud,
 *                          origin,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.insertPointCloud", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_pointcloud);
  __Pyx_XDECREF(__pyx_v_origin);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":808
 *                                       bool(discretize))
 * 
 *     def begin_tree(self, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified tree iterator"""
 *         return SimpleTreeIterator(self, maxDepth)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_39begin_tree(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_38begin_tree, "Return a simplified tree iterator");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_39begin_tree = {"begin_tree", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_39begin_tree, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_38begin_tree};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_39begin_tree(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_maxDepth = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_tree (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_maxDepth,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxDepth);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 808, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "begin_tree") < 0)) __PYX_ERR(1, 808, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_maxDepth = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_tree", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 808, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.begin_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_38begin_tree(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_maxDepth);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_38begin_tree(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_maxDepth) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_tree", 1);

  /* "pyoctomap/octomap.pyx":810
 *     def begin_tree(self, maxDepth=0):
 *         """Return a simplified tree iterator"""
 *         return SimpleTreeIterator(self, maxDepth)             # <<<<<<<<<<<<<<
 * 
 *     def begin_leafs(self, maxDepth=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(1, 810, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_maxDepth);
  __Pyx_GIVEREF(__pyx_v_maxDepth);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_maxDepth)) __PYX_ERR(1, 810, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":808
 *                                       bool(discretize))
 * 
 *     def begin_tree(self, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified tree iterator"""
 *         return SimpleTreeIterator(self, maxDepth)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.begin_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":812
 *         return SimpleTreeIterator(self, maxDepth)
 * 
 *     def begin_leafs(self, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified leaf iterator"""
 *         return SimpleLeafIterator(self, maxDepth)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_41begin_leafs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_40begin_leafs, "Return a simplified leaf iterator");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_41begin_leafs = {"begin_leafs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_41begin_leafs, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_40begin_leafs};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_41begin_leafs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_maxDepth = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_leafs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_maxDepth,0};
    values[0] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxDepth);
          if (value) { values[0] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 812, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "begin_leafs") < 0)) __PYX_ERR(1, 812, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_maxDepth = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_leafs", 0, 0, 1, __pyx_nargs); __PYX_ERR(1, 812, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.begin_leafs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_40begin_leafs(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_maxDepth);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_40begin_leafs(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_maxDepth) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_leafs", 1);

  /* "pyoctomap/octomap.pyx":814
 *     def begin_leafs(self, maxDepth=0):
 *         """Return a simplified leaf iterator"""
 *         return SimpleLeafIterator(self, maxDepth)             # <<<<<<<<<<<<<<
 * 
 *     def begin_leafs_bbx(self, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(1, 814, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_maxDepth);
  __Pyx_GIVEREF(__pyx_v_maxDepth);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_maxDepth)) __PYX_ERR(1, 814, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":812
 *         return SimpleTreeIterator(self, maxDepth)
 * 
 *     def begin_leafs(self, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified leaf iterator"""
 *         return SimpleLeafIterator(self, maxDepth)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.begin_leafs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":816
 *         return SimpleLeafIterator(self, maxDepth)
 * 
 *     def begin_leafs_bbx(self, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified leaf iterator for a bounding box"""
 *         return SimpleLeafBBXIterator(self, bbx_min, bbx_max, maxDepth)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_43begin_leafs_bbx(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_42begin_leafs_bbx, "Return a simplified leaf iterator for a bounding box");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_43begin_leafs_bbx = {"begin_leafs_bbx", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_43begin_leafs_bbx, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_42begin_leafs_bbx};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_43begin_leafs_bbx(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_bbx_min = 0;
  PyArrayObject *__pyx_v_bbx_max = 0;
  PyObject *__pyx_v_maxDepth = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_leafs_bbx (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bbx_min,&__pyx_n_s_bbx_max,&__pyx_n_s_maxDepth,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bbx_min)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 816, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bbx_max)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 816, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("begin_leafs_bbx", 0, 2, 3, 1); __PYX_ERR(1, 816, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxDepth);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 816, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "begin_leafs_bbx") < 0)) __PYX_ERR(1, 816, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bbx_min = ((PyArrayObject *)values[0]);
    __pyx_v_bbx_max = ((PyArrayObject *)values[1]);
    __pyx_v_maxDepth = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("begin_leafs_bbx", 0, 2, 3, __pyx_nargs); __PYX_ERR(1, 816, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.begin_leafs_bbx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bbx_min), __pyx_ptype_5numpy_ndarray, 1, "bbx_min", 0))) __PYX_ERR(1, 816, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bbx_max), __pyx_ptype_5numpy_ndarray, 1, "bbx_max", 0))) __PYX_ERR(1, 816, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_42begin_leafs_bbx(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_bbx_min, __pyx_v_bbx_max, __pyx_v_maxDepth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_42begin_leafs_bbx(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_bbx_min, PyArrayObject *__pyx_v_bbx_max, PyObject *__pyx_v_maxDepth) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_bbx_max;
  __Pyx_Buffer __pyx_pybuffer_bbx_max;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_bbx_min;
  __Pyx_Buffer __pyx_pybuffer_bbx_min;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_leafs_bbx", 1);
  __pyx_pybuffer_bbx_min.pybuffer.buf = NULL;
  __pyx_pybuffer_bbx_min.refcount = 0;
  __pyx_pybuffernd_bbx_min.data = NULL;
  __pyx_pybuffernd_bbx_min.rcbuffer = &__pyx_pybuffer_bbx_min;
  __pyx_pybuffer_bbx_max.pybuffer.buf = NULL;
  __pyx_pybuffer_bbx_max.refcount = 0;
  __pyx_pybuffernd_bbx_max.data = NULL;
  __pyx_pybuffernd_bbx_max.rcbuffer = &__pyx_pybuffer_bbx_max;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bbx_min.rcbuffer->pybuffer, (PyObject*)__pyx_v_bbx_min, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 816, __pyx_L1_error)
  }
  __pyx_pybuffernd_bbx_min.diminfo[0].strides = __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_bbx_min.diminfo[0].shape = __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bbx_max.rcbuffer->pybuffer, (PyObject*)__pyx_v_bbx_max, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 816, __pyx_L1_error)
  }
  __pyx_pybuffernd_bbx_max.diminfo[0].strides = __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_bbx_max.diminfo[0].shape = __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":818
 *     def begin_leafs_bbx(self, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):
 *         """Return a simplified leaf iterator for a bounding box"""
 *         return SimpleLeafBBXIterator(self, bbx_min, bbx_max, maxDepth)             # <<<<<<<<<<<<<<
 * 
 *     def end_tree(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(1, 818, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_bbx_min);
  __Pyx_GIVEREF((PyObject *)__pyx_v_bbx_min);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_bbx_min))) __PYX_ERR(1, 818, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_bbx_max);
  __Pyx_GIVEREF((PyObject *)__pyx_v_bbx_max);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, ((PyObject *)__pyx_v_bbx_max))) __PYX_ERR(1, 818, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_maxDepth);
  __Pyx_GIVEREF(__pyx_v_maxDepth);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_maxDepth)) __PYX_ERR(1, 818, __pyx_L1_error);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":816
 *         return SimpleLeafIterator(self, maxDepth)
 * 
 *     def begin_leafs_bbx(self, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified leaf iterator for a bounding box"""
 *         return SimpleLeafBBXIterator(self, bbx_min, bbx_max, maxDepth)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_max.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_min.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.begin_leafs_bbx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_max.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_min.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":820
 *         return SimpleLeafBBXIterator(self, bbx_min, bbx_max, maxDepth)
 * 
 *     def end_tree(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for tree traversal"""
 *         itr = SimpleTreeIterator(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_45end_tree(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_44end_tree, "Return an end iterator for tree traversal");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_45end_tree = {"end_tree", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_45end_tree, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_44end_tree};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_45end_tree(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_tree (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("end_tree", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "end_tree", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_44end_tree(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_44end_tree(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *__pyx_v_itr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_tree", 1);

  /* "pyoctomap/octomap.pyx":822
 *     def end_tree(self):
 *         """Return an end iterator for tree traversal"""
 *         itr = SimpleTreeIterator(self)             # <<<<<<<<<<<<<<
 *         itr._is_end = True
 *         return itr
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_itr = ((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":823
 *         """Return an end iterator for tree traversal"""
 *         itr = SimpleTreeIterator(self)
 *         itr._is_end = True             # <<<<<<<<<<<<<<
 *         return itr
 * 
 */
  __pyx_v_itr->_is_end = 1;

  /* "pyoctomap/octomap.pyx":824
 *         itr = SimpleTreeIterator(self)
 *         itr._is_end = True
 *         return itr             # <<<<<<<<<<<<<<
 * 
 *     def end_leafs(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_itr);
  __pyx_r = ((PyObject *)__pyx_v_itr);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":820
 *         return SimpleLeafBBXIterator(self, bbx_min, bbx_max, maxDepth)
 * 
 *     def end_tree(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for tree traversal"""
 *         itr = SimpleTreeIterator(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.end_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_itr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":826
 *         return itr
 * 
 *     def end_leafs(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for leaf traversal"""
 *         itr = SimpleLeafIterator(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_47end_leafs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_46end_leafs, "Return an end iterator for leaf traversal");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_47end_leafs = {"end_leafs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_47end_leafs, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_46end_leafs};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_47end_leafs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_leafs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("end_leafs", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "end_leafs", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_46end_leafs(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_46end_leafs(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *__pyx_v_itr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_leafs", 1);

  /* "pyoctomap/octomap.pyx":828
 *     def end_leafs(self):
 *         """Return an end iterator for leaf traversal"""
 *         itr = SimpleLeafIterator(self)             # <<<<<<<<<<<<<<
 *         itr._is_end = True
 *         return itr
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_itr = ((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":829
 *         """Return an end iterator for leaf traversal"""
 *         itr = SimpleLeafIterator(self)
 *         itr._is_end = True             # <<<<<<<<<<<<<<
 *         return itr
 * 
 */
  __pyx_v_itr->_is_end = 1;

  /* "pyoctomap/octomap.pyx":830
 *         itr = SimpleLeafIterator(self)
 *         itr._is_end = True
 *         return itr             # <<<<<<<<<<<<<<
 * 
 *     def end_leafs_bbx(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_itr);
  __pyx_r = ((PyObject *)__pyx_v_itr);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":826
 *         return itr
 * 
 *     def end_leafs(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for leaf traversal"""
 *         itr = SimpleLeafIterator(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.end_leafs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_itr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":832
 *         return itr
 * 
 *     def end_leafs_bbx(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for leaf bounding box traversal"""
 *         itr = SimpleLeafBBXIterator(self, np.array([0.0, 0.0, 0.0], dtype=np.float64), np.array([1.0, 1.0, 1.0], dtype=np.float64))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_49end_leafs_bbx(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_48end_leafs_bbx, "Return an end iterator for leaf bounding box traversal");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_49end_leafs_bbx = {"end_leafs_bbx", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_49end_leafs_bbx, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_48end_leafs_bbx};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_49end_leafs_bbx(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_leafs_bbx (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("end_leafs_bbx", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "end_leafs_bbx", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_48end_leafs_bbx(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_48end_leafs_bbx(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *__pyx_v_itr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_leafs_bbx", 1);

  /* "pyoctomap/octomap.pyx":834
 *     def end_leafs_bbx(self):
 *         """Return an end iterator for leaf bounding box traversal"""
 *         itr = SimpleLeafBBXIterator(self, np.array([0.0, 0.0, 0.0], dtype=np.float64), np.array([1.0, 1.0, 1.0], dtype=np.float64))             # <<<<<<<<<<<<<<
 *         itr._is_end = True
 *         itr._sampled_points = []  # Clear sampled points to ensure it's empty
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_0)) __PYX_ERR(1, 834, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_0)) __PYX_ERR(1, 834, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_0_0)) __PYX_ERR(1, 834, __pyx_L1_error);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(1, 834, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_1_0)) __PYX_ERR(1, 834, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_1_0)) __PYX_ERR(1, 834, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_1_0)) __PYX_ERR(1, 834, __pyx_L1_error);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(1, 834, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(1, 834, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5)) __PYX_ERR(1, 834, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_6)) __PYX_ERR(1, 834, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator), __pyx_t_1, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_itr = ((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "pyoctomap/octomap.pyx":835
 *         """Return an end iterator for leaf bounding box traversal"""
 *         itr = SimpleLeafBBXIterator(self, np.array([0.0, 0.0, 0.0], dtype=np.float64), np.array([1.0, 1.0, 1.0], dtype=np.float64))
 *         itr._is_end = True             # <<<<<<<<<<<<<<
 *         itr._sampled_points = []  # Clear sampled points to ensure it's empty
 *         return itr
 */
  __pyx_v_itr->_is_end = 1;

  /* "pyoctomap/octomap.pyx":836
 *         itr = SimpleLeafBBXIterator(self, np.array([0.0, 0.0, 0.0], dtype=np.float64), np.array([1.0, 1.0, 1.0], dtype=np.float64))
 *         itr._is_end = True
 *         itr._sampled_points = []  # Clear sampled points to ensure it's empty             # <<<<<<<<<<<<<<
 *         return itr
 * 
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_itr), __pyx_n_s_sampled_points, __pyx_t_6) < 0) __PYX_ERR(1, 836, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "pyoctomap/octomap.pyx":837
 *         itr._is_end = True
 *         itr._sampled_points = []  # Clear sampled points to ensure it's empty
 *         return itr             # <<<<<<<<<<<<<<
 * 
 *     def getBBXBounds(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_itr);
  __pyx_r = ((PyObject *)__pyx_v_itr);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":832
 *         return itr
 * 
 *     def end_leafs_bbx(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for leaf bounding box traversal"""
 *         itr = SimpleLeafBBXIterator(self, np.array([0.0, 0.0, 0.0], dtype=np.float64), np.array([1.0, 1.0, 1.0], dtype=np.float64))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.end_leafs_bbx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_itr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":839
 *         return itr
 * 
 *     def getBBXBounds(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXBounds()
 *         return np.array((p.x(), p.y(), p.z()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_51getBBXBounds(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_51getBBXBounds = {"getBBXBounds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_51getBBXBounds, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_51getBBXBounds(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBBXBounds (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getBBXBounds", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getBBXBounds", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_50getBBXBounds(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_50getBBXBounds(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  octomap::point3d __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBBXBounds", 1);

  /* "pyoctomap/octomap.pyx":840
 * 
 *     def getBBXBounds(self):
 *         cdef defs.point3d p = self.thisptr.getBBXBounds()             # <<<<<<<<<<<<<<
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 */
  __pyx_v_p = __pyx_v_self->thisptr->getBBXBounds();

  /* "pyoctomap/octomap.pyx":841
 *     def getBBXBounds(self):
 *         cdef defs.point3d p = self.thisptr.getBBXBounds()
 *         return np.array((p.x(), p.y(), p.z()))             # <<<<<<<<<<<<<<
 * 
 *     def getBBXCenter(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_p.z()); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2)) __PYX_ERR(1, 841, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5)) __PYX_ERR(1, 841, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 841, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":839
 *         return itr
 * 
 *     def getBBXBounds(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXBounds()
 *         return np.array((p.x(), p.y(), p.z()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getBBXBounds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":843
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXCenter(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXCenter()
 *         return np.array((p.x(), p.y(), p.z()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_53getBBXCenter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_53getBBXCenter = {"getBBXCenter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_53getBBXCenter, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_53getBBXCenter(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBBXCenter (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getBBXCenter", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getBBXCenter", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_52getBBXCenter(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_52getBBXCenter(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  octomap::point3d __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBBXCenter", 1);

  /* "pyoctomap/octomap.pyx":844
 * 
 *     def getBBXCenter(self):
 *         cdef defs.point3d p = self.thisptr.getBBXCenter()             # <<<<<<<<<<<<<<
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 */
  __pyx_v_p = __pyx_v_self->thisptr->getBBXCenter();

  /* "pyoctomap/octomap.pyx":845
 *     def getBBXCenter(self):
 *         cdef defs.point3d p = self.thisptr.getBBXCenter()
 *         return np.array((p.x(), p.y(), p.z()))             # <<<<<<<<<<<<<<
 * 
 *     def getBBXMax(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_p.z()); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2)) __PYX_ERR(1, 845, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(1, 845, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5)) __PYX_ERR(1, 845, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":843
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXCenter(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXCenter()
 *         return np.array((p.x(), p.y(), p.z()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getBBXCenter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":847
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXMax(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXMax()
 *         return np.array((p.x(), p.y(), p.z()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_55getBBXMax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_55getBBXMax = {"getBBXMax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_55getBBXMax, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_55getBBXMax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBBXMax (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getBBXMax", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getBBXMax", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_54getBBXMax(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_54getBBXMax(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  octomap::point3d __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBBXMax", 1);

  /* "pyoctomap/octomap.pyx":848
 * 
 *     def getBBXMax(self):
 *         cdef defs.point3d p = self.thisptr.getBBXMax()             # <<<<<<<<<<<<<<
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 */
  __pyx_v_p = __pyx_v_self->thisptr->getBBXMax();

  /* "pyoctomap/octomap.pyx":849
 *     def getBBXMax(self):
 *         cdef defs.point3d p = self.thisptr.getBBXMax()
 *         return np.array((p.x(), p.y(), p.z()))             # <<<<<<<<<<<<<<
 * 
 *     def getBBXMin(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_p.z()); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2)) __PYX_ERR(1, 849, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(1, 849, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5)) __PYX_ERR(1, 849, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":847
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXMax(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXMax()
 *         return np.array((p.x(), p.y(), p.z()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getBBXMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":851
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXMin(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXMin()
 *         return np.array((p.x(), p.y(), p.z()))
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_57getBBXMin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_57getBBXMin = {"getBBXMin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_57getBBXMin, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_57getBBXMin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBBXMin (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getBBXMin", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getBBXMin", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_56getBBXMin(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_56getBBXMin(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  octomap::point3d __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getBBXMin", 1);

  /* "pyoctomap/octomap.pyx":852
 * 
 *     def getBBXMin(self):
 *         cdef defs.point3d p = self.thisptr.getBBXMin()             # <<<<<<<<<<<<<<
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 */
  __pyx_v_p = __pyx_v_self->thisptr->getBBXMin();

  /* "pyoctomap/octomap.pyx":853
 *     def getBBXMin(self):
 *         cdef defs.point3d p = self.thisptr.getBBXMin()
 *         return np.array((p.x(), p.y(), p.z()))             # <<<<<<<<<<<<<<
 * 
 *     def getRoot(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_p.x()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_p.y()); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_p.z()); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2)) __PYX_ERR(1, 853, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4)) __PYX_ERR(1, 853, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5)) __PYX_ERR(1, 853, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":851
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXMin(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXMin()
 *         return np.array((p.x(), p.y(), p.z()))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getBBXMin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":855
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getRoot(self):             # <<<<<<<<<<<<<<
 *         node = OcTreeNode()
 *         node.thisptr = self.thisptr.getRoot()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_59getRoot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_59getRoot = {"getRoot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_59getRoot, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_59getRoot(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getRoot (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getRoot", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getRoot", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_58getRoot(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_58getRoot(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getRoot", 1);

  /* "pyoctomap/octomap.pyx":856
 * 
 *     def getRoot(self):
 *         node = OcTreeNode()             # <<<<<<<<<<<<<<
 *         node.thisptr = self.thisptr.getRoot()
 *         return node
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_node = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":857
 *     def getRoot(self):
 *         node = OcTreeNode()
 *         node.thisptr = self.thisptr.getRoot()             # <<<<<<<<<<<<<<
 *         return node
 * 
 */
  __pyx_v_node->thisptr = __pyx_v_self->thisptr->getRoot();

  /* "pyoctomap/octomap.pyx":858
 *         node = OcTreeNode()
 *         node.thisptr = self.thisptr.getRoot()
 *         return node             # <<<<<<<<<<<<<<
 * 
 *     def getNumLeafNodes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_node);
  __pyx_r = ((PyObject *)__pyx_v_node);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":855
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getRoot(self):             # <<<<<<<<<<<<<<
 *         node = OcTreeNode()
 *         node.thisptr = self.thisptr.getRoot()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getRoot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":860
 *         return node
 * 
 *     def getNumLeafNodes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getNumLeafNodes()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_61getNumLeafNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_61getNumLeafNodes = {"getNumLeafNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_61getNumLeafNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_61getNumLeafNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNumLeafNodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getNumLeafNodes", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getNumLeafNodes", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_60getNumLeafNodes(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_60getNumLeafNodes(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNumLeafNodes", 1);

  /* "pyoctomap/octomap.pyx":861
 * 
 *     def getNumLeafNodes(self):
 *         return self.thisptr.getNumLeafNodes()             # <<<<<<<<<<<<<<
 * 
 *     def getResolution(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->getNumLeafNodes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":860
 *         return node
 * 
 *     def getNumLeafNodes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getNumLeafNodes()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getNumLeafNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":863
 *         return self.thisptr.getNumLeafNodes()
 * 
 *     def getResolution(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getResolution()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_63getResolution(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_63getResolution = {"getResolution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_63getResolution, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_63getResolution(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getResolution (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getResolution", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getResolution", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_62getResolution(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_62getResolution(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getResolution", 1);

  /* "pyoctomap/octomap.pyx":864
 * 
 *     def getResolution(self):
 *         return self.thisptr.getResolution()             # <<<<<<<<<<<<<<
 * 
 *     def getTreeDepth(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getResolution()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":863
 *         return self.thisptr.getNumLeafNodes()
 * 
 *     def getResolution(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getResolution()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getResolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":866
 *         return self.thisptr.getResolution()
 * 
 *     def getTreeDepth(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getTreeDepth()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_65getTreeDepth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_65getTreeDepth = {"getTreeDepth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_65getTreeDepth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_65getTreeDepth(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTreeDepth (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getTreeDepth", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getTreeDepth", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_64getTreeDepth(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_64getTreeDepth(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTreeDepth", 1);

  /* "pyoctomap/octomap.pyx":867
 * 
 *     def getTreeDepth(self):
 *         return self.thisptr.getTreeDepth()             # <<<<<<<<<<<<<<
 * 
 *     def getTreeType(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->thisptr->getTreeDepth()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":866
 *         return self.thisptr.getResolution()
 * 
 *     def getTreeDepth(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getTreeDepth()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getTreeDepth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":869
 *         return self.thisptr.getTreeDepth()
 * 
 *     def getTreeType(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getTreeType().c_str()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_67getTreeType(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_67getTreeType = {"getTreeType", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_67getTreeType, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_67getTreeType(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTreeType (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getTreeType", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getTreeType", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_66getTreeType(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_66getTreeType(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getTreeType", 1);

  /* "pyoctomap/octomap.pyx":870
 * 
 *     def getTreeType(self):
 *         return self.thisptr.getTreeType().c_str()             # <<<<<<<<<<<<<<
 * 
 *     def inBBX(self, np.ndarray[DOUBLE_t, ndim=1] p):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->thisptr->getTreeType().c_str()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":869
 *         return self.thisptr.getTreeDepth()
 * 
 *     def getTreeType(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getTreeType().c_str()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getTreeType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":872
 *         return self.thisptr.getTreeType().c_str()
 * 
 *     def inBBX(self, np.ndarray[DOUBLE_t, ndim=1] p):             # <<<<<<<<<<<<<<
 *         return self.thisptr.inBBX(defs.point3d(p[0], p[1], p[2]))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_69inBBX(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_69inBBX = {"inBBX", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_69inBBX, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_69inBBX(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_p = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inBBX (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 872, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "inBBX") < 0)) __PYX_ERR(1, 872, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_p = ((PyArrayObject *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("inBBX", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 872, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.inBBX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_5numpy_ndarray, 1, "p", 0))) __PYX_ERR(1, 872, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_68inBBX(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_p);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_68inBBX(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_p) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_p;
  __Pyx_Buffer __pyx_pybuffer_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  octomap::point3d __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("inBBX", 1);
  __pyx_pybuffer_p.pybuffer.buf = NULL;
  __pyx_pybuffer_p.refcount = 0;
  __pyx_pybuffernd_p.data = NULL;
  __pyx_pybuffernd_p.rcbuffer = &__pyx_pybuffer_p;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_p, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 872, __pyx_L1_error)
  }
  __pyx_pybuffernd_p.diminfo[0].strides = __pyx_pybuffernd_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_p.diminfo[0].shape = __pyx_pybuffernd_p.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":873
 * 
 *     def inBBX(self, np.ndarray[DOUBLE_t, ndim=1] p):
 *         return self.thisptr.inBBX(defs.point3d(p[0], p[1], p[2]))             # <<<<<<<<<<<<<<
 * 
 *     def keyToCoord(self, OcTreeKey key, depth=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_pybuffernd_p.diminfo[0].shape;
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_pybuffernd_p.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 873, __pyx_L1_error)
  }
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_p.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_p.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 873, __pyx_L1_error)
  }
  __pyx_t_4 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_p.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_p.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 873, __pyx_L1_error)
  }
  try {
    __pyx_t_5 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_p.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_p.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_p.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_p.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_p.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_p.diminfo[0].strides)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 873, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->inBBX(__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":872
 *         return self.thisptr.getTreeType().c_str()
 * 
 *     def inBBX(self, np.ndarray[DOUBLE_t, ndim=1] p):             # <<<<<<<<<<<<<<
 *         return self.thisptr.inBBX(defs.point3d(p[0], p[1], p[2]))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.inBBX", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_p.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":875
 *         return self.thisptr.inBBX(defs.point3d(p[0], p[1], p[2]))
 * 
 *     def keyToCoord(self, OcTreeKey key, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.point3d p = defs.point3d()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_71keyToCoord(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_71keyToCoord = {"keyToCoord", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_71keyToCoord, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_71keyToCoord(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key = 0;
  PyObject *__pyx_v_depth = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("keyToCoord (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_key,&__pyx_n_s_depth,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_key)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 875, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_depth);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 875, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "keyToCoord") < 0)) __PYX_ERR(1, 875, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_key = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)values[0]);
    __pyx_v_depth = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("keyToCoord", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 875, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.keyToCoord", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_key), __pyx_ptype_9pyoctomap_7octomap_OcTreeKey, 1, "key", 0))) __PYX_ERR(1, 875, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_70keyToCoord(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_key, __pyx_v_depth);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_70keyToCoord(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key, PyObject *__pyx_v_depth) {
  struct octomap::OcTreeKey __pyx_v_key_in;
  octomap::point3d __pyx_v_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  octomap::point3d __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  octomap::key_type __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("keyToCoord", 1);

  /* "pyoctomap/octomap.pyx":877
 *     def keyToCoord(self, OcTreeKey key, depth=None):
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.point3d p = defs.point3d()             # <<<<<<<<<<<<<<
 *         key_in.k[0] = key[0]
 *         key_in.k[1] = key[1]
 */
  try {
    __pyx_t_1 = octomap::point3d();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 877, __pyx_L1_error)
  }
  __pyx_v_p = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "pyoctomap/octomap.pyx":878
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.point3d p = defs.point3d()
 *         key_in.k[0] = key[0]             # <<<<<<<<<<<<<<
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]
 */
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_2); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 878, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_key_in.k[0]) = __pyx_t_3;

  /* "pyoctomap/octomap.pyx":879
 *         cdef defs.point3d p = defs.point3d()
 *         key_in.k[0] = key[0]
 *         key_in.k[1] = key[1]             # <<<<<<<<<<<<<<
 *         key_in.k[2] = key[2]
 *         if depth is None:
 */
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_2); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_key_in.k[1]) = __pyx_t_3;

  /* "pyoctomap/octomap.pyx":880
 *         key_in.k[0] = key[0]
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]             # <<<<<<<<<<<<<<
 *         if depth is None:
 *             p = self.thisptr.keyToCoord(key_in)
 */
  __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_2); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 880, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  (__pyx_v_key_in.k[2]) = __pyx_t_3;

  /* "pyoctomap/octomap.pyx":881
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]
 *         if depth is None:             # <<<<<<<<<<<<<<
 *             p = self.thisptr.keyToCoord(key_in)
 *         else:
 */
  __pyx_t_4 = (__pyx_v_depth == Py_None);
  if (__pyx_t_4) {

    /* "pyoctomap/octomap.pyx":882
 *         key_in.k[2] = key[2]
 *         if depth is None:
 *             p = self.thisptr.keyToCoord(key_in)             # <<<<<<<<<<<<<<
 *         else:
 *             p = self.thisptr.keyToCoord(key_in, <int?>depth)
 */
    __pyx_v_p = __pyx_v_self->thisptr->keyToCoord(__pyx_v_key_in);

    /* "pyoctomap/octomap.pyx":881
 *         key_in.k[1] = key[1]
 *         key_in.k[2] = key[2]
 *         if depth is None:             # <<<<<<<<<<<<<<
 *             p = self.thisptr.keyToCoord(key_in)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":884
 *             p = self.thisptr.keyToCoord(key_in)
 *         else:
 *             p = self.thisptr.keyToCoord(key_in, <int?>depth)             # <<<<<<<<<<<<<<
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_depth); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 884, __pyx_L1_error)
    __pyx_v_p = __pyx_v_self->thisptr->keyToCoord(__pyx_v_key_in, ((int)__pyx_t_5));
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":885
 *         else:
 *             p = self.thisptr.keyToCoord(key_in, <int?>depth)
 *         return np.array((p.x(), p.y(), p.z()))             # <<<<<<<<<<<<<<
 * 
 *     def memoryFullGrid(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_p.x()); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_p.y()); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_p.z()); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_6)) __PYX_ERR(1, 885, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_8)) __PYX_ERR(1, 885, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_9);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_9)) __PYX_ERR(1, 885, __pyx_L1_error);
  __pyx_t_6 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_10};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":875
 *         return self.thisptr.inBBX(defs.point3d(p[0], p[1], p[2]))
 * 
 *     def keyToCoord(self, OcTreeKey key, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.point3d p = defs.point3d()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.keyToCoord", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":887
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def memoryFullGrid(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryFullGrid()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_73memoryFullGrid(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_73memoryFullGrid = {"memoryFullGrid", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_73memoryFullGrid, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_73memoryFullGrid(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("memoryFullGrid (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("memoryFullGrid", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "memoryFullGrid", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_72memoryFullGrid(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_72memoryFullGrid(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryFullGrid", 1);

  /* "pyoctomap/octomap.pyx":888
 * 
 *     def memoryFullGrid(self):
 *         return self.thisptr.memoryFullGrid()             # <<<<<<<<<<<<<<
 * 
 *     def memoryUsage(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_PY_LONG_LONG(__pyx_v_self->thisptr->memoryFullGrid()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":887
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def memoryFullGrid(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryFullGrid()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.memoryFullGrid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":890
 *         return self.thisptr.memoryFullGrid()
 * 
 *     def memoryUsage(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryUsage()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_75memoryUsage(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_75memoryUsage = {"memoryUsage", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_75memoryUsage, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_75memoryUsage(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("memoryUsage (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("memoryUsage", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "memoryUsage", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_74memoryUsage(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_74memoryUsage(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryUsage", 1);

  /* "pyoctomap/octomap.pyx":891
 * 
 *     def memoryUsage(self):
 *         return self.thisptr.memoryUsage()             # <<<<<<<<<<<<<<
 * 
 *     def memoryUsageNode(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->memoryUsage()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":890
 *         return self.thisptr.memoryFullGrid()
 * 
 *     def memoryUsage(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryUsage()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.memoryUsage", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":893
 *         return self.thisptr.memoryUsage()
 * 
 *     def memoryUsageNode(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryUsageNode()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_77memoryUsageNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_77memoryUsageNode = {"memoryUsageNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_77memoryUsageNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_77memoryUsageNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("memoryUsageNode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("memoryUsageNode", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "memoryUsageNode", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_76memoryUsageNode(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_76memoryUsageNode(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryUsageNode", 1);

  /* "pyoctomap/octomap.pyx":894
 * 
 *     def memoryUsageNode(self):
 *         return self.thisptr.memoryUsageNode()             # <<<<<<<<<<<<<<
 * 
 *     def resetChangeDetection(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->memoryUsageNode()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":893
 *         return self.thisptr.memoryUsage()
 * 
 *     def memoryUsageNode(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryUsageNode()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.memoryUsageNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":896
 *         return self.thisptr.memoryUsageNode()
 * 
 *     def resetChangeDetection(self):             # <<<<<<<<<<<<<<
 *         """
 *         Reset the set of changed keys. Call this after you obtained all changed nodes.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_79resetChangeDetection(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_78resetChangeDetection, "\n        Reset the set of changed keys. Call this after you obtained all changed nodes.\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_79resetChangeDetection = {"resetChangeDetection", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_79resetChangeDetection, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_78resetChangeDetection};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_79resetChangeDetection(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetChangeDetection (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("resetChangeDetection", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "resetChangeDetection", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_78resetChangeDetection(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_78resetChangeDetection(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetChangeDetection", 1);

  /* "pyoctomap/octomap.pyx":900
 *         Reset the set of changed keys. Call this after you obtained all changed nodes.
 *         """
 *         self.thisptr.resetChangeDetection()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr->resetChangeDetection();

  /* "pyoctomap/octomap.pyx":896
 *         return self.thisptr.memoryUsageNode()
 * 
 *     def resetChangeDetection(self):             # <<<<<<<<<<<<<<
 *         """
 *         Reset the set of changed keys. Call this after you obtained all changed nodes.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":904
 * 
 * 
 *     def search(self, value, depth=0):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey search_key
 *         node = OcTreeNode()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_81search(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_81search = {"search", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_81search, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_81search(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_depth = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("search (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_depth,0};
    values[1] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_int_0));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 904, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_depth);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 904, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "search") < 0)) __PYX_ERR(1, 904, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = values[0];
    __pyx_v_depth = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("search", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 904, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_80search(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_value, __pyx_v_depth);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_80search(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_depth) {
  struct octomap::OcTreeKey __pyx_v_search_key;
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  octomap::key_type __pyx_t_3;
  unsigned int __pyx_t_4;
  double __pyx_t_5;
  double __pyx_t_6;
  double __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("search", 1);

  /* "pyoctomap/octomap.pyx":906
 *     def search(self, value, depth=0):
 *         cdef defs.OcTreeKey search_key
 *         node = OcTreeNode()             # <<<<<<<<<<<<<<
 *         if isinstance(value, OcTreeKey):
 *             search_key.k[0] = value[0]
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_node = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":907
 *         cdef defs.OcTreeKey search_key
 *         node = OcTreeNode()
 *         if isinstance(value, OcTreeKey):             # <<<<<<<<<<<<<<
 *             search_key.k[0] = value[0]
 *             search_key.k[1] = value[1]
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_9pyoctomap_7octomap_OcTreeKey); 
  if (__pyx_t_2) {

    /* "pyoctomap/octomap.pyx":908
 *         node = OcTreeNode()
 *         if isinstance(value, OcTreeKey):
 *             search_key.k[0] = value[0]             # <<<<<<<<<<<<<<
 *             search_key.k[1] = value[1]
 *             search_key.k[2] = value[2]
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 908, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_search_key.k[0]) = __pyx_t_3;

    /* "pyoctomap/octomap.pyx":909
 *         if isinstance(value, OcTreeKey):
 *             search_key.k[0] = value[0]
 *             search_key.k[1] = value[1]             # <<<<<<<<<<<<<<
 *             search_key.k[2] = value[2]
 *             node.thisptr = self.thisptr.search(search_key,
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 909, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_search_key.k[1]) = __pyx_t_3;

    /* "pyoctomap/octomap.pyx":910
 *             search_key.k[0] = value[0]
 *             search_key.k[1] = value[1]
 *             search_key.k[2] = value[2]             # <<<<<<<<<<<<<<
 *             node.thisptr = self.thisptr.search(search_key,
 *                                                <unsigned int?>depth)
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 910, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_search_key.k[2]) = __pyx_t_3;

    /* "pyoctomap/octomap.pyx":912
 *             search_key.k[2] = value[2]
 *             node.thisptr = self.thisptr.search(search_key,
 *                                                <unsigned int?>depth)             # <<<<<<<<<<<<<<
 *         else:
 *             node.thisptr = self.thisptr.search(<double>value[0],
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_depth); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 912, __pyx_L1_error)

    /* "pyoctomap/octomap.pyx":911
 *             search_key.k[1] = value[1]
 *             search_key.k[2] = value[2]
 *             node.thisptr = self.thisptr.search(search_key,             # <<<<<<<<<<<<<<
 *                                                <unsigned int?>depth)
 *         else:
 */
    __pyx_v_node->thisptr = __pyx_v_self->thisptr->search(__pyx_v_search_key, ((unsigned int)__pyx_t_4));

    /* "pyoctomap/octomap.pyx":907
 *         cdef defs.OcTreeKey search_key
 *         node = OcTreeNode()
 *         if isinstance(value, OcTreeKey):             # <<<<<<<<<<<<<<
 *             search_key.k[0] = value[0]
 *             search_key.k[1] = value[1]
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":914
 *                                                <unsigned int?>depth)
 *         else:
 *             node.thisptr = self.thisptr.search(<double>value[0],             # <<<<<<<<<<<<<<
 *                                                <double>value[1],
 *                                                <double>value[2],
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 914, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":915
 *         else:
 *             node.thisptr = self.thisptr.search(<double>value[0],
 *                                                <double>value[1],             # <<<<<<<<<<<<<<
 *                                                <double>value[2],
 *                                                <unsigned int?>depth)
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 915, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 915, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":916
 *             node.thisptr = self.thisptr.search(<double>value[0],
 *                                                <double>value[1],
 *                                                <double>value[2],             # <<<<<<<<<<<<<<
 *                                                <unsigned int?>depth)
 *         # Return None if the search failed (thisptr is NULL)
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 916, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":917
 *                                                <double>value[1],
 *                                                <double>value[2],
 *                                                <unsigned int?>depth)             # <<<<<<<<<<<<<<
 *         # Return None if the search failed (thisptr is NULL)
 *         if node.thisptr == NULL:
 */
    __pyx_t_4 = __Pyx_PyInt_As_unsigned_int(__pyx_v_depth); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(1, 917, __pyx_L1_error)

    /* "pyoctomap/octomap.pyx":914
 *                                                <unsigned int?>depth)
 *         else:
 *             node.thisptr = self.thisptr.search(<double>value[0],             # <<<<<<<<<<<<<<
 *                                                <double>value[1],
 *                                                <double>value[2],
 */
    __pyx_v_node->thisptr = __pyx_v_self->thisptr->search(((double)__pyx_t_5), ((double)__pyx_t_6), ((double)__pyx_t_7), ((unsigned int)__pyx_t_4));
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":919
 *                                                <unsigned int?>depth)
 *         # Return None if the search failed (thisptr is NULL)
 *         if node.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return node
 */
  __pyx_t_2 = (__pyx_v_node->thisptr == NULL);
  if (__pyx_t_2) {

    /* "pyoctomap/octomap.pyx":920
 *         # Return None if the search failed (thisptr is NULL)
 *         if node.thisptr == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         return node
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":919
 *                                                <unsigned int?>depth)
 *         # Return None if the search failed (thisptr is NULL)
 *         if node.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         return node
 */
  }

  /* "pyoctomap/octomap.pyx":921
 *         if node.thisptr == NULL:
 *             return None
 *         return node             # <<<<<<<<<<<<<<
 * 
 *     def setBBXMax(self, np.ndarray[DOUBLE_t, ndim=1] max):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_node);
  __pyx_r = ((PyObject *)__pyx_v_node);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":904
 * 
 * 
 *     def search(self, value, depth=0):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey search_key
 *         node = OcTreeNode()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":923
 *         return node
 * 
 *     def setBBXMax(self, np.ndarray[DOUBLE_t, ndim=1] max):             # <<<<<<<<<<<<<<
 *         """
 *         sets the maximum for a query bounding box to use
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_83setBBXMax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_82setBBXMax, "\n        sets the maximum for a query bounding box to use\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_83setBBXMax = {"setBBXMax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_83setBBXMax, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_82setBBXMax};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_83setBBXMax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_max = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBBXMax (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_max,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 923, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setBBXMax") < 0)) __PYX_ERR(1, 923, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_max = ((PyArrayObject *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setBBXMax", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 923, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.setBBXMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_max), __pyx_ptype_5numpy_ndarray, 1, "max", 0))) __PYX_ERR(1, 923, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_82setBBXMax(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_max);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_82setBBXMax(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_max) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_max;
  __Pyx_Buffer __pyx_pybuffer_max;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  octomap::point3d __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setBBXMax", 1);
  __pyx_pybuffer_max.pybuffer.buf = NULL;
  __pyx_pybuffer_max.refcount = 0;
  __pyx_pybuffernd_max.data = NULL;
  __pyx_pybuffernd_max.rcbuffer = &__pyx_pybuffer_max;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_max.rcbuffer->pybuffer, (PyObject*)__pyx_v_max, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 923, __pyx_L1_error)
  }
  __pyx_pybuffernd_max.diminfo[0].strides = __pyx_pybuffernd_max.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_max.diminfo[0].shape = __pyx_pybuffernd_max.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":927
 *         sets the maximum for a query bounding box to use
 *         """
 *         self.thisptr.setBBXMax(defs.point3d(max[0], max[1], max[2]))             # <<<<<<<<<<<<<<
 * 
 *     def setBBXMin(self, np.ndarray[DOUBLE_t, ndim=1] min):
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_pybuffernd_max.diminfo[0].shape;
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_pybuffernd_max.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 927, __pyx_L1_error)
  }
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_max.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_max.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 927, __pyx_L1_error)
  }
  __pyx_t_4 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_max.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_max.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 927, __pyx_L1_error)
  }
  try {
    __pyx_t_5 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_max.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_max.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_max.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_max.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_max.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_max.diminfo[0].strides)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 927, __pyx_L1_error)
  }
  __pyx_v_self->thisptr->setBBXMax(__pyx_t_5);

  /* "pyoctomap/octomap.pyx":923
 *         return node
 * 
 *     def setBBXMax(self, np.ndarray[DOUBLE_t, ndim=1] max):             # <<<<<<<<<<<<<<
 *         """
 *         sets the maximum for a query bounding box to use
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_max.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.setBBXMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_max.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":929
 *         self.thisptr.setBBXMax(defs.point3d(max[0], max[1], max[2]))
 * 
 *     def setBBXMin(self, np.ndarray[DOUBLE_t, ndim=1] min):             # <<<<<<<<<<<<<<
 *         """
 *         sets the minimum for a query bounding box to use
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_85setBBXMin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_84setBBXMin, "\n        sets the minimum for a query bounding box to use\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_85setBBXMin = {"setBBXMin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_85setBBXMin, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_84setBBXMin};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_85setBBXMin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_min = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBBXMin (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_min)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 929, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setBBXMin") < 0)) __PYX_ERR(1, 929, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_min = ((PyArrayObject *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setBBXMin", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 929, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.setBBXMin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_min), __pyx_ptype_5numpy_ndarray, 1, "min", 0))) __PYX_ERR(1, 929, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_84setBBXMin(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_min);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_84setBBXMin(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_min) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_min;
  __Pyx_Buffer __pyx_pybuffer_min;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  octomap::point3d __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setBBXMin", 1);
  __pyx_pybuffer_min.pybuffer.buf = NULL;
  __pyx_pybuffer_min.refcount = 0;
  __pyx_pybuffernd_min.data = NULL;
  __pyx_pybuffernd_min.rcbuffer = &__pyx_pybuffer_min;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_min.rcbuffer->pybuffer, (PyObject*)__pyx_v_min, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 929, __pyx_L1_error)
  }
  __pyx_pybuffernd_min.diminfo[0].strides = __pyx_pybuffernd_min.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_min.diminfo[0].shape = __pyx_pybuffernd_min.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":933
 *         sets the minimum for a query bounding box to use
 *         """
 *         self.thisptr.setBBXMin(defs.point3d(min[0], min[1], min[2]))             # <<<<<<<<<<<<<<
 * 
 *     def setResolution(self, double r):
 */
  __pyx_t_1 = 0;
  __pyx_t_2 = -1;
  if (__pyx_t_1 < 0) {
    __pyx_t_1 += __pyx_pybuffernd_min.diminfo[0].shape;
    if (unlikely(__pyx_t_1 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_1 >= __pyx_pybuffernd_min.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 933, __pyx_L1_error)
  }
  __pyx_t_3 = 1;
  __pyx_t_2 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_min.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_min.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 933, __pyx_L1_error)
  }
  __pyx_t_4 = 2;
  __pyx_t_2 = -1;
  if (__pyx_t_4 < 0) {
    __pyx_t_4 += __pyx_pybuffernd_min.diminfo[0].shape;
    if (unlikely(__pyx_t_4 < 0)) __pyx_t_2 = 0;
  } else if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_min.diminfo[0].shape)) __pyx_t_2 = 0;
  if (unlikely(__pyx_t_2 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_2);
    __PYX_ERR(1, 933, __pyx_L1_error)
  }
  try {
    __pyx_t_5 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_min.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_min.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_min.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_min.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_min.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_min.diminfo[0].strides)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 933, __pyx_L1_error)
  }
  __pyx_v_self->thisptr->setBBXMin(__pyx_t_5);

  /* "pyoctomap/octomap.pyx":929
 *         self.thisptr.setBBXMax(defs.point3d(max[0], max[1], max[2]))
 * 
 *     def setBBXMin(self, np.ndarray[DOUBLE_t, ndim=1] min):             # <<<<<<<<<<<<<<
 *         """
 *         sets the minimum for a query bounding box to use
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_min.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.setBBXMin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_min.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":935
 *         self.thisptr.setBBXMin(defs.point3d(min[0], min[1], min[2]))
 * 
 *     def setResolution(self, double r):             # <<<<<<<<<<<<<<
 *         """
 *         Change the resolution of the octree, scaling all voxels. This will not preserve the (metric) scale!
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_87setResolution(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_86setResolution, "\n        Change the resolution of the octree, scaling all voxels. This will not preserve the (metric) scale!\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_87setResolution = {"setResolution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_87setResolution, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_86setResolution};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_87setResolution(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_r;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setResolution (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_r,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_r)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 935, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setResolution") < 0)) __PYX_ERR(1, 935, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_r = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_r == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 935, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setResolution", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 935, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.setResolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_86setResolution(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_r);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_86setResolution(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setResolution", 1);

  /* "pyoctomap/octomap.pyx":939
 *         Change the resolution of the octree, scaling all voxels. This will not preserve the (metric) scale!
 *         """
 *         self.thisptr.setResolution(r)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 * 
 */
  __pyx_v_self->thisptr->setResolution(__pyx_v_r);

  /* "pyoctomap/octomap.pyx":940
 *         """
 *         self.thisptr.setResolution(r)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 * 
 *     def size(self):
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":935
 *         self.thisptr.setBBXMin(defs.point3d(min[0], min[1], min[2]))
 * 
 *     def setResolution(self, double r):             # <<<<<<<<<<<<<<
 *         """
 *         Change the resolution of the octree, scaling all voxels. This will not preserve the (metric) scale!
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":942
 *         self._mod_version += 1
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_89size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_89size = {"size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_89size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_89size(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("size (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("size", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "size", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_88size(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_88size(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("size", 1);

  /* "pyoctomap/octomap.pyx":943
 * 
 *     def size(self):
 *         return self.thisptr.size()             # <<<<<<<<<<<<<<
 * 
 *     def toMaxLikelihood(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_self->thisptr->size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":942
 *         self._mod_version += 1
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":945
 *         return self.thisptr.size()
 * 
 *     def toMaxLikelihood(self):             # <<<<<<<<<<<<<<
 *         """
 *         Creates the maximum likelihood map by calling toMaxLikelihood on all tree nodes,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_91toMaxLikelihood(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_90toMaxLikelihood, "\n        Creates the maximum likelihood map by calling toMaxLikelihood on all tree nodes,\n        setting their occupancy to the corresponding occupancy thresholds.\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_91toMaxLikelihood = {"toMaxLikelihood", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_91toMaxLikelihood, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_90toMaxLikelihood};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_91toMaxLikelihood(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toMaxLikelihood (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("toMaxLikelihood", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "toMaxLikelihood", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_90toMaxLikelihood(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_90toMaxLikelihood(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("toMaxLikelihood", 1);

  /* "pyoctomap/octomap.pyx":950
 *         setting their occupancy to the corresponding occupancy thresholds.
 *         """
 *         self.thisptr.toMaxLikelihood()             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 * 
 */
  __pyx_v_self->thisptr->toMaxLikelihood();

  /* "pyoctomap/octomap.pyx":951
 *         """
 *         self.thisptr.toMaxLikelihood()
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 * 
 *     def updateNodes(self, values, update, lazy_eval=False):
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":945
 *         return self.thisptr.size()
 * 
 *     def toMaxLikelihood(self):             # <<<<<<<<<<<<<<
 *         """
 *         Creates the maximum likelihood map by calling toMaxLikelihood on all tree nodes,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":953
 *         self._mod_version += 1
 * 
 *     def updateNodes(self, values, update, lazy_eval=False):             # <<<<<<<<<<<<<<
 *         """
 *         Integrate occupancy measurements and Manipulate log_odds value of voxel directly.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_93updateNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_92updateNodes, "\n        Integrate occupancy measurements and Manipulate log_odds value of voxel directly. \n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_93updateNodes = {"updateNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_93updateNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_92updateNodes};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_93updateNodes(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_values = 0;
  PyObject *__pyx_v_update = 0;
  PyObject *__pyx_v_lazy_eval = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateNodes (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_values,&__pyx_n_s_update,&__pyx_n_s_lazy_eval,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_values)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 953, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_update)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 953, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("updateNodes", 0, 2, 3, 1); __PYX_ERR(1, 953, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lazy_eval);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 953, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "updateNodes") < 0)) __PYX_ERR(1, 953, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_values = values[0];
    __pyx_v_update = values[1];
    __pyx_v_lazy_eval = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("updateNodes", 0, 2, 3, __pyx_nargs); __PYX_ERR(1, 953, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.updateNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_92updateNodes(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_values, __pyx_v_update, __pyx_v_lazy_eval);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_92updateNodes(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_values, PyObject *__pyx_v_update, PyObject *__pyx_v_lazy_eval) {
  struct octomap::OcTreeKey __pyx_v_update_key;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  octomap::key_type __pyx_t_7;
  bool __pyx_t_8;
  bool __pyx_t_9;
  float __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateNodes", 1);

  /* "pyoctomap/octomap.pyx":958
 *         """
 *         cdef defs.OcTreeKey update_key
 *         if values is None or len(values) == 0:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(values[0], OcTreeKey):
 */
  __pyx_t_2 = (__pyx_v_values == Py_None);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyObject_Length(__pyx_v_values); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 958, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_3 == 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":959
 *         cdef defs.OcTreeKey update_key
 *         if values is None or len(values) == 0:
 *             return             # <<<<<<<<<<<<<<
 *         if isinstance(values[0], OcTreeKey):
 *             if isinstance(update, bool):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":958
 *         """
 *         cdef defs.OcTreeKey update_key
 *         if values is None or len(values) == 0:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(values[0], OcTreeKey):
 */
  }

  /* "pyoctomap/octomap.pyx":960
 *         if values is None or len(values) == 0:
 *             return
 *         if isinstance(values[0], OcTreeKey):             # <<<<<<<<<<<<<<
 *             if isinstance(update, bool):
 *                 for v in values:
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_t_4, __pyx_ptype_9pyoctomap_7octomap_OcTreeKey); 
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":961
 *             return
 *         if isinstance(values[0], OcTreeKey):
 *             if isinstance(update, bool):             # <<<<<<<<<<<<<<
 *                 for v in values:
 *                     update_key.k[0] = v[0]
 */
    __pyx_t_4 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_update, __pyx_t_4); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(1, 961, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "pyoctomap/octomap.pyx":962
 *         if isinstance(values[0], OcTreeKey):
 *             if isinstance(update, bool):
 *                 for v in values:             # <<<<<<<<<<<<<<
 *                     update_key.k[0] = v[0]
 *                     update_key.k[1] = v[1]
 */
      if (likely(PyList_CheckExact(__pyx_v_values)) || PyTuple_CheckExact(__pyx_v_values)) {
        __pyx_t_4 = __pyx_v_values; __Pyx_INCREF(__pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_5 = NULL;
      } else {
        __pyx_t_3 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 962, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 962, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_5)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 962, __pyx_L1_error)
              #endif
              if (__pyx_t_3 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(1, 962, __pyx_L1_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 962, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 962, __pyx_L1_error)
              #endif
              if (__pyx_t_3 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(1, 962, __pyx_L1_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 962, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_5(__pyx_t_4);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 962, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "pyoctomap/octomap.pyx":963
 *             if isinstance(update, bool):
 *                 for v in values:
 *                     update_key.k[0] = v[0]             # <<<<<<<<<<<<<<
 *                     update_key.k[1] = v[1]
 *                     update_key.k[2] = v[2]
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_6); if (unlikely((__pyx_t_7 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 963, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_update_key.k[0]) = __pyx_t_7;

        /* "pyoctomap/octomap.pyx":964
 *                 for v in values:
 *                     update_key.k[0] = v[0]
 *                     update_key.k[1] = v[1]             # <<<<<<<<<<<<<<
 *                     update_key.k[2] = v[2]
 *                     self.thisptr.updateNode(update_key,
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 964, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_6); if (unlikely((__pyx_t_7 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 964, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_update_key.k[1]) = __pyx_t_7;

        /* "pyoctomap/octomap.pyx":965
 *                     update_key.k[0] = v[0]
 *                     update_key.k[1] = v[1]
 *                     update_key.k[2] = v[2]             # <<<<<<<<<<<<<<
 *                     self.thisptr.updateNode(update_key,
 *                                             <cppbool>update,
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 965, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_6); if (unlikely((__pyx_t_7 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 965, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_update_key.k[2]) = __pyx_t_7;

        /* "pyoctomap/octomap.pyx":967
 *                     update_key.k[2] = v[2]
 *                     self.thisptr.updateNode(update_key,
 *                                             <cppbool>update,             # <<<<<<<<<<<<<<
 *                                             <cppbool?>lazy_eval)
 *             else:
 */
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_update); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 967, __pyx_L1_error)

        /* "pyoctomap/octomap.pyx":968
 *                     self.thisptr.updateNode(update_key,
 *                                             <cppbool>update,
 *                                             <cppbool?>lazy_eval)             # <<<<<<<<<<<<<<
 *             else:
 *                 for v in values:
 */
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_lazy_eval); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 968, __pyx_L1_error)

        /* "pyoctomap/octomap.pyx":966
 *                     update_key.k[1] = v[1]
 *                     update_key.k[2] = v[2]
 *                     self.thisptr.updateNode(update_key,             # <<<<<<<<<<<<<<
 *                                             <cppbool>update,
 *                                             <cppbool?>lazy_eval)
 */
        (void)(__pyx_v_self->thisptr->updateNode(__pyx_v_update_key, ((bool)__pyx_t_8), ((bool)__pyx_t_9)));

        /* "pyoctomap/octomap.pyx":962
 *         if isinstance(values[0], OcTreeKey):
 *             if isinstance(update, bool):
 *                 for v in values:             # <<<<<<<<<<<<<<
 *                     update_key.k[0] = v[0]
 *                     update_key.k[1] = v[1]
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyoctomap/octomap.pyx":961
 *             return
 *         if isinstance(values[0], OcTreeKey):
 *             if isinstance(update, bool):             # <<<<<<<<<<<<<<
 *                 for v in values:
 *                     update_key.k[0] = v[0]
 */
      goto __pyx_L7;
    }

    /* "pyoctomap/octomap.pyx":970
 *                                             <cppbool?>lazy_eval)
 *             else:
 *                 for v in values:             # <<<<<<<<<<<<<<
 *                     update_key.k[0] = v[0]
 *                     update_key.k[1] = v[1]
 */
    /*else*/ {
      if (likely(PyList_CheckExact(__pyx_v_values)) || PyTuple_CheckExact(__pyx_v_values)) {
        __pyx_t_4 = __pyx_v_values; __Pyx_INCREF(__pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_5 = NULL;
      } else {
        __pyx_t_3 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 970, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_5)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 970, __pyx_L1_error)
              #endif
              if (__pyx_t_3 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(1, 970, __pyx_L1_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 970, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 970, __pyx_L1_error)
              #endif
              if (__pyx_t_3 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(1, 970, __pyx_L1_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 970, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_5(__pyx_t_4);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 970, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "pyoctomap/octomap.pyx":971
 *             else:
 *                 for v in values:
 *                     update_key.k[0] = v[0]             # <<<<<<<<<<<<<<
 *                     update_key.k[1] = v[1]
 *                     update_key.k[2] = v[2]
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 971, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_6); if (unlikely((__pyx_t_7 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 971, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_update_key.k[0]) = __pyx_t_7;

        /* "pyoctomap/octomap.pyx":972
 *                 for v in values:
 *                     update_key.k[0] = v[0]
 *                     update_key.k[1] = v[1]             # <<<<<<<<<<<<<<
 *                     update_key.k[2] = v[2]
 *                     self.thisptr.updateNode(update_key,
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 972, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_6); if (unlikely((__pyx_t_7 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 972, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_update_key.k[1]) = __pyx_t_7;

        /* "pyoctomap/octomap.pyx":973
 *                     update_key.k[0] = v[0]
 *                     update_key.k[1] = v[1]
 *                     update_key.k[2] = v[2]             # <<<<<<<<<<<<<<
 *                     self.thisptr.updateNode(update_key,
 *                                             <float?>update,
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 973, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_6); if (unlikely((__pyx_t_7 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 973, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        (__pyx_v_update_key.k[2]) = __pyx_t_7;

        /* "pyoctomap/octomap.pyx":975
 *                     update_key.k[2] = v[2]
 *                     self.thisptr.updateNode(update_key,
 *                                             <float?>update,             # <<<<<<<<<<<<<<
 *                                             <cppbool?>lazy_eval)
 *         else:
 */
        __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_update); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 975, __pyx_L1_error)

        /* "pyoctomap/octomap.pyx":976
 *                     self.thisptr.updateNode(update_key,
 *                                             <float?>update,
 *                                             <cppbool?>lazy_eval)             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(update, bool):
 */
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_lazy_eval); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 976, __pyx_L1_error)

        /* "pyoctomap/octomap.pyx":974
 *                     update_key.k[1] = v[1]
 *                     update_key.k[2] = v[2]
 *                     self.thisptr.updateNode(update_key,             # <<<<<<<<<<<<<<
 *                                             <float?>update,
 *                                             <cppbool?>lazy_eval)
 */
        (void)(__pyx_v_self->thisptr->updateNode(__pyx_v_update_key, ((float)__pyx_t_10), ((bool)__pyx_t_9)));

        /* "pyoctomap/octomap.pyx":970
 *                                             <cppbool?>lazy_eval)
 *             else:
 *                 for v in values:             # <<<<<<<<<<<<<<
 *                     update_key.k[0] = v[0]
 *                     update_key.k[1] = v[1]
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L7:;

    /* "pyoctomap/octomap.pyx":960
 *         if values is None or len(values) == 0:
 *             return
 *         if isinstance(values[0], OcTreeKey):             # <<<<<<<<<<<<<<
 *             if isinstance(update, bool):
 *                 for v in values:
 */
    goto __pyx_L6;
  }

  /* "pyoctomap/octomap.pyx":978
 *                                             <cppbool?>lazy_eval)
 *         else:
 *             if isinstance(update, bool):             # <<<<<<<<<<<<<<
 *                 for v in values:
 *                     self.thisptr.updateNode(<double?>v[0],
 */
  /*else*/ {
    __pyx_t_4 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_update, __pyx_t_4); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(1, 978, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "pyoctomap/octomap.pyx":979
 *         else:
 *             if isinstance(update, bool):
 *                 for v in values:             # <<<<<<<<<<<<<<
 *                     self.thisptr.updateNode(<double?>v[0],
 *                                             <double?>v[1],
 */
      if (likely(PyList_CheckExact(__pyx_v_values)) || PyTuple_CheckExact(__pyx_v_values)) {
        __pyx_t_4 = __pyx_v_values; __Pyx_INCREF(__pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_5 = NULL;
      } else {
        __pyx_t_3 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 979, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 979, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_5)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 979, __pyx_L1_error)
              #endif
              if (__pyx_t_3 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(1, 979, __pyx_L1_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 979, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 979, __pyx_L1_error)
              #endif
              if (__pyx_t_3 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(1, 979, __pyx_L1_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 979, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_5(__pyx_t_4);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 979, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "pyoctomap/octomap.pyx":980
 *             if isinstance(update, bool):
 *                 for v in values:
 *                     self.thisptr.updateNode(<double?>v[0],             # <<<<<<<<<<<<<<
 *                                             <double?>v[1],
 *                                             <double?>v[2],
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 980, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 980, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyoctomap/octomap.pyx":981
 *                 for v in values:
 *                     self.thisptr.updateNode(<double?>v[0],
 *                                             <double?>v[1],             # <<<<<<<<<<<<<<
 *                                             <double?>v[2],
 *                                             <cppbool>update,
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 981, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 981, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyoctomap/octomap.pyx":982
 *                     self.thisptr.updateNode(<double?>v[0],
 *                                             <double?>v[1],
 *                                             <double?>v[2],             # <<<<<<<<<<<<<<
 *                                             <cppbool>update,
 *                                             <cppbool?>lazy_eval)
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 982, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 982, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyoctomap/octomap.pyx":983
 *                                             <double?>v[1],
 *                                             <double?>v[2],
 *                                             <cppbool>update,             # <<<<<<<<<<<<<<
 *                                             <cppbool?>lazy_eval)
 *             else:
 */
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_update); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 983, __pyx_L1_error)

        /* "pyoctomap/octomap.pyx":984
 *                                             <double?>v[2],
 *                                             <cppbool>update,
 *                                             <cppbool?>lazy_eval)             # <<<<<<<<<<<<<<
 *             else:
 *                 for v in values:
 */
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_lazy_eval); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 984, __pyx_L1_error)

        /* "pyoctomap/octomap.pyx":980
 *             if isinstance(update, bool):
 *                 for v in values:
 *                     self.thisptr.updateNode(<double?>v[0],             # <<<<<<<<<<<<<<
 *                                             <double?>v[1],
 *                                             <double?>v[2],
 */
        (void)(__pyx_v_self->thisptr->updateNode(((double)__pyx_t_11), ((double)__pyx_t_12), ((double)__pyx_t_13), ((bool)__pyx_t_9), ((bool)__pyx_t_8)));

        /* "pyoctomap/octomap.pyx":979
 *         else:
 *             if isinstance(update, bool):
 *                 for v in values:             # <<<<<<<<<<<<<<
 *                     self.thisptr.updateNode(<double?>v[0],
 *                                             <double?>v[1],
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyoctomap/octomap.pyx":978
 *                                             <cppbool?>lazy_eval)
 *         else:
 *             if isinstance(update, bool):             # <<<<<<<<<<<<<<
 *                 for v in values:
 *                     self.thisptr.updateNode(<double?>v[0],
 */
      goto __pyx_L14;
    }

    /* "pyoctomap/octomap.pyx":986
 *                                             <cppbool?>lazy_eval)
 *             else:
 *                 for v in values:             # <<<<<<<<<<<<<<
 *                     self.thisptr.updateNode(<double?>v[0],
 *                                             <double?>v[1],
 */
    /*else*/ {
      if (likely(PyList_CheckExact(__pyx_v_values)) || PyTuple_CheckExact(__pyx_v_values)) {
        __pyx_t_4 = __pyx_v_values; __Pyx_INCREF(__pyx_t_4);
        __pyx_t_3 = 0;
        __pyx_t_5 = NULL;
      } else {
        __pyx_t_3 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_values); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 986, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 986, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_5)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 986, __pyx_L1_error)
              #endif
              if (__pyx_t_3 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(1, 986, __pyx_L1_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 986, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_MACROS
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 986, __pyx_L1_error)
              #endif
              if (__pyx_t_3 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(1, 986, __pyx_L1_error)
            #else
            __pyx_t_6 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 986, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_5(__pyx_t_4);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(1, 986, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
        __pyx_t_6 = 0;

        /* "pyoctomap/octomap.pyx":987
 *             else:
 *                 for v in values:
 *                     self.thisptr.updateNode(<double?>v[0],             # <<<<<<<<<<<<<<
 *                                             <double?>v[1],
 *                                             <double?>v[2],
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 987, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 987, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyoctomap/octomap.pyx":988
 *                 for v in values:
 *                     self.thisptr.updateNode(<double?>v[0],
 *                                             <double?>v[1],             # <<<<<<<<<<<<<<
 *                                             <double?>v[2],
 *                                             <float?>update,
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 988, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 988, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyoctomap/octomap.pyx":989
 *                     self.thisptr.updateNode(<double?>v[0],
 *                                             <double?>v[1],
 *                                             <double?>v[2],             # <<<<<<<<<<<<<<
 *                                             <float?>update,
 *                                             <cppbool?>lazy_eval)
 */
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 989, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 989, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "pyoctomap/octomap.pyx":990
 *                                             <double?>v[1],
 *                                             <double?>v[2],
 *                                             <float?>update,             # <<<<<<<<<<<<<<
 *                                             <cppbool?>lazy_eval)
 *         self._mod_version += 1
 */
        __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_update); if (unlikely((__pyx_t_10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 990, __pyx_L1_error)

        /* "pyoctomap/octomap.pyx":991
 *                                             <double?>v[2],
 *                                             <float?>update,
 *                                             <cppbool?>lazy_eval)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 * 
 */
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_lazy_eval); if (unlikely((__pyx_t_8 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 991, __pyx_L1_error)

        /* "pyoctomap/octomap.pyx":987
 *             else:
 *                 for v in values:
 *                     self.thisptr.updateNode(<double?>v[0],             # <<<<<<<<<<<<<<
 *                                             <double?>v[1],
 *                                             <double?>v[2],
 */
        (void)(__pyx_v_self->thisptr->updateNode(((double)__pyx_t_13), ((double)__pyx_t_12), ((double)__pyx_t_11), ((float)__pyx_t_10), ((bool)__pyx_t_8)));

        /* "pyoctomap/octomap.pyx":986
 *                                             <cppbool?>lazy_eval)
 *             else:
 *                 for v in values:             # <<<<<<<<<<<<<<
 *                     self.thisptr.updateNode(<double?>v[0],
 *                                             <double?>v[1],
 */
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_L14:;
  }
  __pyx_L6:;

  /* "pyoctomap/octomap.pyx":992
 *                                             <float?>update,
 *                                             <cppbool?>lazy_eval)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 * 
 *     def updateNode(self, value, update, lazy_eval=False):
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":953
 *         self._mod_version += 1
 * 
 *     def updateNodes(self, values, update, lazy_eval=False):             # <<<<<<<<<<<<<<
 *         """
 *         Integrate occupancy measurements and Manipulate log_odds value of voxel directly.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.updateNodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":994
 *         self._mod_version += 1
 * 
 *     def updateNode(self, value, update, lazy_eval=False):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey update_key # Moved to top
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_95updateNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_95updateNode = {"updateNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_95updateNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_95updateNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_update = 0;
  PyObject *__pyx_v_lazy_eval = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateNode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_update,&__pyx_n_s_lazy_eval,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_value)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 994, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_update)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 994, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("updateNode", 0, 2, 3, 1); __PYX_ERR(1, 994, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lazy_eval);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 994, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "updateNode") < 0)) __PYX_ERR(1, 994, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_value = values[0];
    __pyx_v_update = values[1];
    __pyx_v_lazy_eval = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("updateNode", 0, 2, 3, __pyx_nargs); __PYX_ERR(1, 994, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.updateNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_94updateNode(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_value, __pyx_v_update, __pyx_v_lazy_eval);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_94updateNode(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_update, PyObject *__pyx_v_lazy_eval) {
  struct octomap::OcTreeKey __pyx_v_update_key;
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_node = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  octomap::key_type __pyx_t_3;
  bool __pyx_t_4;
  bool __pyx_t_5;
  float __pyx_t_6;
  double __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("updateNode", 1);

  /* "pyoctomap/octomap.pyx":999
 *         Integrate occupancy measurement and Manipulate log_odds value of voxel directly.
 *         """
 *         node = OcTreeNode()             # <<<<<<<<<<<<<<
 *         if isinstance(value, OcTreeKey):
 *             if isinstance(update, bool):
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_node = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":1000
 *         """
 *         node = OcTreeNode()
 *         if isinstance(value, OcTreeKey):             # <<<<<<<<<<<<<<
 *             if isinstance(update, bool):
 *                 update_key.k[0] = value[0]
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_9pyoctomap_7octomap_OcTreeKey); 
  if (__pyx_t_2) {

    /* "pyoctomap/octomap.pyx":1001
 *         node = OcTreeNode()
 *         if isinstance(value, OcTreeKey):
 *             if isinstance(update, bool):             # <<<<<<<<<<<<<<
 *                 update_key.k[0] = value[0]
 *                 update_key.k[1] = value[1]
 */
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_update, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 1001, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "pyoctomap/octomap.pyx":1002
 *         if isinstance(value, OcTreeKey):
 *             if isinstance(update, bool):
 *                 update_key.k[0] = value[0]             # <<<<<<<<<<<<<<
 *                 update_key.k[1] = value[1]
 *                 update_key.k[2] = value[2]
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1002, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1002, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      (__pyx_v_update_key.k[0]) = __pyx_t_3;

      /* "pyoctomap/octomap.pyx":1003
 *             if isinstance(update, bool):
 *                 update_key.k[0] = value[0]
 *                 update_key.k[1] = value[1]             # <<<<<<<<<<<<<<
 *                 update_key.k[2] = value[2]
 *                 node.thisptr = self.thisptr.updateNode(update_key,
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1003, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1003, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      (__pyx_v_update_key.k[1]) = __pyx_t_3;

      /* "pyoctomap/octomap.pyx":1004
 *                 update_key.k[0] = value[0]
 *                 update_key.k[1] = value[1]
 *                 update_key.k[2] = value[2]             # <<<<<<<<<<<<<<
 *                 node.thisptr = self.thisptr.updateNode(update_key,
 *                                                        <cppbool>update,
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1004, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1004, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      (__pyx_v_update_key.k[2]) = __pyx_t_3;

      /* "pyoctomap/octomap.pyx":1006
 *                 update_key.k[2] = value[2]
 *                 node.thisptr = self.thisptr.updateNode(update_key,
 *                                                        <cppbool>update,             # <<<<<<<<<<<<<<
 *                                                        <cppbool?>lazy_eval)
 *             else:
 */
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_update); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1006, __pyx_L1_error)

      /* "pyoctomap/octomap.pyx":1007
 *                 node.thisptr = self.thisptr.updateNode(update_key,
 *                                                        <cppbool>update,
 *                                                        <cppbool?>lazy_eval)             # <<<<<<<<<<<<<<
 *             else:
 *                 update_key.k[0] = value[0]
 */
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_lazy_eval); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1007, __pyx_L1_error)

      /* "pyoctomap/octomap.pyx":1005
 *                 update_key.k[1] = value[1]
 *                 update_key.k[2] = value[2]
 *                 node.thisptr = self.thisptr.updateNode(update_key,             # <<<<<<<<<<<<<<
 *                                                        <cppbool>update,
 *                                                        <cppbool?>lazy_eval)
 */
      __pyx_v_node->thisptr = __pyx_v_self->thisptr->updateNode(__pyx_v_update_key, ((bool)__pyx_t_4), ((bool)__pyx_t_5));

      /* "pyoctomap/octomap.pyx":1001
 *         node = OcTreeNode()
 *         if isinstance(value, OcTreeKey):
 *             if isinstance(update, bool):             # <<<<<<<<<<<<<<
 *                 update_key.k[0] = value[0]
 *                 update_key.k[1] = value[1]
 */
      goto __pyx_L4;
    }

    /* "pyoctomap/octomap.pyx":1009
 *                                                        <cppbool?>lazy_eval)
 *             else:
 *                 update_key.k[0] = value[0]             # <<<<<<<<<<<<<<
 *                 update_key.k[1] = value[1]
 *                 update_key.k[2] = value[2]
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1009, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1009, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      (__pyx_v_update_key.k[0]) = __pyx_t_3;

      /* "pyoctomap/octomap.pyx":1010
 *             else:
 *                 update_key.k[0] = value[0]
 *                 update_key.k[1] = value[1]             # <<<<<<<<<<<<<<
 *                 update_key.k[2] = value[2]
 *                 node.thisptr = self.thisptr.updateNode(update_key,
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1010, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      (__pyx_v_update_key.k[1]) = __pyx_t_3;

      /* "pyoctomap/octomap.pyx":1011
 *                 update_key.k[0] = value[0]
 *                 update_key.k[1] = value[1]
 *                 update_key.k[2] = value[2]             # <<<<<<<<<<<<<<
 *                 node.thisptr = self.thisptr.updateNode(update_key,
 *                                                        <float?>update,
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1011, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyInt_As_octomap_3a__3a_key_type(__pyx_t_1); if (unlikely((__pyx_t_3 == ((octomap::key_type)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1011, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      (__pyx_v_update_key.k[2]) = __pyx_t_3;

      /* "pyoctomap/octomap.pyx":1013
 *                 update_key.k[2] = value[2]
 *                 node.thisptr = self.thisptr.updateNode(update_key,
 *                                                        <float?>update,             # <<<<<<<<<<<<<<
 *                                                        <cppbool?>lazy_eval)
 *         else:
 */
      __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_v_update); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1013, __pyx_L1_error)

      /* "pyoctomap/octomap.pyx":1014
 *                 node.thisptr = self.thisptr.updateNode(update_key,
 *                                                        <float?>update,
 *                                                        <cppbool?>lazy_eval)             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(update, bool):
 */
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_lazy_eval); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1014, __pyx_L1_error)

      /* "pyoctomap/octomap.pyx":1012
 *                 update_key.k[1] = value[1]
 *                 update_key.k[2] = value[2]
 *                 node.thisptr = self.thisptr.updateNode(update_key,             # <<<<<<<<<<<<<<
 *                                                        <float?>update,
 *                                                        <cppbool?>lazy_eval)
 */
      __pyx_v_node->thisptr = __pyx_v_self->thisptr->updateNode(__pyx_v_update_key, ((float)__pyx_t_6), ((bool)__pyx_t_5));
    }
    __pyx_L4:;

    /* "pyoctomap/octomap.pyx":1000
 *         """
 *         node = OcTreeNode()
 *         if isinstance(value, OcTreeKey):             # <<<<<<<<<<<<<<
 *             if isinstance(update, bool):
 *                 update_key.k[0] = value[0]
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":1016
 *                                                        <cppbool?>lazy_eval)
 *         else:
 *             if isinstance(update, bool):             # <<<<<<<<<<<<<<
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],
 *                                                        <double?>value[1],
 */
  /*else*/ {
    __pyx_t_1 = ((PyObject*)&PyBool_Type);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_2 = PyObject_IsInstance(__pyx_v_update, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 1016, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "pyoctomap/octomap.pyx":1017
 *         else:
 *             if isinstance(update, bool):
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],             # <<<<<<<<<<<<<<
 *                                                        <double?>value[1],
 *                                                        <double?>value[2],
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1017, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyoctomap/octomap.pyx":1018
 *             if isinstance(update, bool):
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],
 *                                                        <double?>value[1],             # <<<<<<<<<<<<<<
 *                                                        <double?>value[2],
 *                                                        <cppbool>update,
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1018, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyoctomap/octomap.pyx":1019
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],
 *                                                        <double?>value[1],
 *                                                        <double?>value[2],             # <<<<<<<<<<<<<<
 *                                                        <cppbool>update,
 *                                                        <cppbool?>lazy_eval)
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1019, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1019, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyoctomap/octomap.pyx":1020
 *                                                        <double?>value[1],
 *                                                        <double?>value[2],
 *                                                        <cppbool>update,             # <<<<<<<<<<<<<<
 *                                                        <cppbool?>lazy_eval)
 *             else:
 */
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_update); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1020, __pyx_L1_error)

      /* "pyoctomap/octomap.pyx":1021
 *                                                        <double?>value[2],
 *                                                        <cppbool>update,
 *                                                        <cppbool?>lazy_eval)             # <<<<<<<<<<<<<<
 *             else:
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],
 */
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_lazy_eval); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1021, __pyx_L1_error)

      /* "pyoctomap/octomap.pyx":1017
 *         else:
 *             if isinstance(update, bool):
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],             # <<<<<<<<<<<<<<
 *                                                        <double?>value[1],
 *                                                        <double?>value[2],
 */
      __pyx_v_node->thisptr = __pyx_v_self->thisptr->updateNode(((double)__pyx_t_7), ((double)__pyx_t_8), ((double)__pyx_t_9), ((bool)__pyx_t_5), ((bool)__pyx_t_4));

      /* "pyoctomap/octomap.pyx":1016
 *                                                        <cppbool?>lazy_eval)
 *         else:
 *             if isinstance(update, bool):             # <<<<<<<<<<<<<<
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],
 *                                                        <double?>value[1],
 */
      goto __pyx_L5;
    }

    /* "pyoctomap/octomap.pyx":1023
 *                                                        <cppbool?>lazy_eval)
 *             else:
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],             # <<<<<<<<<<<<<<
 *                                                        <double?>value[1],
 *                                                        <double?>value[2],
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1023, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyoctomap/octomap.pyx":1024
 *             else:
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],
 *                                                        <double?>value[1],             # <<<<<<<<<<<<<<
 *                                                        <double?>value[2],
 *                                                        <float?>update,
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1024, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1024, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyoctomap/octomap.pyx":1025
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],
 *                                                        <double?>value[1],
 *                                                        <double?>value[2],             # <<<<<<<<<<<<<<
 *                                                        <float?>update,
 *                                                        <cppbool?>lazy_eval)
 */
      __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1025, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1025, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "pyoctomap/octomap.pyx":1026
 *                                                        <double?>value[1],
 *                                                        <double?>value[2],
 *                                                        <float?>update,             # <<<<<<<<<<<<<<
 *                                                        <cppbool?>lazy_eval)
 *         self._mod_version += 1
 */
      __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_v_update); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1026, __pyx_L1_error)

      /* "pyoctomap/octomap.pyx":1027
 *                                                        <double?>value[2],
 *                                                        <float?>update,
 *                                                        <cppbool?>lazy_eval)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 *         return node
 */
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_lazy_eval); if (unlikely((__pyx_t_4 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1027, __pyx_L1_error)

      /* "pyoctomap/octomap.pyx":1023
 *                                                        <cppbool?>lazy_eval)
 *             else:
 *                 node.thisptr = self.thisptr.updateNode(<double?>value[0],             # <<<<<<<<<<<<<<
 *                                                        <double?>value[1],
 *                                                        <double?>value[2],
 */
      __pyx_v_node->thisptr = __pyx_v_self->thisptr->updateNode(((double)__pyx_t_9), ((double)__pyx_t_8), ((double)__pyx_t_7), ((float)__pyx_t_6), ((bool)__pyx_t_4));
    }
    __pyx_L5:;
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":1028
 *                                                        <float?>update,
 *                                                        <cppbool?>lazy_eval)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 *         return node
 * 
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":1029
 *                                                        <cppbool?>lazy_eval)
 *         self._mod_version += 1
 *         return node             # <<<<<<<<<<<<<<
 * 
 *     def updateInnerOccupancy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_node);
  __pyx_r = ((PyObject *)__pyx_v_node);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":994
 *         self._mod_version += 1
 * 
 *     def updateNode(self, value, update, lazy_eval=False):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey update_key # Moved to top
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.updateNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_node);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1031
 *         return node
 * 
 *     def updateInnerOccupancy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Updates the occupancy of all inner nodes to reflect their children's occupancy.
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_97updateInnerOccupancy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_96updateInnerOccupancy, "\n        Updates the occupancy of all inner nodes to reflect their children's occupancy.\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_97updateInnerOccupancy = {"updateInnerOccupancy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_97updateInnerOccupancy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_96updateInnerOccupancy};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_97updateInnerOccupancy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateInnerOccupancy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("updateInnerOccupancy", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "updateInnerOccupancy", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_96updateInnerOccupancy(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_96updateInnerOccupancy(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateInnerOccupancy", 1);

  /* "pyoctomap/octomap.pyx":1035
 *         Updates the occupancy of all inner nodes to reflect their children's occupancy.
 *         """
 *         self.thisptr.updateInnerOccupancy()             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 * 
 */
  __pyx_v_self->thisptr->updateInnerOccupancy();

  /* "pyoctomap/octomap.pyx":1036
 *         """
 *         self.thisptr.updateInnerOccupancy()
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 * 
 *     def useBBXLimit(self, enable):
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":1031
 *         return node
 * 
 *     def updateInnerOccupancy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Updates the occupancy of all inner nodes to reflect their children's occupancy.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1038
 *         self._mod_version += 1
 * 
 *     def useBBXLimit(self, enable):             # <<<<<<<<<<<<<<
 *         """
 *         use or ignore BBX limit (default: ignore)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_99useBBXLimit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_98useBBXLimit, "\n        use or ignore BBX limit (default: ignore)\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_99useBBXLimit = {"useBBXLimit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_99useBBXLimit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_98useBBXLimit};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_99useBBXLimit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_enable = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("useBBXLimit (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_enable,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_enable)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1038, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "useBBXLimit") < 0)) __PYX_ERR(1, 1038, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_enable = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("useBBXLimit", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1038, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.useBBXLimit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_98useBBXLimit(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_enable);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_98useBBXLimit(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_enable) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("useBBXLimit", 1);

  /* "pyoctomap/octomap.pyx":1042
 *         use or ignore BBX limit (default: ignore)
 *         """
 *         self.thisptr.useBBXLimit(bool(enable))             # <<<<<<<<<<<<<<
 * 
 *     def volume(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_enable); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1042, __pyx_L1_error)
  __pyx_v_self->thisptr->useBBXLimit((!(!__pyx_t_1)));

  /* "pyoctomap/octomap.pyx":1038
 *         self._mod_version += 1
 * 
 *     def useBBXLimit(self, enable):             # <<<<<<<<<<<<<<
 *         """
 *         use or ignore BBX limit (default: ignore)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.useBBXLimit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1044
 *         self.thisptr.useBBXLimit(bool(enable))
 * 
 *     def volume(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.volume()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_101volume(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_101volume = {"volume", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_101volume, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_101volume(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volume (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("volume", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "volume", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_100volume(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_100volume(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("volume", 1);

  /* "pyoctomap/octomap.pyx":1045
 * 
 *     def volume(self):
 *         return self.thisptr.volume()             # <<<<<<<<<<<<<<
 * 
 *     def getClampingThresMax(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->volume()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1044
 *         self.thisptr.useBBXLimit(bool(enable))
 * 
 *     def volume(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.volume()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.volume", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1047
 *         return self.thisptr.volume()
 * 
 *     def getClampingThresMax(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMax()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_103getClampingThresMax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_103getClampingThresMax = {"getClampingThresMax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_103getClampingThresMax, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_103getClampingThresMax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClampingThresMax (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getClampingThresMax", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getClampingThresMax", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_102getClampingThresMax(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_102getClampingThresMax(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getClampingThresMax", 1);

  /* "pyoctomap/octomap.pyx":1048
 * 
 *     def getClampingThresMax(self):
 *         return self.thisptr.getClampingThresMax()             # <<<<<<<<<<<<<<
 * 
 *     def getClampingThresMaxLog(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getClampingThresMax()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1047
 *         return self.thisptr.volume()
 * 
 *     def getClampingThresMax(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMax()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getClampingThresMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1050
 *         return self.thisptr.getClampingThresMax()
 * 
 *     def getClampingThresMaxLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMaxLog()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_105getClampingThresMaxLog(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_105getClampingThresMaxLog = {"getClampingThresMaxLog", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_105getClampingThresMaxLog, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_105getClampingThresMaxLog(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClampingThresMaxLog (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getClampingThresMaxLog", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getClampingThresMaxLog", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_104getClampingThresMaxLog(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_104getClampingThresMaxLog(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getClampingThresMaxLog", 1);

  /* "pyoctomap/octomap.pyx":1051
 * 
 *     def getClampingThresMaxLog(self):
 *         return self.thisptr.getClampingThresMaxLog()             # <<<<<<<<<<<<<<
 * 
 *     def getClampingThresMin(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getClampingThresMaxLog()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1050
 *         return self.thisptr.getClampingThresMax()
 * 
 *     def getClampingThresMaxLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMaxLog()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getClampingThresMaxLog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1053
 *         return self.thisptr.getClampingThresMaxLog()
 * 
 *     def getClampingThresMin(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMin()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_107getClampingThresMin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_107getClampingThresMin = {"getClampingThresMin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_107getClampingThresMin, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_107getClampingThresMin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClampingThresMin (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getClampingThresMin", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getClampingThresMin", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_106getClampingThresMin(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_106getClampingThresMin(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getClampingThresMin", 1);

  /* "pyoctomap/octomap.pyx":1054
 * 
 *     def getClampingThresMin(self):
 *         return self.thisptr.getClampingThresMin()             # <<<<<<<<<<<<<<
 * 
 *     def getClampingThresMinLog(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getClampingThresMin()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1053
 *         return self.thisptr.getClampingThresMaxLog()
 * 
 *     def getClampingThresMin(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMin()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getClampingThresMin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1056
 *         return self.thisptr.getClampingThresMin()
 * 
 *     def getClampingThresMinLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMinLog()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_109getClampingThresMinLog(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_109getClampingThresMinLog = {"getClampingThresMinLog", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_109getClampingThresMinLog, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_109getClampingThresMinLog(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getClampingThresMinLog (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getClampingThresMinLog", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getClampingThresMinLog", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_108getClampingThresMinLog(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_108getClampingThresMinLog(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getClampingThresMinLog", 1);

  /* "pyoctomap/octomap.pyx":1057
 * 
 *     def getClampingThresMinLog(self):
 *         return self.thisptr.getClampingThresMinLog()             # <<<<<<<<<<<<<<
 * 
 *     def getOccupancyThres(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getClampingThresMinLog()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1056
 *         return self.thisptr.getClampingThresMin()
 * 
 *     def getClampingThresMinLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMinLog()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getClampingThresMinLog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1059
 *         return self.thisptr.getClampingThresMinLog()
 * 
 *     def getOccupancyThres(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getOccupancyThres()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_111getOccupancyThres(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_111getOccupancyThres = {"getOccupancyThres", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_111getOccupancyThres, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_111getOccupancyThres(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOccupancyThres (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getOccupancyThres", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getOccupancyThres", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_110getOccupancyThres(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_110getOccupancyThres(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOccupancyThres", 1);

  /* "pyoctomap/octomap.pyx":1060
 * 
 *     def getOccupancyThres(self):
 *         return self.thisptr.getOccupancyThres()             # <<<<<<<<<<<<<<
 * 
 *     def getOccupancyThresLog(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getOccupancyThres()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1059
 *         return self.thisptr.getClampingThresMinLog()
 * 
 *     def getOccupancyThres(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getOccupancyThres()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getOccupancyThres", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1062
 *         return self.thisptr.getOccupancyThres()
 * 
 *     def getOccupancyThresLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getOccupancyThresLog()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_113getOccupancyThresLog(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_113getOccupancyThresLog = {"getOccupancyThresLog", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_113getOccupancyThresLog, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_113getOccupancyThresLog(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getOccupancyThresLog (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getOccupancyThresLog", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getOccupancyThresLog", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_112getOccupancyThresLog(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_112getOccupancyThresLog(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getOccupancyThresLog", 1);

  /* "pyoctomap/octomap.pyx":1063
 * 
 *     def getOccupancyThresLog(self):
 *         return self.thisptr.getOccupancyThresLog()             # <<<<<<<<<<<<<<
 * 
 *     def getProbHit(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getOccupancyThresLog()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1062
 *         return self.thisptr.getOccupancyThres()
 * 
 *     def getOccupancyThresLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getOccupancyThresLog()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getOccupancyThresLog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1065
 *         return self.thisptr.getOccupancyThresLog()
 * 
 *     def getProbHit(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbHit()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_115getProbHit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_115getProbHit = {"getProbHit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_115getProbHit, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_115getProbHit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getProbHit (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getProbHit", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getProbHit", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_114getProbHit(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_114getProbHit(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getProbHit", 1);

  /* "pyoctomap/octomap.pyx":1066
 * 
 *     def getProbHit(self):
 *         return self.thisptr.getProbHit()             # <<<<<<<<<<<<<<
 * 
 *     def getProbHitLog(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getProbHit()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1065
 *         return self.thisptr.getOccupancyThresLog()
 * 
 *     def getProbHit(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbHit()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getProbHit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1068
 *         return self.thisptr.getProbHit()
 * 
 *     def getProbHitLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbHitLog()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_117getProbHitLog(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_117getProbHitLog = {"getProbHitLog", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_117getProbHitLog, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_117getProbHitLog(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getProbHitLog (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getProbHitLog", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getProbHitLog", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_116getProbHitLog(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_116getProbHitLog(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getProbHitLog", 1);

  /* "pyoctomap/octomap.pyx":1069
 * 
 *     def getProbHitLog(self):
 *         return self.thisptr.getProbHitLog()             # <<<<<<<<<<<<<<
 * 
 *     def getProbMiss(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getProbHitLog()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1068
 *         return self.thisptr.getProbHit()
 * 
 *     def getProbHitLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbHitLog()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getProbHitLog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1071
 *         return self.thisptr.getProbHitLog()
 * 
 *     def getProbMiss(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbMiss()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_119getProbMiss(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_119getProbMiss = {"getProbMiss", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_119getProbMiss, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_119getProbMiss(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getProbMiss (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getProbMiss", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getProbMiss", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_118getProbMiss(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_118getProbMiss(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getProbMiss", 1);

  /* "pyoctomap/octomap.pyx":1072
 * 
 *     def getProbMiss(self):
 *         return self.thisptr.getProbMiss()             # <<<<<<<<<<<<<<
 * 
 *     def getProbMissLog(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getProbMiss()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1071
 *         return self.thisptr.getProbHitLog()
 * 
 *     def getProbMiss(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbMiss()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getProbMiss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1074
 *         return self.thisptr.getProbMiss()
 * 
 *     def getProbMissLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbMissLog()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_121getProbMissLog(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_121getProbMissLog = {"getProbMissLog", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_121getProbMissLog, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_121getProbMissLog(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getProbMissLog (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getProbMissLog", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getProbMissLog", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_120getProbMissLog(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_120getProbMissLog(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getProbMissLog", 1);

  /* "pyoctomap/octomap.pyx":1075
 * 
 *     def getProbMissLog(self):
 *         return self.thisptr.getProbMissLog()             # <<<<<<<<<<<<<<
 * 
 *     def setClampingThresMax(self, double thresProb):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->getProbMissLog()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1074
 *         return self.thisptr.getProbMiss()
 * 
 *     def getProbMissLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbMissLog()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getProbMissLog", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1077
 *         return self.thisptr.getProbMissLog()
 * 
 *     def setClampingThresMax(self, double thresProb):             # <<<<<<<<<<<<<<
 *         self.thisptr.setClampingThresMax(thresProb)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_123setClampingThresMax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_123setClampingThresMax = {"setClampingThresMax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_123setClampingThresMax, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_123setClampingThresMax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_thresProb;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setClampingThresMax (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_thresProb,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_thresProb)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1077, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setClampingThresMax") < 0)) __PYX_ERR(1, 1077, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_thresProb = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_thresProb == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1077, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setClampingThresMax", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1077, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.setClampingThresMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_122setClampingThresMax(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_thresProb);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_122setClampingThresMax(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_thresProb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setClampingThresMax", 1);

  /* "pyoctomap/octomap.pyx":1078
 * 
 *     def setClampingThresMax(self, double thresProb):
 *         self.thisptr.setClampingThresMax(thresProb)             # <<<<<<<<<<<<<<
 * 
 *     def setClampingThresMin(self, double thresProb):
 */
  __pyx_v_self->thisptr->setClampingThresMax(__pyx_v_thresProb);

  /* "pyoctomap/octomap.pyx":1077
 *         return self.thisptr.getProbMissLog()
 * 
 *     def setClampingThresMax(self, double thresProb):             # <<<<<<<<<<<<<<
 *         self.thisptr.setClampingThresMax(thresProb)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1080
 *         self.thisptr.setClampingThresMax(thresProb)
 * 
 *     def setClampingThresMin(self, double thresProb):             # <<<<<<<<<<<<<<
 *         self.thisptr.setClampingThresMin(thresProb)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_125setClampingThresMin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_125setClampingThresMin = {"setClampingThresMin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_125setClampingThresMin, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_125setClampingThresMin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_thresProb;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setClampingThresMin (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_thresProb,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_thresProb)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1080, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setClampingThresMin") < 0)) __PYX_ERR(1, 1080, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_thresProb = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_thresProb == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1080, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setClampingThresMin", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1080, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.setClampingThresMin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_124setClampingThresMin(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_thresProb);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_124setClampingThresMin(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_thresProb) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setClampingThresMin", 1);

  /* "pyoctomap/octomap.pyx":1081
 * 
 *     def setClampingThresMin(self, double thresProb):
 *         self.thisptr.setClampingThresMin(thresProb)             # <<<<<<<<<<<<<<
 * 
 *     def setOccupancyThres(self, double prob):
 */
  __pyx_v_self->thisptr->setClampingThresMin(__pyx_v_thresProb);

  /* "pyoctomap/octomap.pyx":1080
 *         self.thisptr.setClampingThresMax(thresProb)
 * 
 *     def setClampingThresMin(self, double thresProb):             # <<<<<<<<<<<<<<
 *         self.thisptr.setClampingThresMin(thresProb)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1083
 *         self.thisptr.setClampingThresMin(thresProb)
 * 
 *     def setOccupancyThres(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setOccupancyThres(prob)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_127setOccupancyThres(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_127setOccupancyThres = {"setOccupancyThres", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_127setOccupancyThres, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_127setOccupancyThres(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_prob;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setOccupancyThres (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prob,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prob)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1083, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setOccupancyThres") < 0)) __PYX_ERR(1, 1083, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_prob = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_prob == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1083, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setOccupancyThres", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1083, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.setOccupancyThres", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_126setOccupancyThres(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_prob);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_126setOccupancyThres(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_prob) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setOccupancyThres", 1);

  /* "pyoctomap/octomap.pyx":1084
 * 
 *     def setOccupancyThres(self, double prob):
 *         self.thisptr.setOccupancyThres(prob)             # <<<<<<<<<<<<<<
 * 
 *     def setProbHit(self, double prob):
 */
  __pyx_v_self->thisptr->setOccupancyThres(__pyx_v_prob);

  /* "pyoctomap/octomap.pyx":1083
 *         self.thisptr.setClampingThresMin(thresProb)
 * 
 *     def setOccupancyThres(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setOccupancyThres(prob)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1086
 *         self.thisptr.setOccupancyThres(prob)
 * 
 *     def setProbHit(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setProbHit(prob)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_129setProbHit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_129setProbHit = {"setProbHit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_129setProbHit, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_129setProbHit(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_prob;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setProbHit (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prob,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prob)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1086, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setProbHit") < 0)) __PYX_ERR(1, 1086, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_prob = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_prob == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1086, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setProbHit", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1086, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.setProbHit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_128setProbHit(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_prob);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_128setProbHit(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_prob) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setProbHit", 1);

  /* "pyoctomap/octomap.pyx":1087
 * 
 *     def setProbHit(self, double prob):
 *         self.thisptr.setProbHit(prob)             # <<<<<<<<<<<<<<
 * 
 *     def setProbMiss(self, double prob):
 */
  __pyx_v_self->thisptr->setProbHit(__pyx_v_prob);

  /* "pyoctomap/octomap.pyx":1086
 *         self.thisptr.setOccupancyThres(prob)
 * 
 *     def setProbHit(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setProbHit(prob)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1089
 *         self.thisptr.setProbHit(prob)
 * 
 *     def setProbMiss(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setProbMiss(prob)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_131setProbMiss(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_131setProbMiss = {"setProbMiss", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_131setProbMiss, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_131setProbMiss(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_prob;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setProbMiss (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prob,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_prob)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1089, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "setProbMiss") < 0)) __PYX_ERR(1, 1089, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_prob = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_prob == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1089, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setProbMiss", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1089, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.setProbMiss", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_130setProbMiss(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_prob);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_130setProbMiss(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, double __pyx_v_prob) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setProbMiss", 1);

  /* "pyoctomap/octomap.pyx":1090
 * 
 *     def setProbMiss(self, double prob):
 *         self.thisptr.setProbMiss(prob)             # <<<<<<<<<<<<<<
 * 
 *     def getMetricSize(self):
 */
  __pyx_v_self->thisptr->setProbMiss(__pyx_v_prob);

  /* "pyoctomap/octomap.pyx":1089
 *         self.thisptr.setProbHit(prob)
 * 
 *     def setProbMiss(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setProbMiss(prob)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1092
 *         self.thisptr.setProbMiss(prob)
 * 
 *     def getMetricSize(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_133getMetricSize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_133getMetricSize = {"getMetricSize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_133getMetricSize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_133getMetricSize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMetricSize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getMetricSize", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getMetricSize", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_132getMetricSize(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_132getMetricSize(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMetricSize", 1);

  /* "pyoctomap/octomap.pyx":1093
 * 
 *     def getMetricSize(self):
 *         cdef double x = 0             # <<<<<<<<<<<<<<
 *         cdef double y = 0
 *         cdef double z = 0
 */
  __pyx_v_x = 0.0;

  /* "pyoctomap/octomap.pyx":1094
 *     def getMetricSize(self):
 *         cdef double x = 0
 *         cdef double y = 0             # <<<<<<<<<<<<<<
 *         cdef double z = 0
 *         self.thisptr.getMetricSize(x, y, z)
 */
  __pyx_v_y = 0.0;

  /* "pyoctomap/octomap.pyx":1095
 *         cdef double x = 0
 *         cdef double y = 0
 *         cdef double z = 0             # <<<<<<<<<<<<<<
 *         self.thisptr.getMetricSize(x, y, z)
 *         return np.array([x, y, z], dtype=float)
 */
  __pyx_v_z = 0.0;

  /* "pyoctomap/octomap.pyx":1096
 *         cdef double y = 0
 *         cdef double z = 0
 *         self.thisptr.getMetricSize(x, y, z)             # <<<<<<<<<<<<<<
 *         return np.array([x, y, z], dtype=float)
 * 
 */
  __pyx_v_self->thisptr->getMetricSize(__pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* "pyoctomap/octomap.pyx":1097
 *         cdef double z = 0
 *         self.thisptr.getMetricSize(x, y, z)
 *         return np.array([x, y, z], dtype=float)             # <<<<<<<<<<<<<<
 * 
 *     def getMetricMin(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1)) __PYX_ERR(1, 1097, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3)) __PYX_ERR(1, 1097, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4)) __PYX_ERR(1, 1097, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(1, 1097, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(1, 1097, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1092
 *         self.thisptr.setProbMiss(prob)
 * 
 *     def getMetricSize(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getMetricSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1099
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def getMetricMin(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_135getMetricMin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_135getMetricMin = {"getMetricMin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_135getMetricMin, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_135getMetricMin(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMetricMin (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getMetricMin", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getMetricMin", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_134getMetricMin(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_134getMetricMin(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMetricMin", 1);

  /* "pyoctomap/octomap.pyx":1100
 * 
 *     def getMetricMin(self):
 *         cdef double x = 0             # <<<<<<<<<<<<<<
 *         cdef double y = 0
 *         cdef double z = 0
 */
  __pyx_v_x = 0.0;

  /* "pyoctomap/octomap.pyx":1101
 *     def getMetricMin(self):
 *         cdef double x = 0
 *         cdef double y = 0             # <<<<<<<<<<<<<<
 *         cdef double z = 0
 *         self.thisptr.getMetricMin(x, y, z)
 */
  __pyx_v_y = 0.0;

  /* "pyoctomap/octomap.pyx":1102
 *         cdef double x = 0
 *         cdef double y = 0
 *         cdef double z = 0             # <<<<<<<<<<<<<<
 *         self.thisptr.getMetricMin(x, y, z)
 *         return np.array([x, y, z], dtype=float)
 */
  __pyx_v_z = 0.0;

  /* "pyoctomap/octomap.pyx":1103
 *         cdef double y = 0
 *         cdef double z = 0
 *         self.thisptr.getMetricMin(x, y, z)             # <<<<<<<<<<<<<<
 *         return np.array([x, y, z], dtype=float)
 * 
 */
  __pyx_v_self->thisptr->getMetricMin(__pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* "pyoctomap/octomap.pyx":1104
 *         cdef double z = 0
 *         self.thisptr.getMetricMin(x, y, z)
 *         return np.array([x, y, z], dtype=float)             # <<<<<<<<<<<<<<
 * 
 *     def getMetricMax(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1)) __PYX_ERR(1, 1104, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3)) __PYX_ERR(1, 1104, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4)) __PYX_ERR(1, 1104, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(1, 1104, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(1, 1104, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1099
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def getMetricMin(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getMetricMin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1106
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def getMetricMax(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_137getMetricMax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_137getMetricMax = {"getMetricMax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_137getMetricMax, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_137getMetricMax(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMetricMax (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("getMetricMax", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "getMetricMax", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_136getMetricMax(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_136getMetricMax(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getMetricMax", 1);

  /* "pyoctomap/octomap.pyx":1107
 * 
 *     def getMetricMax(self):
 *         cdef double x = 0             # <<<<<<<<<<<<<<
 *         cdef double y = 0
 *         cdef double z = 0
 */
  __pyx_v_x = 0.0;

  /* "pyoctomap/octomap.pyx":1108
 *     def getMetricMax(self):
 *         cdef double x = 0
 *         cdef double y = 0             # <<<<<<<<<<<<<<
 *         cdef double z = 0
 *         self.thisptr.getMetricMax(x, y, z)
 */
  __pyx_v_y = 0.0;

  /* "pyoctomap/octomap.pyx":1109
 *         cdef double x = 0
 *         cdef double y = 0
 *         cdef double z = 0             # <<<<<<<<<<<<<<
 *         self.thisptr.getMetricMax(x, y, z)
 *         return np.array([x, y, z], dtype=float)
 */
  __pyx_v_z = 0.0;

  /* "pyoctomap/octomap.pyx":1110
 *         cdef double y = 0
 *         cdef double z = 0
 *         self.thisptr.getMetricMax(x, y, z)             # <<<<<<<<<<<<<<
 *         return np.array([x, y, z], dtype=float)
 * 
 */
  __pyx_v_self->thisptr->getMetricMax(__pyx_v_x, __pyx_v_y, __pyx_v_z);

  /* "pyoctomap/octomap.pyx":1111
 *         cdef double z = 0
 *         self.thisptr.getMetricMax(x, y, z)
 *         return np.array([x, y, z], dtype=float)             # <<<<<<<<<<<<<<
 * 
 *     def expandNode(self, node):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_x); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_y); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_z); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1)) __PYX_ERR(1, 1111, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3)) __PYX_ERR(1, 1111, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4)) __PYX_ERR(1, 1111, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5)) __PYX_ERR(1, 1111, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, ((PyObject *)(&PyFloat_Type))) < 0) __PYX_ERR(1, 1111, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1106
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def getMetricMax(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getMetricMax", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1113
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def expandNode(self, node):             # <<<<<<<<<<<<<<
 *         self.thisptr.expandNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_139expandNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_139expandNode = {"expandNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_139expandNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_139expandNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_node = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("expandNode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_node)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1113, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "expandNode") < 0)) __PYX_ERR(1, 1113, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_node = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("expandNode", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1113, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.expandNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_138expandNode(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_node);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_138expandNode(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("expandNode", 1);

  /* "pyoctomap/octomap.pyx":1114
 * 
 *     def expandNode(self, node):
 *         self.thisptr.expandNode((<OcTreeNode>node).thisptr)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 * 
 */
  __pyx_v_self->thisptr->expandNode(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr);

  /* "pyoctomap/octomap.pyx":1115
 *     def expandNode(self, node):
 *         self.thisptr.expandNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 * 
 *     def createNodeChild(self, node, int idx):
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":1113
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def expandNode(self, node):             # <<<<<<<<<<<<<<
 *         self.thisptr.expandNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1117
 *         self._mod_version += 1
 * 
 *     def createNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.createNodeChild((<OcTreeNode>node).thisptr, idx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_141createNodeChild(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_141createNodeChild = {"createNodeChild", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_141createNodeChild, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_141createNodeChild(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_node = 0;
  int __pyx_v_idx;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createNodeChild (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_idx,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_node)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1117, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_idx)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1117, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("createNodeChild", 1, 2, 2, 1); __PYX_ERR(1, 1117, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "createNodeChild") < 0)) __PYX_ERR(1, 1117, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_node = values[0];
    __pyx_v_idx = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1117, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createNodeChild", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 1117, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.createNodeChild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_140createNodeChild(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_node, __pyx_v_idx);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_140createNodeChild(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node, int __pyx_v_idx) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_child = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("createNodeChild", 1);

  /* "pyoctomap/octomap.pyx":1118
 * 
 *     def createNodeChild(self, node, int idx):
 *         child = OcTreeNode()             # <<<<<<<<<<<<<<
 *         child.thisptr = self.thisptr.createNodeChild((<OcTreeNode>node).thisptr, idx)
 *         self._mod_version += 1
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_child = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":1119
 *     def createNodeChild(self, node, int idx):
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.createNodeChild((<OcTreeNode>node).thisptr, idx)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 *         return child
 */
  __pyx_v_child->thisptr = __pyx_v_self->thisptr->createNodeChild(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr, __pyx_v_idx);

  /* "pyoctomap/octomap.pyx":1120
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.createNodeChild((<OcTreeNode>node).thisptr, idx)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 *         return child
 * 
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":1121
 *         child.thisptr = self.thisptr.createNodeChild((<OcTreeNode>node).thisptr, idx)
 *         self._mod_version += 1
 *         return child             # <<<<<<<<<<<<<<
 * 
 *     def getNodeChild(self, node, int idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_child);
  __pyx_r = ((PyObject *)__pyx_v_child);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1117
 *         self._mod_version += 1
 * 
 *     def createNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.createNodeChild((<OcTreeNode>node).thisptr, idx)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.createNodeChild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1123
 *         return child
 * 
 *     def getNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.getNodeChild((<OcTreeNode>node).thisptr, idx)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_143getNodeChild(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_143getNodeChild = {"getNodeChild", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_143getNodeChild, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_143getNodeChild(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_node = 0;
  int __pyx_v_idx;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNodeChild (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_idx,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_node)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1123, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_idx)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1123, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("getNodeChild", 1, 2, 2, 1); __PYX_ERR(1, 1123, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "getNodeChild") < 0)) __PYX_ERR(1, 1123, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_node = values[0];
    __pyx_v_idx = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1123, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getNodeChild", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 1123, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getNodeChild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_142getNodeChild(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_node, __pyx_v_idx);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_142getNodeChild(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node, int __pyx_v_idx) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *__pyx_v_child = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("getNodeChild", 1);

  /* "pyoctomap/octomap.pyx":1124
 * 
 *     def getNodeChild(self, node, int idx):
 *         child = OcTreeNode()             # <<<<<<<<<<<<<<
 *         child.thisptr = self.thisptr.getNodeChild((<OcTreeNode>node).thisptr, idx)
 *         return child
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_child = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":1125
 *     def getNodeChild(self, node, int idx):
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.getNodeChild((<OcTreeNode>node).thisptr, idx)             # <<<<<<<<<<<<<<
 *         return child
 * 
 */
  __pyx_v_child->thisptr = __pyx_v_self->thisptr->getNodeChild(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr, __pyx_v_idx);

  /* "pyoctomap/octomap.pyx":1126
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.getNodeChild((<OcTreeNode>node).thisptr, idx)
 *         return child             # <<<<<<<<<<<<<<
 * 
 *     def isNodeCollapsible(self, node):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_child);
  __pyx_r = ((PyObject *)__pyx_v_child);
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1123
 *         return child
 * 
 *     def getNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.getNodeChild((<OcTreeNode>node).thisptr, idx)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.getNodeChild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1128
 *         return child
 * 
 *     def isNodeCollapsible(self, node):             # <<<<<<<<<<<<<<
 *         return self.thisptr.isNodeCollapsible((<OcTreeNode>node).thisptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_145isNodeCollapsible(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_145isNodeCollapsible = {"isNodeCollapsible", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_145isNodeCollapsible, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_145isNodeCollapsible(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_node = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isNodeCollapsible (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_node)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1128, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "isNodeCollapsible") < 0)) __PYX_ERR(1, 1128, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_node = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isNodeCollapsible", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1128, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.isNodeCollapsible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_144isNodeCollapsible(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_node);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_144isNodeCollapsible(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("isNodeCollapsible", 1);

  /* "pyoctomap/octomap.pyx":1129
 * 
 *     def isNodeCollapsible(self, node):
 *         return self.thisptr.isNodeCollapsible((<OcTreeNode>node).thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def deleteNodeChild(self, node, int idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->isNodeCollapsible(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1128
 *         return child
 * 
 *     def isNodeCollapsible(self, node):             # <<<<<<<<<<<<<<
 *         return self.thisptr.isNodeCollapsible((<OcTreeNode>node).thisptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.isNodeCollapsible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1131
 *         return self.thisptr.isNodeCollapsible((<OcTreeNode>node).thisptr)
 * 
 *     def deleteNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         self.thisptr.deleteNodeChild((<OcTreeNode>node).thisptr, idx)
 *         self._mod_version += 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_147deleteNodeChild(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_147deleteNodeChild = {"deleteNodeChild", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_147deleteNodeChild, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_147deleteNodeChild(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_node = 0;
  int __pyx_v_idx;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deleteNodeChild (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,&__pyx_n_s_idx,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_node)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1131, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_idx)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1131, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("deleteNodeChild", 1, 2, 2, 1); __PYX_ERR(1, 1131, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "deleteNodeChild") < 0)) __PYX_ERR(1, 1131, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_node = values[0];
    __pyx_v_idx = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1131, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("deleteNodeChild", 1, 2, 2, __pyx_nargs); __PYX_ERR(1, 1131, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.deleteNodeChild", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_146deleteNodeChild(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_node, __pyx_v_idx);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_146deleteNodeChild(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node, int __pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("deleteNodeChild", 1);

  /* "pyoctomap/octomap.pyx":1132
 * 
 *     def deleteNodeChild(self, node, int idx):
 *         self.thisptr.deleteNodeChild((<OcTreeNode>node).thisptr, idx)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 * 
 */
  __pyx_v_self->thisptr->deleteNodeChild(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr, __pyx_v_idx);

  /* "pyoctomap/octomap.pyx":1133
 *     def deleteNodeChild(self, node, int idx):
 *         self.thisptr.deleteNodeChild((<OcTreeNode>node).thisptr, idx)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 * 
 *     def pruneNode(self, node):
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":1131
 *         return self.thisptr.isNodeCollapsible((<OcTreeNode>node).thisptr)
 * 
 *     def deleteNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         self.thisptr.deleteNodeChild((<OcTreeNode>node).thisptr, idx)
 *         self._mod_version += 1
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1135
 *         self._mod_version += 1
 * 
 *     def pruneNode(self, node):             # <<<<<<<<<<<<<<
 *         cdef cppbool _ret_prune = self.thisptr.pruneNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_149pruneNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_149pruneNode = {"pruneNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_149pruneNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_149pruneNode(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_node = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pruneNode (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_node)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1135, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "pruneNode") < 0)) __PYX_ERR(1, 1135, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_node = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pruneNode", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1135, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.pruneNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_148pruneNode(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_node);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_148pruneNode(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node) {
  bool __pyx_v__ret_prune;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pruneNode", 1);

  /* "pyoctomap/octomap.pyx":1136
 * 
 *     def pruneNode(self, node):
 *         cdef cppbool _ret_prune = self.thisptr.pruneNode((<OcTreeNode>node).thisptr)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 *         return _ret_prune
 */
  __pyx_v__ret_prune = __pyx_v_self->thisptr->pruneNode(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr);

  /* "pyoctomap/octomap.pyx":1137
 *     def pruneNode(self, node):
 *         cdef cppbool _ret_prune = self.thisptr.pruneNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 *         return _ret_prune
 * 
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":1138
 *         cdef cppbool _ret_prune = self.thisptr.pruneNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1
 *         return _ret_prune             # <<<<<<<<<<<<<<
 * 
 *     def nodeHasChildren(self, node):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v__ret_prune); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1135
 *         self._mod_version += 1
 * 
 *     def pruneNode(self, node):             # <<<<<<<<<<<<<<
 *         cdef cppbool _ret_prune = self.thisptr.pruneNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.pruneNode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1140
 *         return _ret_prune
 * 
 *     def nodeHasChildren(self, node):             # <<<<<<<<<<<<<<
 *         """
 *         Check if a node has children (recommended replacement for node.hasChildren()).
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_151nodeHasChildren(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_150nodeHasChildren, "\n        Check if a node has children (recommended replacement for node.hasChildren()).\n        \n        Args:\n            node: OcTreeNode to check\n            \n        Returns:\n            bool: True if node has children, False otherwise\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_151nodeHasChildren = {"nodeHasChildren", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_151nodeHasChildren, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_150nodeHasChildren};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_151nodeHasChildren(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_node = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("nodeHasChildren (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_node)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1140, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "nodeHasChildren") < 0)) __PYX_ERR(1, 1140, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_node = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("nodeHasChildren", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1140, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.nodeHasChildren", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_150nodeHasChildren(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_node);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_150nodeHasChildren(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("nodeHasChildren", 1);

  /* "pyoctomap/octomap.pyx":1150
 *             bool: True if node has children, False otherwise
 *         """
 *         if isinstance(node, OcTreeNode):             # <<<<<<<<<<<<<<
 *             if (<OcTreeNode>node).thisptr:
 *                 return self.thisptr.nodeHasChildren((<OcTreeNode>node).thisptr)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_9pyoctomap_7octomap_OcTreeNode); 
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":1151
 *         """
 *         if isinstance(node, OcTreeNode):
 *             if (<OcTreeNode>node).thisptr:             # <<<<<<<<<<<<<<
 *                 return self.thisptr.nodeHasChildren((<OcTreeNode>node).thisptr)
 *             else:
 */
    __pyx_t_1 = (((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr != 0);
    if (likely(__pyx_t_1)) {

      /* "pyoctomap/octomap.pyx":1152
 *         if isinstance(node, OcTreeNode):
 *             if (<OcTreeNode>node).thisptr:
 *                 return self.thisptr.nodeHasChildren((<OcTreeNode>node).thisptr)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NullPointerException
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->nodeHasChildren(((struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode *)__pyx_v_node)->thisptr)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "pyoctomap/octomap.pyx":1151
 *         """
 *         if isinstance(node, OcTreeNode):
 *             if (<OcTreeNode>node).thisptr:             # <<<<<<<<<<<<<<
 *                 return self.thisptr.nodeHasChildren((<OcTreeNode>node).thisptr)
 *             else:
 */
    }

    /* "pyoctomap/octomap.pyx":1154
 *                 return self.thisptr.nodeHasChildren((<OcTreeNode>node).thisptr)
 *             else:
 *                 raise NullPointerException             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Expected OcTreeNode")
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 1154, __pyx_L1_error)
    }

    /* "pyoctomap/octomap.pyx":1150
 *             bool: True if node has children, False otherwise
 *         """
 *         if isinstance(node, OcTreeNode):             # <<<<<<<<<<<<<<
 *             if (<OcTreeNode>node).thisptr:
 *                 return self.thisptr.nodeHasChildren((<OcTreeNode>node).thisptr)
 */
  }

  /* "pyoctomap/octomap.pyx":1156
 *                 raise NullPointerException
 *         else:
 *             raise TypeError("Expected OcTreeNode")             # <<<<<<<<<<<<<<
 * 
 *     def dynamicEDT_generate(self, maxdist,
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1156, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":1140
 *         return _ret_prune
 * 
 *     def nodeHasChildren(self, node):             # <<<<<<<<<<<<<<
 *         """
 *         Check if a node has children (recommended replacement for node.hasChildren()).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.nodeHasChildren", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1158
 *             raise TypeError("Expected OcTreeNode")
 * 
 *     def dynamicEDT_generate(self, maxdist,             # <<<<<<<<<<<<<<
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_min,
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_max,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_153dynamicEDT_generate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_153dynamicEDT_generate = {"dynamicEDT_generate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_153dynamicEDT_generate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_153dynamicEDT_generate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_maxdist = 0;
  PyArrayObject *__pyx_v_bbx_min = 0;
  PyArrayObject *__pyx_v_bbx_max = 0;
  PyObject *__pyx_v_treatUnknownAsOccupied = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dynamicEDT_generate (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_maxdist,&__pyx_n_s_bbx_min,&__pyx_n_s_bbx_max,&__pyx_n_s_treatUnknownAsOccupied,0};

    /* "pyoctomap/octomap.pyx":1161
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_min,
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_max,
 *                             treatUnknownAsOccupied=False):             # <<<<<<<<<<<<<<
 *         # Clean up existing DynamicEDT if it exists
 *         if self.edtptr != NULL:
 */
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_maxdist)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1158, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bbx_min)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1158, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("dynamicEDT_generate", 0, 3, 4, 1); __PYX_ERR(1, 1158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bbx_max)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1158, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("dynamicEDT_generate", 0, 3, 4, 2); __PYX_ERR(1, 1158, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_treatUnknownAsOccupied);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1158, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "dynamicEDT_generate") < 0)) __PYX_ERR(1, 1158, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_maxdist = values[0];
    __pyx_v_bbx_min = ((PyArrayObject *)values[1]);
    __pyx_v_bbx_max = ((PyArrayObject *)values[2]);
    __pyx_v_treatUnknownAsOccupied = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dynamicEDT_generate", 0, 3, 4, __pyx_nargs); __PYX_ERR(1, 1158, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.dynamicEDT_generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bbx_min), __pyx_ptype_5numpy_ndarray, 1, "bbx_min", 0))) __PYX_ERR(1, 1159, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bbx_max), __pyx_ptype_5numpy_ndarray, 1, "bbx_max", 0))) __PYX_ERR(1, 1160, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_152dynamicEDT_generate(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_maxdist, __pyx_v_bbx_min, __pyx_v_bbx_max, __pyx_v_treatUnknownAsOccupied);

  /* "pyoctomap/octomap.pyx":1158
 *             raise TypeError("Expected OcTreeNode")
 * 
 *     def dynamicEDT_generate(self, maxdist,             # <<<<<<<<<<<<<<
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_min,
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_max,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_152dynamicEDT_generate(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_maxdist, PyArrayObject *__pyx_v_bbx_min, PyArrayObject *__pyx_v_bbx_max, PyObject *__pyx_v_treatUnknownAsOccupied) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_bbx_max;
  __Pyx_Buffer __pyx_pybuffer_bbx_max;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_bbx_min;
  __Pyx_Buffer __pyx_pybuffer_bbx_min;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  float __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  octomap::point3d __pyx_t_7;
  octomap::point3d __pyx_t_8;
  bool __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dynamicEDT_generate", 1);
  __pyx_pybuffer_bbx_min.pybuffer.buf = NULL;
  __pyx_pybuffer_bbx_min.refcount = 0;
  __pyx_pybuffernd_bbx_min.data = NULL;
  __pyx_pybuffernd_bbx_min.rcbuffer = &__pyx_pybuffer_bbx_min;
  __pyx_pybuffer_bbx_max.pybuffer.buf = NULL;
  __pyx_pybuffer_bbx_max.refcount = 0;
  __pyx_pybuffernd_bbx_max.data = NULL;
  __pyx_pybuffernd_bbx_max.rcbuffer = &__pyx_pybuffer_bbx_max;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bbx_min.rcbuffer->pybuffer, (PyObject*)__pyx_v_bbx_min, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1158, __pyx_L1_error)
  }
  __pyx_pybuffernd_bbx_min.diminfo[0].strides = __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_bbx_min.diminfo[0].shape = __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_bbx_max.rcbuffer->pybuffer, (PyObject*)__pyx_v_bbx_max, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1158, __pyx_L1_error)
  }
  __pyx_pybuffernd_bbx_max.diminfo[0].strides = __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_bbx_max.diminfo[0].shape = __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":1163
 *                             treatUnknownAsOccupied=False):
 *         # Clean up existing DynamicEDT if it exists
 *         if self.edtptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.edtptr
 *             self.edtptr = NULL
 */
  __pyx_t_1 = (__pyx_v_self->edtptr != NULL);
  if (__pyx_t_1) {

    /* "pyoctomap/octomap.pyx":1164
 *         # Clean up existing DynamicEDT if it exists
 *         if self.edtptr != NULL:
 *             del self.edtptr             # <<<<<<<<<<<<<<
 *             self.edtptr = NULL
 * 
 */
    delete __pyx_v_self->edtptr;

    /* "pyoctomap/octomap.pyx":1165
 *         if self.edtptr != NULL:
 *             del self.edtptr
 *             self.edtptr = NULL             # <<<<<<<<<<<<<<
 * 
 *         self.edtptr = new edt.DynamicEDTOctomap(<float?>maxdist,
 */
    __pyx_v_self->edtptr = NULL;

    /* "pyoctomap/octomap.pyx":1163
 *                             treatUnknownAsOccupied=False):
 *         # Clean up existing DynamicEDT if it exists
 *         if self.edtptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.edtptr
 *             self.edtptr = NULL
 */
  }

  /* "pyoctomap/octomap.pyx":1167
 *             self.edtptr = NULL
 * 
 *         self.edtptr = new edt.DynamicEDTOctomap(<float?>maxdist,             # <<<<<<<<<<<<<<
 *                                                 self.thisptr,
 *                                                 defs.point3d(bbx_min[0], bbx_min[1], bbx_min[2]),
 */
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_v_maxdist); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1167, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1169
 *         self.edtptr = new edt.DynamicEDTOctomap(<float?>maxdist,
 *                                                 self.thisptr,
 *                                                 defs.point3d(bbx_min[0], bbx_min[1], bbx_min[2]),             # <<<<<<<<<<<<<<
 *                                                 defs.point3d(bbx_max[0], bbx_max[1], bbx_max[2]),
 *                                                 <cppbool?>treatUnknownAsOccupied)
 */
  __pyx_t_3 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_bbx_min.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_bbx_min.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(1, 1169, __pyx_L1_error)
  }
  __pyx_t_5 = 1;
  __pyx_t_4 = -1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_pybuffernd_bbx_min.diminfo[0].shape;
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_bbx_min.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(1, 1169, __pyx_L1_error)
  }
  __pyx_t_6 = 2;
  __pyx_t_4 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_bbx_min.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_bbx_min.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(1, 1169, __pyx_L1_error)
  }
  try {
    __pyx_t_7 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_bbx_min.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_bbx_min.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_min.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_bbx_min.diminfo[0].strides)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1169, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":1170
 *                                                 self.thisptr,
 *                                                 defs.point3d(bbx_min[0], bbx_min[1], bbx_min[2]),
 *                                                 defs.point3d(bbx_max[0], bbx_max[1], bbx_max[2]),             # <<<<<<<<<<<<<<
 *                                                 <cppbool?>treatUnknownAsOccupied)
 * 
 */
  __pyx_t_6 = 0;
  __pyx_t_4 = -1;
  if (__pyx_t_6 < 0) {
    __pyx_t_6 += __pyx_pybuffernd_bbx_max.diminfo[0].shape;
    if (unlikely(__pyx_t_6 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_bbx_max.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(1, 1170, __pyx_L1_error)
  }
  __pyx_t_5 = 1;
  __pyx_t_4 = -1;
  if (__pyx_t_5 < 0) {
    __pyx_t_5 += __pyx_pybuffernd_bbx_max.diminfo[0].shape;
    if (unlikely(__pyx_t_5 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_bbx_max.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(1, 1170, __pyx_L1_error)
  }
  __pyx_t_3 = 2;
  __pyx_t_4 = -1;
  if (__pyx_t_3 < 0) {
    __pyx_t_3 += __pyx_pybuffernd_bbx_max.diminfo[0].shape;
    if (unlikely(__pyx_t_3 < 0)) __pyx_t_4 = 0;
  } else if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_bbx_max.diminfo[0].shape)) __pyx_t_4 = 0;
  if (unlikely(__pyx_t_4 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_4);
    __PYX_ERR(1, 1170, __pyx_L1_error)
  }
  try {
    __pyx_t_8 = octomap::point3d((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_bbx_max.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_bbx_max.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_bbx_max.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_bbx_max.diminfo[0].strides)));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1170, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":1171
 *                                                 defs.point3d(bbx_min[0], bbx_min[1], bbx_min[2]),
 *                                                 defs.point3d(bbx_max[0], bbx_max[1], bbx_max[2]),
 *                                                 <cppbool?>treatUnknownAsOccupied)             # <<<<<<<<<<<<<<
 * 
 *     def dynamicEDT_checkConsistency(self):
 */
  __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_v_treatUnknownAsOccupied); if (unlikely((__pyx_t_9 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1171, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1167
 *             self.edtptr = NULL
 * 
 *         self.edtptr = new edt.DynamicEDTOctomap(<float?>maxdist,             # <<<<<<<<<<<<<<
 *                                                 self.thisptr,
 *                                                 defs.point3d(bbx_min[0], bbx_min[1], bbx_min[2]),
 */
  __pyx_v_self->edtptr = new DynamicEDTOctomap(((float)__pyx_t_2), ((octomap::OcTree *)__pyx_v_self->thisptr), ((octomap::point3d &)__pyx_t_7), ((octomap::point3d &)__pyx_t_8), ((bool)__pyx_t_9));

  /* "pyoctomap/octomap.pyx":1158
 *             raise TypeError("Expected OcTreeNode")
 * 
 *     def dynamicEDT_generate(self, maxdist,             # <<<<<<<<<<<<<<
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_min,
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_max,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_max.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_min.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.dynamicEDT_generate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_max.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_bbx_min.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1173
 *                                                 <cppbool?>treatUnknownAsOccupied)
 * 
 *     def dynamicEDT_checkConsistency(self):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             return self.edtptr.checkConsistency()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_155dynamicEDT_checkConsistency(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_155dynamicEDT_checkConsistency = {"dynamicEDT_checkConsistency", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_155dynamicEDT_checkConsistency, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_155dynamicEDT_checkConsistency(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dynamicEDT_checkConsistency (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("dynamicEDT_checkConsistency", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "dynamicEDT_checkConsistency", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_154dynamicEDT_checkConsistency(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_154dynamicEDT_checkConsistency(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dynamicEDT_checkConsistency", 1);

  /* "pyoctomap/octomap.pyx":1174
 * 
 *     def dynamicEDT_checkConsistency(self):
 *         if self.edtptr:             # <<<<<<<<<<<<<<
 *             return self.edtptr.checkConsistency()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->edtptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":1175
 *     def dynamicEDT_checkConsistency(self):
 *         if self.edtptr:
 *             return self.edtptr.checkConsistency()             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->edtptr->checkConsistency()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":1174
 * 
 *     def dynamicEDT_checkConsistency(self):
 *         if self.edtptr:             # <<<<<<<<<<<<<<
 *             return self.edtptr.checkConsistency()
 *         else:
 */
  }

  /* "pyoctomap/octomap.pyx":1177
 *             return self.edtptr.checkConsistency()
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 * 
 *     def dynamicEDT_update(self, updateRealDist):
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1177, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":1173
 *                                                 <cppbool?>treatUnknownAsOccupied)
 * 
 *     def dynamicEDT_checkConsistency(self):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             return self.edtptr.checkConsistency()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.dynamicEDT_checkConsistency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1179
 *             raise NullPointerException
 * 
 *     def dynamicEDT_update(self, updateRealDist):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             self.edtptr.update(<cppbool?>updateRealDist)
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_157dynamicEDT_update(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_157dynamicEDT_update = {"dynamicEDT_update", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_157dynamicEDT_update, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_157dynamicEDT_update(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_updateRealDist = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dynamicEDT_update (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_updateRealDist,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_updateRealDist)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1179, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "dynamicEDT_update") < 0)) __PYX_ERR(1, 1179, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_updateRealDist = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dynamicEDT_update", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1179, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.dynamicEDT_update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_156dynamicEDT_update(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_updateRealDist);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_156dynamicEDT_update(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_updateRealDist) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  bool __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dynamicEDT_update", 1);

  /* "pyoctomap/octomap.pyx":1180
 * 
 *     def dynamicEDT_update(self, updateRealDist):
 *         if self.edtptr:             # <<<<<<<<<<<<<<
 *             self.edtptr.update(<cppbool?>updateRealDist)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->edtptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":1181
 *     def dynamicEDT_update(self, updateRealDist):
 *         if self.edtptr:
 *             self.edtptr.update(<cppbool?>updateRealDist)             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_updateRealDist); if (unlikely((__pyx_t_2 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1181, __pyx_L1_error)
    __pyx_v_self->edtptr->update(((bool)__pyx_t_2));

    /* "pyoctomap/octomap.pyx":1180
 * 
 *     def dynamicEDT_update(self, updateRealDist):
 *         if self.edtptr:             # <<<<<<<<<<<<<<
 *             self.edtptr.update(<cppbool?>updateRealDist)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":1183
 *             self.edtptr.update(<cppbool?>updateRealDist)
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 * 
 *     def dynamicEDT_getMaxDist(self):
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 1183, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":1179
 *             raise NullPointerException
 * 
 *     def dynamicEDT_update(self, updateRealDist):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             self.edtptr.update(<cppbool?>updateRealDist)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.dynamicEDT_update", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1185
 *             raise NullPointerException
 * 
 *     def dynamicEDT_getMaxDist(self):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             return self.edtptr.getMaxDist()
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_159dynamicEDT_getMaxDist(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_159dynamicEDT_getMaxDist = {"dynamicEDT_getMaxDist", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_159dynamicEDT_getMaxDist, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_159dynamicEDT_getMaxDist(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dynamicEDT_getMaxDist (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("dynamicEDT_getMaxDist", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "dynamicEDT_getMaxDist", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_158dynamicEDT_getMaxDist(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_158dynamicEDT_getMaxDist(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dynamicEDT_getMaxDist", 1);

  /* "pyoctomap/octomap.pyx":1186
 * 
 *     def dynamicEDT_getMaxDist(self):
 *         if self.edtptr:             # <<<<<<<<<<<<<<
 *             return self.edtptr.getMaxDist()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->edtptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":1187
 *     def dynamicEDT_getMaxDist(self):
 *         if self.edtptr:
 *             return self.edtptr.getMaxDist()             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->edtptr->getMaxDist()); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":1186
 * 
 *     def dynamicEDT_getMaxDist(self):
 *         if self.edtptr:             # <<<<<<<<<<<<<<
 *             return self.edtptr.getMaxDist()
 *         else:
 */
  }

  /* "pyoctomap/octomap.pyx":1189
 *             return self.edtptr.getMaxDist()
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 * 
 *     def dynamicEDT_getDistance(self, p):
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1189, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":1185
 *             raise NullPointerException
 * 
 *     def dynamicEDT_getMaxDist(self):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             return self.edtptr.getMaxDist()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.dynamicEDT_getMaxDist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1191
 *             raise NullPointerException
 * 
 *     def dynamicEDT_getDistance(self, p):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             if isinstance(p, OcTreeKey):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_161dynamicEDT_getDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_161dynamicEDT_getDistance = {"dynamicEDT_getDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_161dynamicEDT_getDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_161dynamicEDT_getDistance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_p = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dynamicEDT_getDistance (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1191, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "dynamicEDT_getDistance") < 0)) __PYX_ERR(1, 1191, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_p = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dynamicEDT_getDistance", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1191, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.dynamicEDT_getDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_160dynamicEDT_getDistance(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_p);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_160dynamicEDT_getDistance(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  unsigned short __pyx_t_3;
  unsigned short __pyx_t_4;
  unsigned short __pyx_t_5;
  octomap::OcTreeKey __pyx_t_6;
  float __pyx_t_7;
  float __pyx_t_8;
  float __pyx_t_9;
  octomap::point3d __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dynamicEDT_getDistance", 1);

  /* "pyoctomap/octomap.pyx":1192
 * 
 *     def dynamicEDT_getDistance(self, p):
 *         if self.edtptr:             # <<<<<<<<<<<<<<
 *             if isinstance(p, OcTreeKey):
 *                 return self.edtptr.getDistance(edt.OcTreeKey(<unsigned short int>p[0],
 */
  __pyx_t_1 = (__pyx_v_self->edtptr != 0);
  if (likely(__pyx_t_1)) {

    /* "pyoctomap/octomap.pyx":1193
 *     def dynamicEDT_getDistance(self, p):
 *         if self.edtptr:
 *             if isinstance(p, OcTreeKey):             # <<<<<<<<<<<<<<
 *                 return self.edtptr.getDistance(edt.OcTreeKey(<unsigned short int>p[0],
 *                                                              <unsigned short int>p[1],
 */
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_p, __pyx_ptype_9pyoctomap_7octomap_OcTreeKey); 
    if (__pyx_t_1) {

      /* "pyoctomap/octomap.pyx":1194
 *         if self.edtptr:
 *             if isinstance(p, OcTreeKey):
 *                 return self.edtptr.getDistance(edt.OcTreeKey(<unsigned short int>p[0],             # <<<<<<<<<<<<<<
 *                                                              <unsigned short int>p[1],
 *                                                              <unsigned short int>p[2]))
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_unsigned_short(__pyx_t_2); if (unlikely((__pyx_t_3 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 1194, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyoctomap/octomap.pyx":1195
 *             if isinstance(p, OcTreeKey):
 *                 return self.edtptr.getDistance(edt.OcTreeKey(<unsigned short int>p[0],
 *                                                              <unsigned short int>p[1],             # <<<<<<<<<<<<<<
 *                                                              <unsigned short int>p[2]))
 *             else:
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyInt_As_unsigned_short(__pyx_t_2); if (unlikely((__pyx_t_4 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 1195, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyoctomap/octomap.pyx":1196
 *                 return self.edtptr.getDistance(edt.OcTreeKey(<unsigned short int>p[0],
 *                                                              <unsigned short int>p[1],
 *                                                              <unsigned short int>p[2]))             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.edtptr.getDistance(edt.point3d(<float?>p[0],
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyInt_As_unsigned_short(__pyx_t_2); if (unlikely((__pyx_t_5 == (unsigned short)-1) && PyErr_Occurred())) __PYX_ERR(1, 1196, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyoctomap/octomap.pyx":1194
 *         if self.edtptr:
 *             if isinstance(p, OcTreeKey):
 *                 return self.edtptr.getDistance(edt.OcTreeKey(<unsigned short int>p[0],             # <<<<<<<<<<<<<<
 *                                                              <unsigned short int>p[1],
 *                                                              <unsigned short int>p[2]))
 */
      try {
        __pyx_t_6 = octomap::OcTreeKey(((unsigned short)__pyx_t_3), ((unsigned short)__pyx_t_4), ((unsigned short)__pyx_t_5));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1194, __pyx_L1_error)
      }
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->edtptr->getDistance(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_6))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "pyoctomap/octomap.pyx":1193
 *     def dynamicEDT_getDistance(self, p):
 *         if self.edtptr:
 *             if isinstance(p, OcTreeKey):             # <<<<<<<<<<<<<<
 *                 return self.edtptr.getDistance(edt.OcTreeKey(<unsigned short int>p[0],
 *                                                              <unsigned short int>p[1],
 */
    }

    /* "pyoctomap/octomap.pyx":1198
 *                                                              <unsigned short int>p[2]))
 *             else:
 *                 return self.edtptr.getDistance(edt.point3d(<float?>p[0],             # <<<<<<<<<<<<<<
 *                                                            <float?>p[1],
 *                                                            <float?>p[2]))
 */
    /*else*/ {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_7 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1198, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyoctomap/octomap.pyx":1199
 *             else:
 *                 return self.edtptr.getDistance(edt.point3d(<float?>p[0],
 *                                                            <float?>p[1],             # <<<<<<<<<<<<<<
 *                                                            <float?>p[2]))
 *         else:
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1199, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1199, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyoctomap/octomap.pyx":1200
 *                 return self.edtptr.getDistance(edt.point3d(<float?>p[0],
 *                                                            <float?>p[1],
 *                                                            <float?>p[2]))             # <<<<<<<<<<<<<<
 *         else:
 *             raise NullPointerException
 */
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_p, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1200, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_9 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1200, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "pyoctomap/octomap.pyx":1198
 *                                                              <unsigned short int>p[2]))
 *             else:
 *                 return self.edtptr.getDistance(edt.point3d(<float?>p[0],             # <<<<<<<<<<<<<<
 *                                                            <float?>p[1],
 *                                                            <float?>p[2]))
 */
      try {
        __pyx_t_10 = octomap::point3d(((float)__pyx_t_7), ((float)__pyx_t_8), ((float)__pyx_t_9));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(1, 1198, __pyx_L1_error)
      }
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->edtptr->getDistance(__PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_10))); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;
    }

    /* "pyoctomap/octomap.pyx":1192
 * 
 *     def dynamicEDT_getDistance(self, p):
 *         if self.edtptr:             # <<<<<<<<<<<<<<
 *             if isinstance(p, OcTreeKey):
 *                 return self.edtptr.getDistance(edt.OcTreeKey(<unsigned short int>p[0],
 */
  }

  /* "pyoctomap/octomap.pyx":1202
 *                                                            <float?>p[2]))
 *         else:
 *             raise NullPointerException             # <<<<<<<<<<<<<<
 * 
 *     def addPointWithRayCasting(self,
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NullPointerException); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1202, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":1191
 *             raise NullPointerException
 * 
 *     def dynamicEDT_getDistance(self, p):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             if isinstance(p, OcTreeKey):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.dynamicEDT_getDistance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1204
 *             raise NullPointerException
 * 
 *     def addPointWithRayCasting(self,             # <<<<<<<<<<<<<<
 *                               point,
 *                               sensor_origin,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_163addPointWithRayCasting(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_162addPointWithRayCasting, "\n        Add a single 3D point to update the occupancy grid using ray casting.\n        \n        This method efficiently adds a point by:\n        1. Casting a ray from sensor_origin to the target point\n        2. If the ray hits an obstacle, marking the hit point as occupied\n        3. If no hit, marking the target point as occupied\n        4. Marking free space along the ray from origin to the occupied point\n        \n        Args:\n            point: 3D point [x, y, z] in meters\n            sensor_origin: Sensor origin [x, y, z] in meters\n            update_inner_occupancy: Whether to update inner node occupancy (expensive)\n            \n        Returns:\n            bool: True if point was successfully added\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_163addPointWithRayCasting = {"addPointWithRayCasting", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_163addPointWithRayCasting, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_162addPointWithRayCasting};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_163addPointWithRayCasting(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_point = 0;
  PyObject *__pyx_v_sensor_origin = 0;
  PyObject *__pyx_v_update_inner_occupancy = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPointWithRayCasting (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_point,&__pyx_n_s_sensor_origin,&__pyx_n_s_update_inner_occupancy,0};

    /* "pyoctomap/octomap.pyx":1207
 *                               point,
 *                               sensor_origin,
 *                               update_inner_occupancy=False):             # <<<<<<<<<<<<<<
 *         """
 *         Add a single 3D point to update the occupancy grid using ray casting.
 */
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_point)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1204, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sensor_origin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1204, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("addPointWithRayCasting", 0, 2, 3, 1); __PYX_ERR(1, 1204, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_update_inner_occupancy);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1204, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "addPointWithRayCasting") < 0)) __PYX_ERR(1, 1204, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_point = values[0];
    __pyx_v_sensor_origin = values[1];
    __pyx_v_update_inner_occupancy = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addPointWithRayCasting", 0, 2, 3, __pyx_nargs); __PYX_ERR(1, 1204, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.addPointWithRayCasting", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_162addPointWithRayCasting(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_point, __pyx_v_sensor_origin, __pyx_v_update_inner_occupancy);

  /* "pyoctomap/octomap.pyx":1204
 *             raise NullPointerException
 * 
 *     def addPointWithRayCasting(self,             # <<<<<<<<<<<<<<
 *                               point,
 *                               sensor_origin,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_162addPointWithRayCasting(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_point, PyObject *__pyx_v_sensor_origin, PyObject *__pyx_v_update_inner_occupancy) {
  PyArrayObject *__pyx_v__point64 = 0;
  PyArrayObject *__pyx_v__origin64 = 0;
  bool __pyx_v_success;
  __Pyx_LocalBuf_ND __pyx_pybuffernd__origin64;
  __Pyx_Buffer __pyx_pybuffer__origin64;
  __Pyx_LocalBuf_ND __pyx_pybuffernd__point64;
  __Pyx_Buffer __pyx_pybuffer__point64;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  bool __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPointWithRayCasting", 1);
  __pyx_pybuffer__point64.pybuffer.buf = NULL;
  __pyx_pybuffer__point64.refcount = 0;
  __pyx_pybuffernd__point64.data = NULL;
  __pyx_pybuffernd__point64.rcbuffer = &__pyx_pybuffer__point64;
  __pyx_pybuffer__origin64.pybuffer.buf = NULL;
  __pyx_pybuffer__origin64.refcount = 0;
  __pyx_pybuffernd__origin64.data = NULL;
  __pyx_pybuffernd__origin64.rcbuffer = &__pyx_pybuffer__origin64;

  /* "pyoctomap/octomap.pyx":1225
 *             bool: True if point was successfully added
 *         """
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _point64 = np.ascontiguousarray(point, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _origin64 = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *         cdef cppbool success = self._add_single_point_optimized(_point64, _origin64)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_point);
  __Pyx_GIVEREF(__pyx_v_point);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_point)) __PYX_ERR(1, 1225, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1225, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1225, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd__point64.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v__point64 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd__point64.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1225, __pyx_L1_error)
    } else {__pyx_pybuffernd__point64.diminfo[0].strides = __pyx_pybuffernd__point64.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd__point64.diminfo[0].shape = __pyx_pybuffernd__point64.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v__point64 = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "pyoctomap/octomap.pyx":1226
 *         """
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _point64 = np.ascontiguousarray(point, dtype=np.float64)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _origin64 = np.ascontiguousarray(sensor_origin, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef cppbool success = self._add_single_point_optimized(_point64, _origin64)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_sensor_origin);
  __Pyx_GIVEREF(__pyx_v_sensor_origin);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_sensor_origin)) __PYX_ERR(1, 1226, __pyx_L1_error);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1226, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd__origin64.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v__origin64 = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd__origin64.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(1, 1226, __pyx_L1_error)
    } else {__pyx_pybuffernd__origin64.diminfo[0].strides = __pyx_pybuffernd__origin64.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd__origin64.diminfo[0].shape = __pyx_pybuffernd__origin64.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v__origin64 = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":1227
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _point64 = np.ascontiguousarray(point, dtype=np.float64)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _origin64 = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *         cdef cppbool success = self._add_single_point_optimized(_point64, _origin64)             # <<<<<<<<<<<<<<
 * 
 *         if success and update_inner_occupancy:
 */
  __pyx_t_8 = ((struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *)__pyx_v_self->__pyx_vtab)->_add_single_point_optimized(__pyx_v_self, ((PyArrayObject *)__pyx_v__point64), ((PyArrayObject *)__pyx_v__origin64)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1227, __pyx_L1_error)
  __pyx_v_success = __pyx_t_8;

  /* "pyoctomap/octomap.pyx":1229
 *         cdef cppbool success = self._add_single_point_optimized(_point64, _origin64)
 * 
 *         if success and update_inner_occupancy:             # <<<<<<<<<<<<<<
 *             self.updateInnerOccupancy()
 * 
 */
  __pyx_t_10 = (__pyx_v_success != 0);
  if (__pyx_t_10) {
  } else {
    __pyx_t_9 = __pyx_t_10;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_update_inner_occupancy); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(1, 1229, __pyx_L1_error)
  __pyx_t_9 = __pyx_t_10;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_9) {

    /* "pyoctomap/octomap.pyx":1230
 * 
 *         if success and update_inner_occupancy:
 *             self.updateInnerOccupancy()             # <<<<<<<<<<<<<<
 * 
 *         return success
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateInnerOccupancy); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_11 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_11 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 0+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pyoctomap/octomap.pyx":1229
 *         cdef cppbool success = self._add_single_point_optimized(_point64, _origin64)
 * 
 *         if success and update_inner_occupancy:             # <<<<<<<<<<<<<<
 *             self.updateInnerOccupancy()
 * 
 */
  }

  /* "pyoctomap/octomap.pyx":1232
 *             self.updateInnerOccupancy()
 * 
 *         return success             # <<<<<<<<<<<<<<
 * 
 *     def markFreeSpaceAlongRay(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_success); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1204
 *             raise NullPointerException
 * 
 *     def addPointWithRayCasting(self,             # <<<<<<<<<<<<<<
 *                               point,
 *                               sensor_origin,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__origin64.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__point64.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.addPointWithRayCasting", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__origin64.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd__point64.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v__point64);
  __Pyx_XDECREF((PyObject *)__pyx_v__origin64);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1234
 *         return success
 * 
 *     def markFreeSpaceAlongRay(self,             # <<<<<<<<<<<<<<
 *                              origin,
 *                              end_point,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_165markFreeSpaceAlongRay(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_164markFreeSpaceAlongRay, "\n        Mark free space along a ray from origin to end_point using manual sampling.\n        \n        Args:\n            origin: Ray start point [x, y, z]\n            end_point: Ray end point [x, y, z]\n            step_size: Step size for ray sampling (defaults to tree resolution)\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_165markFreeSpaceAlongRay = {"markFreeSpaceAlongRay", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_165markFreeSpaceAlongRay, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_164markFreeSpaceAlongRay};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_165markFreeSpaceAlongRay(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_origin = 0;
  PyObject *__pyx_v_end_point = 0;
  PyObject *__pyx_v_step_size = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("markFreeSpaceAlongRay (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_origin,&__pyx_n_s_end_point,&__pyx_n_s_step_size,0};

    /* "pyoctomap/octomap.pyx":1237
 *                              origin,
 *                              end_point,
 *                              step_size=None):             # <<<<<<<<<<<<<<
 *         """
 *         Mark free space along a ray from origin to end_point using manual sampling.
 */
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_None));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_origin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1234, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_end_point)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1234, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("markFreeSpaceAlongRay", 0, 2, 3, 1); __PYX_ERR(1, 1234, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_step_size);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1234, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "markFreeSpaceAlongRay") < 0)) __PYX_ERR(1, 1234, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_origin = values[0];
    __pyx_v_end_point = values[1];
    __pyx_v_step_size = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("markFreeSpaceAlongRay", 0, 2, 3, __pyx_nargs); __PYX_ERR(1, 1234, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.markFreeSpaceAlongRay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_164markFreeSpaceAlongRay(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_origin, __pyx_v_end_point, __pyx_v_step_size);

  /* "pyoctomap/octomap.pyx":1234
 *         return success
 * 
 *     def markFreeSpaceAlongRay(self,             # <<<<<<<<<<<<<<
 *                              origin,
 *                              end_point,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_164markFreeSpaceAlongRay(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_origin, PyObject *__pyx_v_end_point, PyObject *__pyx_v_step_size) {
  CYTHON_UNUSED PyObject *__pyx_v_resolution = NULL;
  PyObject *__pyx_v_step = NULL;
  PyObject *__pyx_v_direction = NULL;
  PyObject *__pyx_v_ray_length = NULL;
  PyObject *__pyx_v_num_steps = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_v_sample_point = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("markFreeSpaceAlongRay", 0);
  __Pyx_INCREF(__pyx_v_origin);
  __Pyx_INCREF(__pyx_v_end_point);

  /* "pyoctomap/octomap.pyx":1247
 *         """
 *         # Upcast inputs to float64 for internal computations
 *         origin = np.ascontiguousarray(origin, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         end_point = np.ascontiguousarray(end_point, dtype=np.float64)
 *         if step_size is not None and step_size != self.getResolution():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_origin);
  __Pyx_GIVEREF(__pyx_v_origin);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_origin)) __PYX_ERR(1, 1247, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_origin, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "pyoctomap/octomap.pyx":1248
 *         # Upcast inputs to float64 for internal computations
 *         origin = np.ascontiguousarray(origin, dtype=np.float64)
 *         end_point = np.ascontiguousarray(end_point, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         if step_size is not None and step_size != self.getResolution():
 *             # Use custom step size - fall back to original implementation
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_end_point);
  __Pyx_GIVEREF(__pyx_v_end_point);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_end_point)) __PYX_ERR(1, 1248, __pyx_L1_error);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_end_point, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":1249
 *         origin = np.ascontiguousarray(origin, dtype=np.float64)
 *         end_point = np.ascontiguousarray(end_point, dtype=np.float64)
 *         if step_size is not None and step_size != self.getResolution():             # <<<<<<<<<<<<<<
 *             # Use custom step size - fall back to original implementation
 *             resolution = self.getResolution()
 */
  __pyx_t_7 = (__pyx_v_step_size != Py_None);
  if (__pyx_t_7) {
  } else {
    __pyx_t_6 = __pyx_t_7;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getResolution); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_8 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_8 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_step_size, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_t_7;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_6) {

    /* "pyoctomap/octomap.pyx":1251
 *         if step_size is not None and step_size != self.getResolution():
 *             # Use custom step size - fall back to original implementation
 *             resolution = self.getResolution()             # <<<<<<<<<<<<<<
 *             step = step_size
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getResolution); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1251, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_v_resolution = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":1252
 *             # Use custom step size - fall back to original implementation
 *             resolution = self.getResolution()
 *             step = step_size             # <<<<<<<<<<<<<<
 * 
 *             # Calculate ray direction and length
 */
    __Pyx_INCREF(__pyx_v_step_size);
    __pyx_v_step = __pyx_v_step_size;

    /* "pyoctomap/octomap.pyx":1255
 * 
 *             # Calculate ray direction and length
 *             direction = end_point - origin             # <<<<<<<<<<<<<<
 *             ray_length = np.linalg.norm(direction)
 * 
 */
    __pyx_t_1 = PyNumber_Subtract(__pyx_v_end_point, __pyx_v_origin); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_direction = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":1256
 *             # Calculate ray direction and length
 *             direction = end_point - origin
 *             ray_length = np.linalg.norm(direction)             # <<<<<<<<<<<<<<
 * 
 *             if ray_length == 0:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_linalg); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_norm); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_direction};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1256, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_v_ray_length = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":1258
 *             ray_length = np.linalg.norm(direction)
 * 
 *             if ray_length == 0:             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
    __pyx_t_6 = (__Pyx_PyInt_BoolEqObjC(__pyx_v_ray_length, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1258, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "pyoctomap/octomap.pyx":1259
 * 
 *             if ray_length == 0:
 *                 return             # <<<<<<<<<<<<<<
 * 
 *             direction = direction / ray_length
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "pyoctomap/octomap.pyx":1258
 *             ray_length = np.linalg.norm(direction)
 * 
 *             if ray_length == 0:             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
    }

    /* "pyoctomap/octomap.pyx":1261
 *                 return
 * 
 *             direction = direction / ray_length             # <<<<<<<<<<<<<<
 * 
 *             # Sample points along the ray
 */
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_direction, __pyx_v_ray_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_direction, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":1264
 * 
 *             # Sample points along the ray
 *             num_steps = int(ray_length / step) + 1             # <<<<<<<<<<<<<<
 * 
 *             for i in range(1, num_steps):  # Skip origin (i=0)
 */
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_ray_length, __pyx_v_step); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_num_steps = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":1266
 *             num_steps = int(ray_length / step) + 1
 * 
 *             for i in range(1, num_steps):  # Skip origin (i=0)             # <<<<<<<<<<<<<<
 *                 t = (i * step) / ray_length
 *                 if t >= 1.0:
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_1);
    __Pyx_GIVEREF(__pyx_int_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_int_1)) __PYX_ERR(1, 1266, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_num_steps);
    __Pyx_GIVEREF(__pyx_v_num_steps);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_num_steps)) __PYX_ERR(1, 1266, __pyx_L1_error);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1266, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1266, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 1266, __pyx_L1_error)
            #endif
            if (__pyx_t_9 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(1, 1266, __pyx_L1_error)
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1266, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_MACROS
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 1266, __pyx_L1_error)
            #endif
            if (__pyx_t_9 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(1, 1266, __pyx_L1_error)
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1266, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_10(__pyx_t_1);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 1266, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyoctomap/octomap.pyx":1267
 * 
 *             for i in range(1, num_steps):  # Skip origin (i=0)
 *                 t = (i * step) / ray_length             # <<<<<<<<<<<<<<
 *                 if t >= 1.0:
 *                     break
 */
      __pyx_t_4 = PyNumber_Multiply(__pyx_v_i, __pyx_v_step); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_ray_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "pyoctomap/octomap.pyx":1268
 *             for i in range(1, num_steps):  # Skip origin (i=0)
 *                 t = (i * step) / ray_length
 *                 if t >= 1.0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_t, __pyx_float_1_0, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1268, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1268, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {

        /* "pyoctomap/octomap.pyx":1269
 *                 t = (i * step) / ray_length
 *                 if t >= 1.0:
 *                     break             # <<<<<<<<<<<<<<
 * 
 *                 sample_point = origin + t * direction
 */
        goto __pyx_L8_break;

        /* "pyoctomap/octomap.pyx":1268
 *             for i in range(1, num_steps):  # Skip origin (i=0)
 *                 t = (i * step) / ray_length
 *                 if t >= 1.0:             # <<<<<<<<<<<<<<
 *                     break
 * 
 */
      }

      /* "pyoctomap/octomap.pyx":1271
 *                     break
 * 
 *                 sample_point = origin + t * direction             # <<<<<<<<<<<<<<
 *                 self.updateNode(sample_point, False)  # Mark as free
 *         else:
 */
      __pyx_t_5 = PyNumber_Multiply(__pyx_v_t, __pyx_v_direction); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyNumber_Add(__pyx_v_origin, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1271, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_sample_point, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pyoctomap/octomap.pyx":1272
 * 
 *                 sample_point = origin + t * direction
 *                 self.updateNode(sample_point, False)  # Mark as free             # <<<<<<<<<<<<<<
 *         else:
 *             # Use optimized version with default resolution
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateNode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1272, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_sample_point, Py_False};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1272, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "pyoctomap/octomap.pyx":1266
 *             num_steps = int(ray_length / step) + 1
 * 
 *             for i in range(1, num_steps):  # Skip origin (i=0)             # <<<<<<<<<<<<<<
 *                 t = (i * step) / ray_length
 *                 if t >= 1.0:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L10_for_end;
    __pyx_L8_break:;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L10_for_end;
    __pyx_L10_for_end:;

    /* "pyoctomap/octomap.pyx":1249
 *         origin = np.ascontiguousarray(origin, dtype=np.float64)
 *         end_point = np.ascontiguousarray(end_point, dtype=np.float64)
 *         if step_size is not None and step_size != self.getResolution():             # <<<<<<<<<<<<<<
 *             # Use custom step size - fall back to original implementation
 *             resolution = self.getResolution()
 */
    goto __pyx_L3;
  }

  /* "pyoctomap/octomap.pyx":1275
 *         else:
 *             # Use optimized version with default resolution
 *             self._mark_free_space_optimized(origin, end_point)             # <<<<<<<<<<<<<<
 * 
 *     cdef cppbool _add_single_point_optimized(self, np.ndarray[DOUBLE_t, ndim=1] point,
 */
  /*else*/ {
    if (!(likely(((__pyx_v_origin) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_origin, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1275, __pyx_L1_error)
    if (!(likely(((__pyx_v_end_point) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_end_point, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1275, __pyx_L1_error)
    ((struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *)__pyx_v_self->__pyx_vtab)->_mark_free_space_optimized(__pyx_v_self, ((PyArrayObject *)__pyx_v_origin), ((PyArrayObject *)__pyx_v_end_point)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1275, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "pyoctomap/octomap.pyx":1234
 *         return success
 * 
 *     def markFreeSpaceAlongRay(self,             # <<<<<<<<<<<<<<
 *                              origin,
 *                              end_point,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.markFreeSpaceAlongRay", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_resolution);
  __Pyx_XDECREF(__pyx_v_step);
  __Pyx_XDECREF(__pyx_v_direction);
  __Pyx_XDECREF(__pyx_v_ray_length);
  __Pyx_XDECREF(__pyx_v_num_steps);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_sample_point);
  __Pyx_XDECREF(__pyx_v_origin);
  __Pyx_XDECREF(__pyx_v_end_point);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1277
 *             self._mark_free_space_optimized(origin, end_point)
 * 
 *     cdef cppbool _add_single_point_optimized(self, np.ndarray[DOUBLE_t, ndim=1] point,             # <<<<<<<<<<<<<<
 *                                             np.ndarray[DOUBLE_t, ndim=1] sensor_origin):
 *         """Optimized single point addition with minimal overhead"""
 */

static bool __pyx_f_9pyoctomap_7octomap_6OcTree__add_single_point_optimized(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_point, PyArrayObject *__pyx_v_sensor_origin) {
  PyArrayObject *__pyx_v_direction = 0;
  PyArrayObject *__pyx_v_end_point = 0;
  double __pyx_v_ray_length;
  bool __pyx_v_hit;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_direction;
  __Pyx_Buffer __pyx_pybuffer_direction;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_end_point;
  __Pyx_Buffer __pyx_pybuffer_end_point;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_point;
  __Pyx_Buffer __pyx_pybuffer_point;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sensor_origin;
  __Pyx_Buffer __pyx_pybuffer_sensor_origin;
  bool __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  double __pyx_t_16;
  PyObject *__pyx_t_17 = NULL;
  PyArrayObject *__pyx_t_18 = NULL;
  bool __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_add_single_point_optimized", 1);
  __pyx_pybuffer_direction.pybuffer.buf = NULL;
  __pyx_pybuffer_direction.refcount = 0;
  __pyx_pybuffernd_direction.data = NULL;
  __pyx_pybuffernd_direction.rcbuffer = &__pyx_pybuffer_direction;
  __pyx_pybuffer_end_point.pybuffer.buf = NULL;
  __pyx_pybuffer_end_point.refcount = 0;
  __pyx_pybuffernd_end_point.data = NULL;
  __pyx_pybuffernd_end_point.rcbuffer = &__pyx_pybuffer_end_point;
  __pyx_pybuffer_point.pybuffer.buf = NULL;
  __pyx_pybuffer_point.refcount = 0;
  __pyx_pybuffernd_point.data = NULL;
  __pyx_pybuffernd_point.rcbuffer = &__pyx_pybuffer_point;
  __pyx_pybuffer_sensor_origin.pybuffer.buf = NULL;
  __pyx_pybuffer_sensor_origin.refcount = 0;
  __pyx_pybuffernd_sensor_origin.data = NULL;
  __pyx_pybuffernd_sensor_origin.rcbuffer = &__pyx_pybuffer_sensor_origin;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_point, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1277, __pyx_L1_error)
  }
  __pyx_pybuffernd_point.diminfo[0].strides = __pyx_pybuffernd_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_point.diminfo[0].shape = __pyx_pybuffernd_point.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer, (PyObject*)__pyx_v_sensor_origin, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1277, __pyx_L1_error)
  }
  __pyx_pybuffernd_sensor_origin.diminfo[0].strides = __pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sensor_origin.diminfo[0].shape = __pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":1285
 *         cdef cppbool hit
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             # Check if origin and point are the same
 *             if (point[0] == sensor_origin[0] and
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "pyoctomap/octomap.pyx":1287
 *         try:
 *             # Check if origin and point are the same
 *             if (point[0] == sensor_origin[0] and             # <<<<<<<<<<<<<<
 *                 point[1] == sensor_origin[1] and
 *                 point[2] == sensor_origin[2]):
 */
      __pyx_t_5 = 0;
      __pyx_t_6 = -1;
      if (__pyx_t_5 < 0) {
        __pyx_t_5 += __pyx_pybuffernd_point.diminfo[0].shape;
        if (unlikely(__pyx_t_5 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(1, 1287, __pyx_L3_error)
      }
      __pyx_t_7 = 0;
      __pyx_t_6 = -1;
      if (__pyx_t_7 < 0) {
        __pyx_t_7 += __pyx_pybuffernd_sensor_origin.diminfo[0].shape;
        if (unlikely(__pyx_t_7 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_sensor_origin.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(1, 1287, __pyx_L3_error)
      }
      __pyx_t_8 = ((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_point.diminfo[0].strides)) == (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_sensor_origin.diminfo[0].strides)));
      if (__pyx_t_8) {
      } else {
        __pyx_t_4 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }

      /* "pyoctomap/octomap.pyx":1288
 *             # Check if origin and point are the same
 *             if (point[0] == sensor_origin[0] and
 *                 point[1] == sensor_origin[1] and             # <<<<<<<<<<<<<<
 *                 point[2] == sensor_origin[2]):
 *                 self.updateNode(point, True)
 */
      __pyx_t_7 = 1;
      __pyx_t_6 = -1;
      if (__pyx_t_7 < 0) {
        __pyx_t_7 += __pyx_pybuffernd_point.diminfo[0].shape;
        if (unlikely(__pyx_t_7 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(1, 1288, __pyx_L3_error)
      }
      __pyx_t_5 = 1;
      __pyx_t_6 = -1;
      if (__pyx_t_5 < 0) {
        __pyx_t_5 += __pyx_pybuffernd_sensor_origin.diminfo[0].shape;
        if (unlikely(__pyx_t_5 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_sensor_origin.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(1, 1288, __pyx_L3_error)
      }
      __pyx_t_8 = ((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_point.diminfo[0].strides)) == (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_sensor_origin.diminfo[0].strides)));
      if (__pyx_t_8) {
      } else {
        __pyx_t_4 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }

      /* "pyoctomap/octomap.pyx":1289
 *             if (point[0] == sensor_origin[0] and
 *                 point[1] == sensor_origin[1] and
 *                 point[2] == sensor_origin[2]):             # <<<<<<<<<<<<<<
 *                 self.updateNode(point, True)
 *                 return True
 */
      __pyx_t_5 = 2;
      __pyx_t_6 = -1;
      if (__pyx_t_5 < 0) {
        __pyx_t_5 += __pyx_pybuffernd_point.diminfo[0].shape;
        if (unlikely(__pyx_t_5 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(1, 1289, __pyx_L3_error)
      }
      __pyx_t_7 = 2;
      __pyx_t_6 = -1;
      if (__pyx_t_7 < 0) {
        __pyx_t_7 += __pyx_pybuffernd_sensor_origin.diminfo[0].shape;
        if (unlikely(__pyx_t_7 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_sensor_origin.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(1, 1289, __pyx_L3_error)
      }
      __pyx_t_8 = ((*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_point.diminfo[0].strides)) == (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_sensor_origin.diminfo[0].strides)));
      __pyx_t_4 = __pyx_t_8;
      __pyx_L10_bool_binop_done:;

      /* "pyoctomap/octomap.pyx":1287
 *         try:
 *             # Check if origin and point are the same
 *             if (point[0] == sensor_origin[0] and             # <<<<<<<<<<<<<<
 *                 point[1] == sensor_origin[1] and
 *                 point[2] == sensor_origin[2]):
 */
      if (__pyx_t_4) {

        /* "pyoctomap/octomap.pyx":1290
 *                 point[1] == sensor_origin[1] and
 *                 point[2] == sensor_origin[2]):
 *                 self.updateNode(point, True)             # <<<<<<<<<<<<<<
 *                 return True
 * 
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateNode); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1290, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_11, ((PyObject *)__pyx_v_point), Py_True};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1290, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "pyoctomap/octomap.pyx":1291
 *                 point[2] == sensor_origin[2]):
 *                 self.updateNode(point, True)
 *                 return True             # <<<<<<<<<<<<<<
 * 
 *             # Calculate direction vector
 */
        __pyx_r = 1;
        goto __pyx_L7_try_return;

        /* "pyoctomap/octomap.pyx":1287
 *         try:
 *             # Check if origin and point are the same
 *             if (point[0] == sensor_origin[0] and             # <<<<<<<<<<<<<<
 *                 point[1] == sensor_origin[1] and
 *                 point[2] == sensor_origin[2]):
 */
      }

      /* "pyoctomap/octomap.pyx":1294
 * 
 *             # Calculate direction vector
 *             direction = point - sensor_origin             # <<<<<<<<<<<<<<
 *             ray_length = np.linalg.norm(direction)
 * 
 */
      __pyx_t_9 = PyNumber_Subtract(((PyObject *)__pyx_v_point), ((PyObject *)__pyx_v_sensor_origin)); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1294, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1294, __pyx_L3_error)
      __pyx_t_12 = ((PyArrayObject *)__pyx_t_9);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_direction.rcbuffer->pybuffer);
        __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_direction.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_6 < 0)) {
          PyErr_Fetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_direction.rcbuffer->pybuffer, (PyObject*)__pyx_v_direction, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_15);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
          }
          __pyx_t_13 = __pyx_t_14 = __pyx_t_15 = 0;
        }
        __pyx_pybuffernd_direction.diminfo[0].strides = __pyx_pybuffernd_direction.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_direction.diminfo[0].shape = __pyx_pybuffernd_direction.rcbuffer->pybuffer.shape[0];
        if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1294, __pyx_L3_error)
      }
      __pyx_t_12 = 0;
      __pyx_v_direction = ((PyArrayObject *)__pyx_t_9);
      __pyx_t_9 = 0;

      /* "pyoctomap/octomap.pyx":1295
 *             # Calculate direction vector
 *             direction = point - sensor_origin
 *             ray_length = np.linalg.norm(direction)             # <<<<<<<<<<<<<<
 * 
 *             if ray_length > 0:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1295, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_linalg); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1295, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_norm); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1295, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, ((PyObject *)__pyx_v_direction)};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1295, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1295, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_ray_length = __pyx_t_16;

      /* "pyoctomap/octomap.pyx":1297
 *             ray_length = np.linalg.norm(direction)
 * 
 *             if ray_length > 0:             # <<<<<<<<<<<<<<
 *                 # Normalize direction
 *                 direction = direction / ray_length
 */
      __pyx_t_4 = (__pyx_v_ray_length > 0.0);
      if (__pyx_t_4) {

        /* "pyoctomap/octomap.pyx":1299
 *             if ray_length > 0:
 *                 # Normalize direction
 *                 direction = direction / ray_length             # <<<<<<<<<<<<<<
 * 
 *                 # Use castRay to find the first occupied cell along the ray
 */
        __pyx_t_9 = PyFloat_FromDouble(__pyx_v_ray_length); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1299, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyNumber_Divide(((PyObject *)__pyx_v_direction), __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1299, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1299, __pyx_L3_error)
        __pyx_t_12 = ((PyArrayObject *)__pyx_t_10);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_direction.rcbuffer->pybuffer);
          __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_direction.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_6 < 0)) {
            PyErr_Fetch(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_direction.rcbuffer->pybuffer, (PyObject*)__pyx_v_direction, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_15); Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_13);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_15, __pyx_t_14, __pyx_t_13);
            }
            __pyx_t_15 = __pyx_t_14 = __pyx_t_13 = 0;
          }
          __pyx_pybuffernd_direction.diminfo[0].strides = __pyx_pybuffernd_direction.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_direction.diminfo[0].shape = __pyx_pybuffernd_direction.rcbuffer->pybuffer.shape[0];
          if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1299, __pyx_L3_error)
        }
        __pyx_t_12 = 0;
        __Pyx_DECREF_SET(__pyx_v_direction, ((PyArrayObject *)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "pyoctomap/octomap.pyx":1302
 * 
 *                 # Use castRay to find the first occupied cell along the ray
 *                 end_point = np.zeros(3, dtype=np.float64)             # <<<<<<<<<<<<<<
 *                 hit = self.castRay(sensor_origin, direction, end_point,
 *                                   ignoreUnknownCells=True,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1302, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1302, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1302, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1302, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_float64); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 1302, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_17) < 0) __PYX_ERR(1, 1302, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__7, __pyx_t_10); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 1302, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (!(likely(((__pyx_t_17) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_17, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1302, __pyx_L3_error)
        __pyx_t_18 = ((PyArrayObject *)__pyx_t_17);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer);
          __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_6 < 0)) {
            PyErr_Fetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_end_point, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_15);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            }
            __pyx_t_13 = __pyx_t_14 = __pyx_t_15 = 0;
          }
          __pyx_pybuffernd_end_point.diminfo[0].strides = __pyx_pybuffernd_end_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_end_point.diminfo[0].shape = __pyx_pybuffernd_end_point.rcbuffer->pybuffer.shape[0];
          if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1302, __pyx_L3_error)
        }
        __pyx_t_18 = 0;
        __pyx_v_end_point = ((PyArrayObject *)__pyx_t_17);
        __pyx_t_17 = 0;

        /* "pyoctomap/octomap.pyx":1303
 *                 # Use castRay to find the first occupied cell along the ray
 *                 end_point = np.zeros(3, dtype=np.float64)
 *                 hit = self.castRay(sensor_origin, direction, end_point,             # <<<<<<<<<<<<<<
 *                                   ignoreUnknownCells=True,
 *                                   maxRange=ray_length)
 */
        __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_castRay); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 1303, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1303, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF((PyObject *)__pyx_v_sensor_origin);
        __Pyx_GIVEREF((PyObject *)__pyx_v_sensor_origin);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)__pyx_v_sensor_origin))) __PYX_ERR(1, 1303, __pyx_L3_error);
        __Pyx_INCREF((PyObject *)__pyx_v_direction);
        __Pyx_GIVEREF((PyObject *)__pyx_v_direction);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, ((PyObject *)__pyx_v_direction))) __PYX_ERR(1, 1303, __pyx_L3_error);
        __Pyx_INCREF((PyObject *)__pyx_v_end_point);
        __Pyx_GIVEREF((PyObject *)__pyx_v_end_point);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, ((PyObject *)__pyx_v_end_point))) __PYX_ERR(1, 1303, __pyx_L3_error);

        /* "pyoctomap/octomap.pyx":1304
 *                 end_point = np.zeros(3, dtype=np.float64)
 *                 hit = self.castRay(sensor_origin, direction, end_point,
 *                                   ignoreUnknownCells=True,             # <<<<<<<<<<<<<<
 *                                   maxRange=ray_length)
 * 
 */
        __pyx_t_9 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1304, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_ignoreUnknownCells, Py_True) < 0) __PYX_ERR(1, 1304, __pyx_L3_error)

        /* "pyoctomap/octomap.pyx":1305
 *                 hit = self.castRay(sensor_origin, direction, end_point,
 *                                   ignoreUnknownCells=True,
 *                                   maxRange=ray_length)             # <<<<<<<<<<<<<<
 * 
 *                 if hit:
 */
        __pyx_t_11 = PyFloat_FromDouble(__pyx_v_ray_length); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1305, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_maxRange, __pyx_t_11) < 0) __PYX_ERR(1, 1304, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "pyoctomap/octomap.pyx":1303
 *                 # Use castRay to find the first occupied cell along the ray
 *                 end_point = np.zeros(3, dtype=np.float64)
 *                 hit = self.castRay(sensor_origin, direction, end_point,             # <<<<<<<<<<<<<<
 *                                   ignoreUnknownCells=True,
 *                                   maxRange=ray_length)
 */
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_10, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1303, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_19 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_19 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1303, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_v_hit = __pyx_t_19;

        /* "pyoctomap/octomap.pyx":1307
 *                                   maxRange=ray_length)
 * 
 *                 if hit:             # <<<<<<<<<<<<<<
 *                     # Ray hit an obstacle - mark the hit point as occupied
 *                     self.updateNode(end_point, True)
 */
        __pyx_t_4 = (__pyx_v_hit != 0);
        if (__pyx_t_4) {

          /* "pyoctomap/octomap.pyx":1309
 *                 if hit:
 *                     # Ray hit an obstacle - mark the hit point as occupied
 *                     self.updateNode(end_point, True)             # <<<<<<<<<<<<<<
 *                     # Mark free space from origin to hit point
 *                     self._mark_free_space_optimized(sensor_origin, end_point)
 */
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateNode); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1309, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = NULL;
          __pyx_t_6 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_6 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_10, ((PyObject *)__pyx_v_end_point), Py_True};
            __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1309, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "pyoctomap/octomap.pyx":1311
 *                     self.updateNode(end_point, True)
 *                     # Mark free space from origin to hit point
 *                     self._mark_free_space_optimized(sensor_origin, end_point)             # <<<<<<<<<<<<<<
 *                 else:
 *                     # No hit - mark the target point as occupied
 */
          ((struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *)__pyx_v_self->__pyx_vtab)->_mark_free_space_optimized(__pyx_v_self, ((PyArrayObject *)__pyx_v_sensor_origin), ((PyArrayObject *)__pyx_v_end_point)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1311, __pyx_L3_error)

          /* "pyoctomap/octomap.pyx":1307
 *                                   maxRange=ray_length)
 * 
 *                 if hit:             # <<<<<<<<<<<<<<
 *                     # Ray hit an obstacle - mark the hit point as occupied
 *                     self.updateNode(end_point, True)
 */
          goto __pyx_L14;
        }

        /* "pyoctomap/octomap.pyx":1314
 *                 else:
 *                     # No hit - mark the target point as occupied
 *                     self.updateNode(point, True)             # <<<<<<<<<<<<<<
 *                     # Mark free space from origin to target point
 *                     self._mark_free_space_optimized(sensor_origin, point)
 */
        /*else*/ {
          __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateNode); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1314, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_9);
          __pyx_t_10 = NULL;
          __pyx_t_6 = 0;
          #if CYTHON_UNPACK_METHODS
          if (likely(PyMethod_Check(__pyx_t_9))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_9, function);
              __pyx_t_6 = 1;
            }
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_10, ((PyObject *)__pyx_v_point), Py_True};
            __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1314, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          }
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "pyoctomap/octomap.pyx":1316
 *                     self.updateNode(point, True)
 *                     # Mark free space from origin to target point
 *                     self._mark_free_space_optimized(sensor_origin, point)             # <<<<<<<<<<<<<<
 *             else:
 *                 # Zero-length ray - just mark the point as occupied
 */
          ((struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *)__pyx_v_self->__pyx_vtab)->_mark_free_space_optimized(__pyx_v_self, ((PyArrayObject *)__pyx_v_sensor_origin), ((PyArrayObject *)__pyx_v_point)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1316, __pyx_L3_error)
        }
        __pyx_L14:;

        /* "pyoctomap/octomap.pyx":1297
 *             ray_length = np.linalg.norm(direction)
 * 
 *             if ray_length > 0:             # <<<<<<<<<<<<<<
 *                 # Normalize direction
 *                 direction = direction / ray_length
 */
        goto __pyx_L13;
      }

      /* "pyoctomap/octomap.pyx":1319
 *             else:
 *                 # Zero-length ray - just mark the point as occupied
 *                 self.updateNode(point, True)             # <<<<<<<<<<<<<<
 * 
 *             return True
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateNode); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1319, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        __pyx_t_6 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_6 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_10, ((PyObject *)__pyx_v_point), Py_True};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1319, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __pyx_L13:;

      /* "pyoctomap/octomap.pyx":1321
 *                 self.updateNode(point, True)
 * 
 *             return True             # <<<<<<<<<<<<<<
 * 
 *         except Exception:
 */
      __pyx_r = 1;
      goto __pyx_L7_try_return;

      /* "pyoctomap/octomap.pyx":1285
 *         cdef cppbool hit
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             # Check if origin and point are the same
 *             if (point[0] == sensor_origin[0] and
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "pyoctomap/octomap.pyx":1323
 *             return True
 * 
 *         except Exception:             # <<<<<<<<<<<<<<
 *             return False
 * 
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_6) {
      __Pyx_AddTraceback("pyoctomap.octomap.OcTree._add_single_point_optimized", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(1, 1323, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);

      /* "pyoctomap/octomap.pyx":1324
 * 
 *         except Exception:
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     cdef void _mark_free_space_optimized(self, np.ndarray[DOUBLE_t, ndim=1] origin,
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L6_except_return;
    }
    goto __pyx_L5_except_error;

    /* "pyoctomap/octomap.pyx":1285
 *         cdef cppbool hit
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             # Check if origin and point are the same
 *             if (point[0] == sensor_origin[0] and
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
  }

  /* "pyoctomap/octomap.pyx":1277
 *             self._mark_free_space_optimized(origin, end_point)
 * 
 *     cdef cppbool _add_single_point_optimized(self, np.ndarray[DOUBLE_t, ndim=1] point,             # <<<<<<<<<<<<<<
 *                                             np.ndarray[DOUBLE_t, ndim=1] sensor_origin):
 *         """Optimized single point addition with minimal overhead"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_17);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_direction.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree._add_single_point_optimized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_direction.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_direction);
  __Pyx_XDECREF((PyObject *)__pyx_v_end_point);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1326
 *             return False
 * 
 *     cdef void _mark_free_space_optimized(self, np.ndarray[DOUBLE_t, ndim=1] origin,             # <<<<<<<<<<<<<<
 *                                         np.ndarray[DOUBLE_t, ndim=1] end_point):
 *         """Optimized free space marking with pre-calculated step size"""
 */

static void __pyx_f_9pyoctomap_7octomap_6OcTree__mark_free_space_optimized(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_origin, PyArrayObject *__pyx_v_end_point) {
  double __pyx_v_resolution;
  PyArrayObject *__pyx_v_direction = 0;
  double __pyx_v_ray_length;
  double __pyx_v_step;
  int __pyx_v_max_steps;
  int __pyx_v_num_steps;
  int __pyx_v_i;
  double __pyx_v_t;
  PyArrayObject *__pyx_v_sample_point = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_direction;
  __Pyx_Buffer __pyx_pybuffer_direction;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_end_point;
  __Pyx_Buffer __pyx_pybuffer_end_point;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_origin;
  __Pyx_Buffer __pyx_pybuffer_origin;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sample_point;
  __Pyx_Buffer __pyx_pybuffer_sample_point;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  PyArrayObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  PyArrayObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_mark_free_space_optimized", 1);
  __pyx_pybuffer_direction.pybuffer.buf = NULL;
  __pyx_pybuffer_direction.refcount = 0;
  __pyx_pybuffernd_direction.data = NULL;
  __pyx_pybuffernd_direction.rcbuffer = &__pyx_pybuffer_direction;
  __pyx_pybuffer_sample_point.pybuffer.buf = NULL;
  __pyx_pybuffer_sample_point.refcount = 0;
  __pyx_pybuffernd_sample_point.data = NULL;
  __pyx_pybuffernd_sample_point.rcbuffer = &__pyx_pybuffer_sample_point;
  __pyx_pybuffer_origin.pybuffer.buf = NULL;
  __pyx_pybuffer_origin.refcount = 0;
  __pyx_pybuffernd_origin.data = NULL;
  __pyx_pybuffernd_origin.rcbuffer = &__pyx_pybuffer_origin;
  __pyx_pybuffer_end_point.pybuffer.buf = NULL;
  __pyx_pybuffer_end_point.refcount = 0;
  __pyx_pybuffernd_end_point.data = NULL;
  __pyx_pybuffernd_end_point.rcbuffer = &__pyx_pybuffer_end_point;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_origin.rcbuffer->pybuffer, (PyObject*)__pyx_v_origin, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1326, __pyx_L1_error)
  }
  __pyx_pybuffernd_origin.diminfo[0].strides = __pyx_pybuffernd_origin.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_origin.diminfo[0].shape = __pyx_pybuffernd_origin.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_end_point, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1326, __pyx_L1_error)
  }
  __pyx_pybuffernd_end_point.diminfo[0].strides = __pyx_pybuffernd_end_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_end_point.diminfo[0].shape = __pyx_pybuffernd_end_point.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":1329
 *                                         np.ndarray[DOUBLE_t, ndim=1] end_point):
 *         """Optimized free space marking with pre-calculated step size"""
 *         cdef double resolution = self.getResolution()             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[DOUBLE_t, ndim=1] direction
 *         cdef double ray_length
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getResolution); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_resolution = __pyx_t_5;

  /* "pyoctomap/octomap.pyx":1333
 *         cdef double ray_length
 *         cdef double step
 *         cdef int max_steps = 100000             # <<<<<<<<<<<<<<
 * 
 *         direction = end_point - origin
 */
  __pyx_v_max_steps = 0x186A0;

  /* "pyoctomap/octomap.pyx":1335
 *         cdef int max_steps = 100000
 * 
 *         direction = end_point - origin             # <<<<<<<<<<<<<<
 *         ray_length = np.linalg.norm(direction)
 * 
 */
  __pyx_t_1 = PyNumber_Subtract(((PyObject *)__pyx_v_end_point), ((PyObject *)__pyx_v_origin)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1335, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_direction.rcbuffer->pybuffer);
    __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_direction.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_4 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_direction.rcbuffer->pybuffer, (PyObject*)__pyx_v_direction, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_direction.diminfo[0].strides = __pyx_pybuffernd_direction.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_direction.diminfo[0].shape = __pyx_pybuffernd_direction.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1335, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_direction = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":1336
 * 
 *         direction = end_point - origin
 *         ray_length = np.linalg.norm(direction)             # <<<<<<<<<<<<<<
 * 
 *         if ray_length == 0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_direction)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ray_length = __pyx_t_5;

  /* "pyoctomap/octomap.pyx":1338
 *         ray_length = np.linalg.norm(direction)
 * 
 *         if ray_length == 0:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_10 = (__pyx_v_ray_length == 0.0);
  if (__pyx_t_10) {

    /* "pyoctomap/octomap.pyx":1339
 * 
 *         if ray_length == 0:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         direction = direction / ray_length
 */
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":1338
 *         ray_length = np.linalg.norm(direction)
 * 
 *         if ray_length == 0:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "pyoctomap/octomap.pyx":1341
 *             return
 * 
 *         direction = direction / ray_length             # <<<<<<<<<<<<<<
 * 
 *         # Sample points along the ray
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_ray_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(((PyObject *)__pyx_v_direction), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1341, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_direction.rcbuffer->pybuffer);
    __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_direction.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_4 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_direction.rcbuffer->pybuffer, (PyObject*)__pyx_v_direction, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_7);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      }
      __pyx_t_9 = __pyx_t_8 = __pyx_t_7 = 0;
    }
    __pyx_pybuffernd_direction.diminfo[0].strides = __pyx_pybuffernd_direction.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_direction.diminfo[0].shape = __pyx_pybuffernd_direction.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1341, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_direction, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "pyoctomap/octomap.pyx":1345
 *         # Sample points along the ray
 *         # Adapt step size to avoid extremely large loops for very long rays
 *         step = resolution             # <<<<<<<<<<<<<<
 *         if ray_length / step > max_steps:
 *             step = ray_length / max_steps
 */
  __pyx_v_step = __pyx_v_resolution;

  /* "pyoctomap/octomap.pyx":1346
 *         # Adapt step size to avoid extremely large loops for very long rays
 *         step = resolution
 *         if ray_length / step > max_steps:             # <<<<<<<<<<<<<<
 *             step = ray_length / max_steps
 *         cdef int num_steps = int(ray_length / step) + 1
 */
  if (unlikely(__pyx_v_step == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 1346, __pyx_L1_error)
  }
  __pyx_t_10 = ((__pyx_v_ray_length / __pyx_v_step) > __pyx_v_max_steps);
  if (__pyx_t_10) {

    /* "pyoctomap/octomap.pyx":1347
 *         step = resolution
 *         if ray_length / step > max_steps:
 *             step = ray_length / max_steps             # <<<<<<<<<<<<<<
 *         cdef int num_steps = int(ray_length / step) + 1
 *         cdef int i
 */
    if (unlikely(__pyx_v_max_steps == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(1, 1347, __pyx_L1_error)
    }
    __pyx_v_step = (__pyx_v_ray_length / ((double)__pyx_v_max_steps));

    /* "pyoctomap/octomap.pyx":1346
 *         # Adapt step size to avoid extremely large loops for very long rays
 *         step = resolution
 *         if ray_length / step > max_steps:             # <<<<<<<<<<<<<<
 *             step = ray_length / max_steps
 *         cdef int num_steps = int(ray_length / step) + 1
 */
  }

  /* "pyoctomap/octomap.pyx":1348
 *         if ray_length / step > max_steps:
 *             step = ray_length / max_steps
 *         cdef int num_steps = int(ray_length / step) + 1             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef double t
 */
  if (unlikely(__pyx_v_step == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 1348, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_FromDouble((__pyx_v_ray_length / __pyx_v_step)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_steps = __pyx_t_4;

  /* "pyoctomap/octomap.pyx":1353
 *         cdef np.ndarray[DOUBLE_t, ndim=1] sample_point
 * 
 *         for i in range(1, num_steps):  # Skip origin (i=0)             # <<<<<<<<<<<<<<
 *             t = (i * step) / ray_length
 *             if t >= 1.0:
 */
  __pyx_t_4 = __pyx_v_num_steps;
  __pyx_t_11 = __pyx_t_4;
  for (__pyx_t_12 = 1; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "pyoctomap/octomap.pyx":1354
 * 
 *         for i in range(1, num_steps):  # Skip origin (i=0)
 *             t = (i * step) / ray_length             # <<<<<<<<<<<<<<
 *             if t >= 1.0:
 *                 break
 */
    __pyx_t_5 = (__pyx_v_i * __pyx_v_step);
    if (unlikely(__pyx_v_ray_length == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(1, 1354, __pyx_L1_error)
    }
    __pyx_v_t = (__pyx_t_5 / __pyx_v_ray_length);

    /* "pyoctomap/octomap.pyx":1355
 *         for i in range(1, num_steps):  # Skip origin (i=0)
 *             t = (i * step) / ray_length
 *             if t >= 1.0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    __pyx_t_10 = (__pyx_v_t >= 1.0);
    if (__pyx_t_10) {

      /* "pyoctomap/octomap.pyx":1356
 *             t = (i * step) / ray_length
 *             if t >= 1.0:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             sample_point = origin + t * direction
 */
      goto __pyx_L6_break;

      /* "pyoctomap/octomap.pyx":1355
 *         for i in range(1, num_steps):  # Skip origin (i=0)
 *             t = (i * step) / ray_length
 *             if t >= 1.0:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
    }

    /* "pyoctomap/octomap.pyx":1358
 *                 break
 * 
 *             sample_point = origin + t * direction             # <<<<<<<<<<<<<<
 *             self.updateNode(sample_point, False)  # Mark as free
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, ((PyObject *)__pyx_v_direction)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(((PyObject *)__pyx_v_origin), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1358, __pyx_L1_error)
    __pyx_t_13 = ((PyArrayObject *)__pyx_t_1);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sample_point.rcbuffer->pybuffer);
      __pyx_t_14 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sample_point.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_14 < 0)) {
        PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sample_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_sample_point, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        }
        __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
      }
      __pyx_pybuffernd_sample_point.diminfo[0].strides = __pyx_pybuffernd_sample_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sample_point.diminfo[0].shape = __pyx_pybuffernd_sample_point.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(1, 1358, __pyx_L1_error)
    }
    __pyx_t_13 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sample_point, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":1359
 * 
 *             sample_point = origin + t * direction
 *             self.updateNode(sample_point, False)  # Mark as free             # <<<<<<<<<<<<<<
 * 
 *     def addPointCloudWithRayCasting(self,
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateNode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_14 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_14 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_sample_point), Py_False};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_14, 2+__pyx_t_14);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1359, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L6_break:;

  /* "pyoctomap/octomap.pyx":1326
 *             return False
 * 
 *     cdef void _mark_free_space_optimized(self, np.ndarray[DOUBLE_t, ndim=1] origin,             # <<<<<<<<<<<<<<
 *                                         np.ndarray[DOUBLE_t, ndim=1] end_point):
 *         """Optimized free space marking with pre-calculated step size"""
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_direction.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_origin.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sample_point.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree._mark_free_space_optimized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_direction.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_origin.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sample_point.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_direction);
  __Pyx_XDECREF((PyObject *)__pyx_v_sample_point);
  __Pyx_RefNannyFinishContext();
}

/* "pyoctomap/octomap.pyx":1361
 *             self.updateNode(sample_point, False)  # Mark as free
 * 
 *     def addPointCloudWithRayCasting(self,             # <<<<<<<<<<<<<<
 *                                    point_cloud,
 *                                    sensor_origin,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_167addPointCloudWithRayCasting(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_166addPointCloudWithRayCasting, "\n        Add a full point cloud using ray casting for each point.\n        \n        This method provides more accurate free space marking compared to \n        the standard insertPointCloud method by using ray casting for each point.\n        \n        Args:\n            point_cloud: Nx3 array of points\n            sensor_origin: Sensor origin for the point cloud\n            max_range: Maximum range for points (-1 = no limit)\n            update_inner_occupancy: Whether to update inner node occupancy\n            discretize: If True, discretize to unique keys first to reduce rays (faster for dense clouds)\n        \n        Returns:\n            int: Number of points successfully added\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_167addPointCloudWithRayCasting = {"addPointCloudWithRayCasting", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_167addPointCloudWithRayCasting, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_166addPointCloudWithRayCasting};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_167addPointCloudWithRayCasting(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_point_cloud = 0;
  PyObject *__pyx_v_sensor_origin = 0;
  PyObject *__pyx_v_max_range = 0;
  PyObject *__pyx_v_update_inner_occupancy = 0;
  PyObject *__pyx_v_discretize = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("addPointCloudWithRayCasting (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_point_cloud,&__pyx_n_s_sensor_origin,&__pyx_n_s_max_range,&__pyx_n_s_update_inner_occupancy,&__pyx_n_s_discretize,0};
    values[2] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)__pyx_float_neg_1_0));

    /* "pyoctomap/octomap.pyx":1365
 *                                    sensor_origin,
 *                                    max_range=-1.0,
 *                                    update_inner_occupancy=True,             # <<<<<<<<<<<<<<
 *                                    discretize=False):
 *         """
 */
    values[3] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_True));

    /* "pyoctomap/octomap.pyx":1366
 *                                    max_range=-1.0,
 *                                    update_inner_occupancy=True,
 *                                    discretize=False):             # <<<<<<<<<<<<<<
 *         """
 *         Add a full point cloud using ray casting for each point.
 */
    values[4] = __Pyx_Arg_NewRef_FASTCALL(((PyObject *)Py_False));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_point_cloud)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1361, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sensor_origin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1361, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("addPointCloudWithRayCasting", 0, 2, 5, 1); __PYX_ERR(1, 1361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_range);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_update_inner_occupancy);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1361, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_discretize);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1361, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "addPointCloudWithRayCasting") < 0)) __PYX_ERR(1, 1361, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_point_cloud = values[0];
    __pyx_v_sensor_origin = values[1];
    __pyx_v_max_range = values[2];
    __pyx_v_update_inner_occupancy = values[3];
    __pyx_v_discretize = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("addPointCloudWithRayCasting", 0, 2, 5, __pyx_nargs); __PYX_ERR(1, 1361, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.addPointCloudWithRayCasting", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_166addPointCloudWithRayCasting(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_point_cloud, __pyx_v_sensor_origin, __pyx_v_max_range, __pyx_v_update_inner_occupancy, __pyx_v_discretize);

  /* "pyoctomap/octomap.pyx":1361
 *             self.updateNode(sample_point, False)  # Mark as free
 * 
 *     def addPointCloudWithRayCasting(self,             # <<<<<<<<<<<<<<
 *                                    point_cloud,
 *                                    sensor_origin,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_166addPointCloudWithRayCasting(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_point_cloud, PyObject *__pyx_v_sensor_origin, PyObject *__pyx_v_max_range, PyObject *__pyx_v_update_inner_occupancy, PyObject *__pyx_v_discretize) {
  int __pyx_v_success_count;
  int __pyx_v_num_points;
  PyArrayObject *__pyx_v_filtered_points = 0;
  PyObject *__pyx_v_distances = NULL;
  PyObject *__pyx_v_e = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_filtered_points;
  __Pyx_Buffer __pyx_pybuffer_filtered_points;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyArrayObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_t_16;
  char const *__pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("addPointCloudWithRayCasting", 0);
  __Pyx_INCREF(__pyx_v_point_cloud);
  __Pyx_INCREF(__pyx_v_sensor_origin);
  __pyx_pybuffer_filtered_points.pybuffer.buf = NULL;
  __pyx_pybuffer_filtered_points.refcount = 0;
  __pyx_pybuffernd_filtered_points.data = NULL;
  __pyx_pybuffernd_filtered_points.rcbuffer = &__pyx_pybuffer_filtered_points;

  /* "pyoctomap/octomap.pyx":1383
 *             int: Number of points successfully added
 *         """
 *         cdef int success_count = 0             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef int num_points = point_cloud.shape[0]
 */
  __pyx_v_success_count = 0;

  /* "pyoctomap/octomap.pyx":1385
 *         cdef int success_count = 0
 *         cdef int i
 *         cdef int num_points = point_cloud.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[DOUBLE_t, ndim=1] point
 *         cdef np.ndarray[DOUBLE_t, ndim=2] filtered_points
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_point_cloud, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_points = __pyx_t_3;

  /* "pyoctomap/octomap.pyx":1390
 *         cdef cppbool success
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             # Upcast inputs once
 *             point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "pyoctomap/octomap.pyx":1392
 *         try:
 *             # Upcast inputs once
 *             point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)             # <<<<<<<<<<<<<<
 *             sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *             # Discretize if requested (reduces N for dense clouds)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1392, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1392, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1392, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_point_cloud);
      __Pyx_GIVEREF(__pyx_v_point_cloud);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_point_cloud)) __PYX_ERR(1, 1392, __pyx_L3_error);
      __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1392, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1392, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float64); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1392, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(1, 1392, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1392, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF_SET(__pyx_v_point_cloud, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "pyoctomap/octomap.pyx":1393
 *             # Upcast inputs once
 *             point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)
 *             sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)             # <<<<<<<<<<<<<<
 *             # Discretize if requested (reduces N for dense clouds)
 *             if discretize:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1393, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1393, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1393, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_sensor_origin);
      __Pyx_GIVEREF(__pyx_v_sensor_origin);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_sensor_origin)) __PYX_ERR(1, 1393, __pyx_L3_error);
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1393, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1393, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1393, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(1, 1393, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_9, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1393, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_sensor_origin, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "pyoctomap/octomap.pyx":1395
 *             sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *             # Discretize if requested (reduces N for dense clouds)
 *             if discretize:             # <<<<<<<<<<<<<<
 *                 point_cloud = self._discretizePointCloud(point_cloud)
 *                 num_points = point_cloud.shape[0]
 */
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_discretize); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(1, 1395, __pyx_L3_error)
      if (__pyx_t_10) {

        /* "pyoctomap/octomap.pyx":1396
 *             # Discretize if requested (reduces N for dense clouds)
 *             if discretize:
 *                 point_cloud = self._discretizePointCloud(point_cloud)             # <<<<<<<<<<<<<<
 *                 num_points = point_cloud.shape[0]
 * 
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_discretizePointCloud); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1396, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = NULL;
        __pyx_t_3 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_3 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_v_point_cloud};
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1396, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF_SET(__pyx_v_point_cloud, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "pyoctomap/octomap.pyx":1397
 *             if discretize:
 *                 point_cloud = self._discretizePointCloud(point_cloud)
 *                 num_points = point_cloud.shape[0]             # <<<<<<<<<<<<<<
 * 
 *             if max_range > 0:
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_point_cloud, __pyx_n_s_shape); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1397, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1397, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1397, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_v_num_points = __pyx_t_3;

        /* "pyoctomap/octomap.pyx":1395
 *             sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *             # Discretize if requested (reduces N for dense clouds)
 *             if discretize:             # <<<<<<<<<<<<<<
 *                 point_cloud = self._discretizePointCloud(point_cloud)
 *                 num_points = point_cloud.shape[0]
 */
      }

      /* "pyoctomap/octomap.pyx":1399
 *                 num_points = point_cloud.shape[0]
 * 
 *             if max_range > 0:             # <<<<<<<<<<<<<<
 *                 # Filter points by range first - vectorized approach
 *                 distances = np.linalg.norm(point_cloud - sensor_origin, axis=1)
 */
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_max_range, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1399, __pyx_L3_error)
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(1, 1399, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_10) {

        /* "pyoctomap/octomap.pyx":1401
 *             if max_range > 0:
 *                 # Filter points by range first - vectorized approach
 *                 distances = np.linalg.norm(point_cloud - sensor_origin, axis=1)             # <<<<<<<<<<<<<<
 *                 filtered_points = point_cloud[distances <= max_range]
 *                 success_count = self._process_points_vectorized(filtered_points, sensor_origin, filtered_points.shape[0])
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1401, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1401, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1401, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Subtract(__pyx_v_point_cloud, __pyx_v_sensor_origin); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1401, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1401, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8)) __PYX_ERR(1, 1401, __pyx_L3_error);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1401, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(1, 1401, __pyx_L3_error)
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1401, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_v_distances = __pyx_t_7;
        __pyx_t_7 = 0;

        /* "pyoctomap/octomap.pyx":1402
 *                 # Filter points by range first - vectorized approach
 *                 distances = np.linalg.norm(point_cloud - sensor_origin, axis=1)
 *                 filtered_points = point_cloud[distances <= max_range]             # <<<<<<<<<<<<<<
 *                 success_count = self._process_points_vectorized(filtered_points, sensor_origin, filtered_points.shape[0])
 *             else:
 */
        __pyx_t_7 = PyObject_RichCompare(__pyx_v_distances, __pyx_v_max_range, Py_LE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1402, __pyx_L3_error)
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_point_cloud, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1402, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1402, __pyx_L3_error)
        __pyx_t_11 = ((PyArrayObject *)__pyx_t_8);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_filtered_points.rcbuffer->pybuffer);
          __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_filtered_points.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
          if (unlikely(__pyx_t_3 < 0)) {
            PyErr_Fetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_filtered_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_filtered_points, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
            }
            __pyx_t_12 = __pyx_t_13 = __pyx_t_14 = 0;
          }
          __pyx_pybuffernd_filtered_points.diminfo[0].strides = __pyx_pybuffernd_filtered_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_filtered_points.diminfo[0].shape = __pyx_pybuffernd_filtered_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_filtered_points.diminfo[1].strides = __pyx_pybuffernd_filtered_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_filtered_points.diminfo[1].shape = __pyx_pybuffernd_filtered_points.rcbuffer->pybuffer.shape[1];
          if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1402, __pyx_L3_error)
        }
        __pyx_t_11 = 0;
        __pyx_v_filtered_points = ((PyArrayObject *)__pyx_t_8);
        __pyx_t_8 = 0;

        /* "pyoctomap/octomap.pyx":1403
 *                 distances = np.linalg.norm(point_cloud - sensor_origin, axis=1)
 *                 filtered_points = point_cloud[distances <= max_range]
 *                 success_count = self._process_points_vectorized(filtered_points, sensor_origin, filtered_points.shape[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 # Process all points without range filtering
 */
        if (!(likely(((__pyx_v_sensor_origin) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_sensor_origin, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1403, __pyx_L3_error)
        __pyx_t_3 = ((struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *)__pyx_v_self->__pyx_vtab)->_process_points_vectorized(__pyx_v_self, ((PyArrayObject *)__pyx_v_filtered_points), ((PyArrayObject *)__pyx_v_sensor_origin), (__pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_filtered_points))[0])); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1403, __pyx_L3_error)
        __pyx_v_success_count = __pyx_t_3;

        /* "pyoctomap/octomap.pyx":1399
 *                 num_points = point_cloud.shape[0]
 * 
 *             if max_range > 0:             # <<<<<<<<<<<<<<
 *                 # Filter points by range first - vectorized approach
 *                 distances = np.linalg.norm(point_cloud - sensor_origin, axis=1)
 */
        goto __pyx_L10;
      }

      /* "pyoctomap/octomap.pyx":1406
 *             else:
 *                 # Process all points without range filtering
 *                 success_count = self._process_points_vectorized(point_cloud, sensor_origin, num_points)             # <<<<<<<<<<<<<<
 * 
 *             # Update inner occupancy once for the batch
 */
      /*else*/ {
        if (!(likely(((__pyx_v_point_cloud) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_point_cloud, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1406, __pyx_L3_error)
        if (!(likely(((__pyx_v_sensor_origin) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_sensor_origin, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1406, __pyx_L3_error)
        __pyx_t_3 = ((struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *)__pyx_v_self->__pyx_vtab)->_process_points_vectorized(__pyx_v_self, ((PyArrayObject *)__pyx_v_point_cloud), ((PyArrayObject *)__pyx_v_sensor_origin), __pyx_v_num_points); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1406, __pyx_L3_error)
        __pyx_v_success_count = __pyx_t_3;
      }
      __pyx_L10:;

      /* "pyoctomap/octomap.pyx":1409
 * 
 *             # Update inner occupancy once for the batch
 *             if update_inner_occupancy and success_count > 0:             # <<<<<<<<<<<<<<
 *                 self.updateInnerOccupancy()
 * 
 */
      __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_v_update_inner_occupancy); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(1, 1409, __pyx_L3_error)
      if (__pyx_t_15) {
      } else {
        __pyx_t_10 = __pyx_t_15;
        goto __pyx_L12_bool_binop_done;
      }
      __pyx_t_15 = (__pyx_v_success_count > 0);
      __pyx_t_10 = __pyx_t_15;
      __pyx_L12_bool_binop_done:;
      if (__pyx_t_10) {

        /* "pyoctomap/octomap.pyx":1410
 *             # Update inner occupancy once for the batch
 *             if update_inner_occupancy and success_count > 0:
 *                 self.updateInnerOccupancy()             # <<<<<<<<<<<<<<
 * 
 *             return success_count
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateInnerOccupancy); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1410, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = NULL;
        __pyx_t_3 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_3 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_3, 0+__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1410, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "pyoctomap/octomap.pyx":1409
 * 
 *             # Update inner occupancy once for the batch
 *             if update_inner_occupancy and success_count > 0:             # <<<<<<<<<<<<<<
 *                 self.updateInnerOccupancy()
 * 
 */
      }

      /* "pyoctomap/octomap.pyx":1412
 *                 self.updateInnerOccupancy()
 * 
 *             return success_count             # <<<<<<<<<<<<<<
 * 
 *         except Exception as e:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_success_count); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1412, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_r = __pyx_t_8;
      __pyx_t_8 = 0;
      goto __pyx_L7_try_return;

      /* "pyoctomap/octomap.pyx":1390
 *         cdef cppbool success
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             # Upcast inputs once
 *             point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "pyoctomap/octomap.pyx":1414
 *             return success_count
 * 
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             print(f"Error in point cloud processing: {e}")
 *             return success_count
 */
    __pyx_t_3 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_3) {
      __Pyx_AddTraceback("pyoctomap.octomap.OcTree.addPointCloudWithRayCasting", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_9) < 0) __PYX_ERR(1, 1414, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_7);
      __pyx_v_e = __pyx_t_7;
      /*try:*/ {

        /* "pyoctomap/octomap.pyx":1415
 * 
 *         except Exception as e:
 *             print(f"Error in point cloud processing: {e}")             # <<<<<<<<<<<<<<
 *             return success_count
 * 
 */
        __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_e, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1415, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Error_in_point_cloud_processing, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1415, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1415, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "pyoctomap/octomap.pyx":1416
 *         except Exception as e:
 *             print(f"Error in point cloud processing: {e}")
 *             return success_count             # <<<<<<<<<<<<<<
 * 
 *     cdef int _process_points_vectorized(self, np.ndarray[DOUBLE_t, ndim=2] points,
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_success_count); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1416, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_r = __pyx_t_2;
        __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L18_return;
      }

      /* "pyoctomap/octomap.pyx":1414
 *             return success_count
 * 
 *         except Exception as e:             # <<<<<<<<<<<<<<
 *             print(f"Error in point cloud processing: {e}")
 *             return success_count
 */
      /*finally:*/ {
        __pyx_L19_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_14);
          __Pyx_XGOTREF(__pyx_t_13);
          __Pyx_XGOTREF(__pyx_t_12);
          __Pyx_XGOTREF(__pyx_t_18);
          __Pyx_XGOTREF(__pyx_t_19);
          __Pyx_XGOTREF(__pyx_t_20);
          __pyx_t_3 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_17 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
          }
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_13);
          __Pyx_XGIVEREF(__pyx_t_12);
          __Pyx_ErrRestore(__pyx_t_14, __pyx_t_13, __pyx_t_12);
          __pyx_t_14 = 0; __pyx_t_13 = 0; __pyx_t_12 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
          __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_17;
          goto __pyx_L5_except_error;
        }
        __pyx_L18_return: {
          __pyx_t_20 = __pyx_r;
          __pyx_r = 0;
          __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          __pyx_r = __pyx_t_20;
          __pyx_t_20 = 0;
          goto __pyx_L6_except_return;
        }
      }
    }
    goto __pyx_L5_except_error;

    /* "pyoctomap/octomap.pyx":1390
 *         cdef cppbool success
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             # Upcast inputs once
 *             point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L0;
  }

  /* "pyoctomap/octomap.pyx":1361
 *             self.updateNode(sample_point, False)  # Mark as free
 * 
 *     def addPointCloudWithRayCasting(self,             # <<<<<<<<<<<<<<
 *                                    point_cloud,
 *                                    sensor_origin,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_filtered_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.addPointCloudWithRayCasting", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_filtered_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_filtered_points);
  __Pyx_XDECREF(__pyx_v_distances);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_point_cloud);
  __Pyx_XDECREF(__pyx_v_sensor_origin);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1418
 *             return success_count
 * 
 *     cdef int _process_points_vectorized(self, np.ndarray[DOUBLE_t, ndim=2] points,             # <<<<<<<<<<<<<<
 *                                         np.ndarray[DOUBLE_t, ndim=1] origin,
 *                                         int num_points):
 */

static int __pyx_f_9pyoctomap_7octomap_6OcTree__process_points_vectorized(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_points, PyArrayObject *__pyx_v_origin, int __pyx_v_num_points) {
  int __pyx_v_success_count;
  int __pyx_v_i;
  bool __pyx_v_hit;
  double __pyx_v_ray_length;
  PyArrayObject *__pyx_v_end_point_py = 0;
  PyArrayObject *__pyx_v_directions = 0;
  PyArrayObject *__pyx_v_distances = 0;
  PyArrayObject *__pyx_v_valid_points = 0;
  int __pyx_v_valid_num_points;
  PyObject *__pyx_v_zero_mask = NULL;
  int __pyx_v_j;
  PyObject *__pyx_v_non_zero = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_directions;
  __Pyx_Buffer __pyx_pybuffer_directions;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_distances;
  __Pyx_Buffer __pyx_pybuffer_distances;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_end_point_py;
  __Pyx_Buffer __pyx_pybuffer_end_point_py;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_origin;
  __Pyx_Buffer __pyx_pybuffer_origin;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_points;
  __Pyx_Buffer __pyx_pybuffer_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_valid_points;
  __Pyx_Buffer __pyx_pybuffer_valid_points;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyArrayObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  PyArrayObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  bool __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_process_points_vectorized", 1);
  __pyx_pybuffer_end_point_py.pybuffer.buf = NULL;
  __pyx_pybuffer_end_point_py.refcount = 0;
  __pyx_pybuffernd_end_point_py.data = NULL;
  __pyx_pybuffernd_end_point_py.rcbuffer = &__pyx_pybuffer_end_point_py;
  __pyx_pybuffer_directions.pybuffer.buf = NULL;
  __pyx_pybuffer_directions.refcount = 0;
  __pyx_pybuffernd_directions.data = NULL;
  __pyx_pybuffernd_directions.rcbuffer = &__pyx_pybuffer_directions;
  __pyx_pybuffer_distances.pybuffer.buf = NULL;
  __pyx_pybuffer_distances.refcount = 0;
  __pyx_pybuffernd_distances.data = NULL;
  __pyx_pybuffernd_distances.rcbuffer = &__pyx_pybuffer_distances;
  __pyx_pybuffer_valid_points.pybuffer.buf = NULL;
  __pyx_pybuffer_valid_points.refcount = 0;
  __pyx_pybuffernd_valid_points.data = NULL;
  __pyx_pybuffernd_valid_points.rcbuffer = &__pyx_pybuffer_valid_points;
  __pyx_pybuffer_points.pybuffer.buf = NULL;
  __pyx_pybuffer_points.refcount = 0;
  __pyx_pybuffernd_points.data = NULL;
  __pyx_pybuffernd_points.rcbuffer = &__pyx_pybuffer_points;
  __pyx_pybuffer_origin.pybuffer.buf = NULL;
  __pyx_pybuffer_origin.refcount = 0;
  __pyx_pybuffernd_origin.data = NULL;
  __pyx_pybuffernd_origin.rcbuffer = &__pyx_pybuffer_origin;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_points, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1418, __pyx_L1_error)
  }
  __pyx_pybuffernd_points.diminfo[0].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_points.diminfo[0].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_points.diminfo[1].strides = __pyx_pybuffernd_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_points.diminfo[1].shape = __pyx_pybuffernd_points.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_origin.rcbuffer->pybuffer, (PyObject*)__pyx_v_origin, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1418, __pyx_L1_error)
  }
  __pyx_pybuffernd_origin.diminfo[0].strides = __pyx_pybuffernd_origin.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_origin.diminfo[0].shape = __pyx_pybuffernd_origin.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":1422
 *                                         int num_points):
 *         """Optimized vectorized processing for points with same origin"""
 *         cdef int success_count = 0             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef cppbool hit
 */
  __pyx_v_success_count = 0;

  /* "pyoctomap/octomap.pyx":1434
 *         cdef int valid_num_points
 * 
 *         directions = points - origin  # (N, 3) vectorized subtract             # <<<<<<<<<<<<<<
 *         distances = np.linalg.norm(directions, axis=1)  # O(N) norms
 * 
 */
  __pyx_t_1 = PyNumber_Subtract(((PyObject *)__pyx_v_points), ((PyObject *)__pyx_v_origin)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1434, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_directions.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_directions.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_directions.rcbuffer->pybuffer, (PyObject*)__pyx_v_directions, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_4); Py_XDECREF(__pyx_t_5); Py_XDECREF(__pyx_t_6);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      }
      __pyx_t_4 = __pyx_t_5 = __pyx_t_6 = 0;
    }
    __pyx_pybuffernd_directions.diminfo[0].strides = __pyx_pybuffernd_directions.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_directions.diminfo[0].shape = __pyx_pybuffernd_directions.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_directions.diminfo[1].strides = __pyx_pybuffernd_directions.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_directions.diminfo[1].shape = __pyx_pybuffernd_directions.rcbuffer->pybuffer.shape[1];
    if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1434, __pyx_L1_error)
  }
  __pyx_t_2 = 0;
  __pyx_v_directions = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":1435
 * 
 *         directions = points - origin  # (N, 3) vectorized subtract
 *         distances = np.linalg.norm(directions, axis=1)  # O(N) norms             # <<<<<<<<<<<<<<
 * 
 *         # Handle zero-distance points separately (small loop, rare/edge case)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_linalg); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_norm); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF((PyObject *)__pyx_v_directions);
  __Pyx_GIVEREF((PyObject *)__pyx_v_directions);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_directions))) __PYX_ERR(1, 1435, __pyx_L1_error);
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(1, 1435, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1435, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_9);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_distances.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_distances.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_distances.rcbuffer->pybuffer, (PyObject*)__pyx_v_distances, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_6); Py_XDECREF(__pyx_t_5); Py_XDECREF(__pyx_t_4);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
      }
      __pyx_t_6 = __pyx_t_5 = __pyx_t_4 = 0;
    }
    __pyx_pybuffernd_distances.diminfo[0].strides = __pyx_pybuffernd_distances.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_distances.diminfo[0].shape = __pyx_pybuffernd_distances.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1435, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __pyx_v_distances = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "pyoctomap/octomap.pyx":1438
 * 
 *         # Handle zero-distance points separately (small loop, rare/edge case)
 *         zero_mask = distances == 0.0             # <<<<<<<<<<<<<<
 *         if np.any(zero_mask):
 *             for j in range(num_points):
 */
  __pyx_t_9 = PyObject_RichCompare(((PyObject *)__pyx_v_distances), __pyx_float_0_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1438, __pyx_L1_error)
  __pyx_v_zero_mask = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "pyoctomap/octomap.pyx":1439
 *         # Handle zero-distance points separately (small loop, rare/edge case)
 *         zero_mask = distances == 0.0
 *         if np.any(zero_mask):             # <<<<<<<<<<<<<<
 *             for j in range(num_points):
 *                 if zero_mask[j]:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_any); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = NULL;
  __pyx_t_3 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_3 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_zero_mask};
    __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(1, 1439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (__pyx_t_11) {

    /* "pyoctomap/octomap.pyx":1440
 *         zero_mask = distances == 0.0
 *         if np.any(zero_mask):
 *             for j in range(num_points):             # <<<<<<<<<<<<<<
 *                 if zero_mask[j]:
 *                     self.updateNode(points[j], True)  # Mark occupied
 */
    __pyx_t_3 = __pyx_v_num_points;
    __pyx_t_12 = __pyx_t_3;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_j = __pyx_t_13;

      /* "pyoctomap/octomap.pyx":1441
 *         if np.any(zero_mask):
 *             for j in range(num_points):
 *                 if zero_mask[j]:             # <<<<<<<<<<<<<<
 *                     self.updateNode(points[j], True)  # Mark occupied
 *                     success_count += 1
 */
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_zero_mask, __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1441, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(1, 1441, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_11) {

        /* "pyoctomap/octomap.pyx":1442
 *             for j in range(num_points):
 *                 if zero_mask[j]:
 *                     self.updateNode(points[j], True)  # Mark occupied             # <<<<<<<<<<<<<<
 *                     success_count += 1
 * 
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateNode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1442, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_points), __pyx_v_j, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1442, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_1 = NULL;
        __pyx_t_14 = 0;
        #if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_14 = 1;
          }
        }
        #endif
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_t_8, Py_True};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_14, 2+__pyx_t_14);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1442, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "pyoctomap/octomap.pyx":1443
 *                 if zero_mask[j]:
 *                     self.updateNode(points[j], True)  # Mark occupied
 *                     success_count += 1             # <<<<<<<<<<<<<<
 * 
 *         # Filter non-zero points
 */
        __pyx_v_success_count = (__pyx_v_success_count + 1);

        /* "pyoctomap/octomap.pyx":1441
 *         if np.any(zero_mask):
 *             for j in range(num_points):
 *                 if zero_mask[j]:             # <<<<<<<<<<<<<<
 *                     self.updateNode(points[j], True)  # Mark occupied
 *                     success_count += 1
 */
      }
    }

    /* "pyoctomap/octomap.pyx":1439
 *         # Handle zero-distance points separately (small loop, rare/edge case)
 *         zero_mask = distances == 0.0
 *         if np.any(zero_mask):             # <<<<<<<<<<<<<<
 *             for j in range(num_points):
 *                 if zero_mask[j]:
 */
  }

  /* "pyoctomap/octomap.pyx":1446
 * 
 *         # Filter non-zero points
 *         non_zero = distances > 0.0             # <<<<<<<<<<<<<<
 *         valid_num_points = np.sum(non_zero)
 *         if valid_num_points == 0:
 */
  __pyx_t_9 = PyObject_RichCompare(((PyObject *)__pyx_v_distances), __pyx_float_0_0, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1446, __pyx_L1_error)
  __pyx_v_non_zero = __pyx_t_9;
  __pyx_t_9 = 0;

  /* "pyoctomap/octomap.pyx":1447
 *         # Filter non-zero points
 *         non_zero = distances > 0.0
 *         valid_num_points = np.sum(non_zero)             # <<<<<<<<<<<<<<
 *         if valid_num_points == 0:
 *             return success_count
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_sum); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_3 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_3 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_non_zero};
    __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_valid_num_points = __pyx_t_3;

  /* "pyoctomap/octomap.pyx":1448
 *         non_zero = distances > 0.0
 *         valid_num_points = np.sum(non_zero)
 *         if valid_num_points == 0:             # <<<<<<<<<<<<<<
 *             return success_count
 * 
 */
  __pyx_t_11 = (__pyx_v_valid_num_points == 0);
  if (__pyx_t_11) {

    /* "pyoctomap/octomap.pyx":1449
 *         valid_num_points = np.sum(non_zero)
 *         if valid_num_points == 0:
 *             return success_count             # <<<<<<<<<<<<<<
 * 
 *         valid_points = points[non_zero]
 */
    __pyx_r = __pyx_v_success_count;
    goto __pyx_L0;

    /* "pyoctomap/octomap.pyx":1448
 *         non_zero = distances > 0.0
 *         valid_num_points = np.sum(non_zero)
 *         if valid_num_points == 0:             # <<<<<<<<<<<<<<
 *             return success_count
 * 
 */
  }

  /* "pyoctomap/octomap.pyx":1451
 *             return success_count
 * 
 *         valid_points = points[non_zero]             # <<<<<<<<<<<<<<
 *         directions = directions[non_zero] / distances[non_zero, np.newaxis]  # Normalize
 *         distances = distances[non_zero]  # Filtered distances
 */
  __pyx_t_9 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_points), __pyx_v_non_zero); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1451, __pyx_L1_error)
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_9);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_valid_points.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_valid_points.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_valid_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_valid_points, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_4); Py_XDECREF(__pyx_t_5); Py_XDECREF(__pyx_t_6);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      }
      __pyx_t_4 = __pyx_t_5 = __pyx_t_6 = 0;
    }
    __pyx_pybuffernd_valid_points.diminfo[0].strides = __pyx_pybuffernd_valid_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_valid_points.diminfo[0].shape = __pyx_pybuffernd_valid_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_valid_points.diminfo[1].strides = __pyx_pybuffernd_valid_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_valid_points.diminfo[1].shape = __pyx_pybuffernd_valid_points.rcbuffer->pybuffer.shape[1];
    if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1451, __pyx_L1_error)
  }
  __pyx_t_15 = 0;
  __pyx_v_valid_points = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "pyoctomap/octomap.pyx":1452
 * 
 *         valid_points = points[non_zero]
 *         directions = directions[non_zero] / distances[non_zero, np.newaxis]  # Normalize             # <<<<<<<<<<<<<<
 *         distances = distances[non_zero]  # Filtered distances
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_directions), __pyx_v_non_zero); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_newaxis); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_non_zero);
  __Pyx_GIVEREF(__pyx_v_non_zero);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_non_zero)) __PYX_ERR(1, 1452, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7)) __PYX_ERR(1, 1452, __pyx_L1_error);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_distances), __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1452, __pyx_L1_error)
  __pyx_t_2 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_directions.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_directions.rcbuffer->pybuffer, (PyObject*)__pyx_t_2, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_directions.rcbuffer->pybuffer, (PyObject*)__pyx_v_directions, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_6); Py_XDECREF(__pyx_t_5); Py_XDECREF(__pyx_t_4);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
      }
      __pyx_t_6 = __pyx_t_5 = __pyx_t_4 = 0;
    }
    __pyx_pybuffernd_directions.diminfo[0].strides = __pyx_pybuffernd_directions.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_directions.diminfo[0].shape = __pyx_pybuffernd_directions.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_directions.diminfo[1].strides = __pyx_pybuffernd_directions.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_directions.diminfo[1].shape = __pyx_pybuffernd_directions.rcbuffer->pybuffer.shape[1];
    if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1452, __pyx_L1_error)
  }
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_directions, ((PyArrayObject *)__pyx_t_8));
  __pyx_t_8 = 0;

  /* "pyoctomap/octomap.pyx":1453
 *         valid_points = points[non_zero]
 *         directions = directions[non_zero] / distances[non_zero, np.newaxis]  # Normalize
 *         distances = distances[non_zero]  # Filtered distances             # <<<<<<<<<<<<<<
 * 
 *         # Pre-allocate end_point_py once
 */
  __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_distances), __pyx_v_non_zero); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1453, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_distances.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_distances.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_distances.rcbuffer->pybuffer, (PyObject*)__pyx_v_distances, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_4); Py_XDECREF(__pyx_t_5); Py_XDECREF(__pyx_t_6);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      }
      __pyx_t_4 = __pyx_t_5 = __pyx_t_6 = 0;
    }
    __pyx_pybuffernd_distances.diminfo[0].strides = __pyx_pybuffernd_distances.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_distances.diminfo[0].shape = __pyx_pybuffernd_distances.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1453, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __Pyx_DECREF_SET(__pyx_v_distances, ((PyArrayObject *)__pyx_t_8));
  __pyx_t_8 = 0;

  /* "pyoctomap/octomap.pyx":1456
 * 
 *         # Pre-allocate end_point_py once
 *         end_point_py = np.zeros(3, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *         # Main loop: C-style optimized, auto GIL for method calls
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float64); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(1, 1456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__7, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1456, __pyx_L1_error)
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_end_point_py.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_end_point_py.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_end_point_py.rcbuffer->pybuffer, (PyObject*)__pyx_v_end_point_py, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_6); Py_XDECREF(__pyx_t_5); Py_XDECREF(__pyx_t_4);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
      }
      __pyx_t_6 = __pyx_t_5 = __pyx_t_4 = 0;
    }
    __pyx_pybuffernd_end_point_py.diminfo[0].strides = __pyx_pybuffernd_end_point_py.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_end_point_py.diminfo[0].shape = __pyx_pybuffernd_end_point_py.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1456, __pyx_L1_error)
  }
  __pyx_t_16 = 0;
  __pyx_v_end_point_py = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":1459
 * 
 *         # Main loop: C-style optimized, auto GIL for method calls
 *         for i in range(valid_num_points):             # <<<<<<<<<<<<<<
 *             ray_length = distances[i]  # Pre-computed scalar (fast typed access)
 * 
 */
  __pyx_t_3 = __pyx_v_valid_num_points;
  __pyx_t_12 = __pyx_t_3;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_i = __pyx_t_13;

    /* "pyoctomap/octomap.pyx":1460
 *         # Main loop: C-style optimized, auto GIL for method calls
 *         for i in range(valid_num_points):
 *             ray_length = distances[i]  # Pre-computed scalar (fast typed access)             # <<<<<<<<<<<<<<
 * 
 *             # Cast ray and updates (Cython auto-acquires GIL for these Python-bound calls)
 */
    __pyx_t_17 = __pyx_v_i;
    __pyx_t_14 = -1;
    if (__pyx_t_17 < 0) {
      __pyx_t_17 += __pyx_pybuffernd_distances.diminfo[0].shape;
      if (unlikely(__pyx_t_17 < 0)) __pyx_t_14 = 0;
    } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_distances.diminfo[0].shape)) __pyx_t_14 = 0;
    if (unlikely(__pyx_t_14 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_14);
      __PYX_ERR(1, 1460, __pyx_L1_error)
    }
    __pyx_v_ray_length = (*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_distances.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_distances.diminfo[0].strides));

    /* "pyoctomap/octomap.pyx":1463
 * 
 *             # Cast ray and updates (Cython auto-acquires GIL for these Python-bound calls)
 *             hit = self.castRay(origin, directions[i], end_point_py,             # <<<<<<<<<<<<<<
 *                                ignoreUnknownCells=True, maxRange=ray_length)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_castRay); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_GetItemInt(((PyObject *)__pyx_v_directions), __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF((PyObject *)__pyx_v_origin);
    __Pyx_GIVEREF((PyObject *)__pyx_v_origin);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, ((PyObject *)__pyx_v_origin))) __PYX_ERR(1, 1463, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_8);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8)) __PYX_ERR(1, 1463, __pyx_L1_error);
    __Pyx_INCREF((PyObject *)__pyx_v_end_point_py);
    __Pyx_GIVEREF((PyObject *)__pyx_v_end_point_py);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 2, ((PyObject *)__pyx_v_end_point_py))) __PYX_ERR(1, 1463, __pyx_L1_error);
    __pyx_t_8 = 0;

    /* "pyoctomap/octomap.pyx":1464
 *             # Cast ray and updates (Cython auto-acquires GIL for these Python-bound calls)
 *             hit = self.castRay(origin, directions[i], end_point_py,
 *                                ignoreUnknownCells=True, maxRange=ray_length)             # <<<<<<<<<<<<<<
 * 
 *             if hit:
 */
    __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_ignoreUnknownCells, Py_True) < 0) __PYX_ERR(1, 1464, __pyx_L1_error)
    __pyx_t_9 = PyFloat_FromDouble(__pyx_v_ray_length); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_maxRange, __pyx_t_9) < 0) __PYX_ERR(1, 1464, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "pyoctomap/octomap.pyx":1463
 * 
 *             # Cast ray and updates (Cython auto-acquires GIL for these Python-bound calls)
 *             hit = self.castRay(origin, directions[i], end_point_py,             # <<<<<<<<<<<<<<
 *                                ignoreUnknownCells=True, maxRange=ray_length)
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_18 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 1463, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_hit = __pyx_t_18;

    /* "pyoctomap/octomap.pyx":1466
 *                                ignoreUnknownCells=True, maxRange=ray_length)
 * 
 *             if hit:             # <<<<<<<<<<<<<<
 *                 self.updateNode(end_point_py, True)
 *                 self._mark_free_space_optimized(origin, end_point_py)
 */
    __pyx_t_11 = (__pyx_v_hit != 0);
    if (__pyx_t_11) {

      /* "pyoctomap/octomap.pyx":1467
 * 
 *             if hit:
 *                 self.updateNode(end_point_py, True)             # <<<<<<<<<<<<<<
 *                 self._mark_free_space_optimized(origin, end_point_py)
 *             else:
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateNode); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = NULL;
      __pyx_t_14 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_14 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_7, ((PyObject *)__pyx_v_end_point_py), Py_True};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_14, 2+__pyx_t_14);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1467, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "pyoctomap/octomap.pyx":1468
 *             if hit:
 *                 self.updateNode(end_point_py, True)
 *                 self._mark_free_space_optimized(origin, end_point_py)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.updateNode(valid_points[i], True)
 */
      ((struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *)__pyx_v_self->__pyx_vtab)->_mark_free_space_optimized(__pyx_v_self, ((PyArrayObject *)__pyx_v_origin), ((PyArrayObject *)__pyx_v_end_point_py)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1468, __pyx_L1_error)

      /* "pyoctomap/octomap.pyx":1466
 *                                ignoreUnknownCells=True, maxRange=ray_length)
 * 
 *             if hit:             # <<<<<<<<<<<<<<
 *                 self.updateNode(end_point_py, True)
 *                 self._mark_free_space_optimized(origin, end_point_py)
 */
      goto __pyx_L10;
    }

    /* "pyoctomap/octomap.pyx":1470
 *                 self._mark_free_space_optimized(origin, end_point_py)
 *             else:
 *                 self.updateNode(valid_points[i], True)             # <<<<<<<<<<<<<<
 *                 self._mark_free_space_optimized(origin, valid_points[i])
 * 
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateNode); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_valid_points), __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_1 = NULL;
      __pyx_t_14 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_14 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_t_7, Py_True};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_14, 2+__pyx_t_14);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1470, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "pyoctomap/octomap.pyx":1471
 *             else:
 *                 self.updateNode(valid_points[i], True)
 *                 self._mark_free_space_optimized(origin, valid_points[i])             # <<<<<<<<<<<<<<
 * 
 *             success_count += 1  # Assume success (add checks if needed)
 */
      __pyx_t_9 = __Pyx_GetItemInt(((PyObject *)__pyx_v_valid_points), __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 1471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1471, __pyx_L1_error)
      ((struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *)__pyx_v_self->__pyx_vtab)->_mark_free_space_optimized(__pyx_v_self, ((PyArrayObject *)__pyx_v_origin), ((PyArrayObject *)__pyx_t_9)); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1471, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_L10:;

    /* "pyoctomap/octomap.pyx":1473
 *                 self._mark_free_space_optimized(origin, valid_points[i])
 * 
 *             success_count += 1  # Assume success (add checks if needed)             # <<<<<<<<<<<<<<
 * 
 *         return success_count
 */
    __pyx_v_success_count = (__pyx_v_success_count + 1);
  }

  /* "pyoctomap/octomap.pyx":1475
 *             success_count += 1  # Assume success (add checks if needed)
 * 
 *         return success_count             # <<<<<<<<<<<<<<
 * 
 *     def _discretizePointCloud(self, np.ndarray[DOUBLE_t, ndim=2] point_cloud, bint checked=True):
 */
  __pyx_r = __pyx_v_success_count;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1418
 *             return success_count
 * 
 *     cdef int _process_points_vectorized(self, np.ndarray[DOUBLE_t, ndim=2] points,             # <<<<<<<<<<<<<<
 *                                         np.ndarray[DOUBLE_t, ndim=1] origin,
 *                                         int num_points):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_directions.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_distances.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_end_point_py.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_origin.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_valid_points.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree._process_points_vectorized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_directions.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_distances.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_end_point_py.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_origin.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_valid_points.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_end_point_py);
  __Pyx_XDECREF((PyObject *)__pyx_v_directions);
  __Pyx_XDECREF((PyObject *)__pyx_v_distances);
  __Pyx_XDECREF((PyObject *)__pyx_v_valid_points);
  __Pyx_XDECREF(__pyx_v_zero_mask);
  __Pyx_XDECREF(__pyx_v_non_zero);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1477
 *         return success_count
 * 
 *     def _discretizePointCloud(self, np.ndarray[DOUBLE_t, ndim=2] point_cloud, bint checked=True):             # <<<<<<<<<<<<<<
 *         """
 *         Discretize points to unique octree keys (reduces duplicates for batching).
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_169_discretizePointCloud(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_168_discretizePointCloud, "\n        Discretize points to unique octree keys (reduces duplicates for batching).\n        Internal helper for faster insertion.\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_169_discretizePointCloud = {"_discretizePointCloud", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_169_discretizePointCloud, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_168_discretizePointCloud};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_169_discretizePointCloud(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_point_cloud = 0;
  int __pyx_v_checked;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_discretizePointCloud (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_point_cloud,&__pyx_n_s_checked,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_point_cloud)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1477, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_checked);
          if (value) { values[1] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1477, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_discretizePointCloud") < 0)) __PYX_ERR(1, 1477, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_point_cloud = ((PyArrayObject *)values[0]);
    if (values[1]) {
      __pyx_v_checked = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_checked == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1477, __pyx_L3_error)
    } else {
      __pyx_v_checked = ((int)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_discretizePointCloud", 0, 1, 2, __pyx_nargs); __PYX_ERR(1, 1477, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree._discretizePointCloud", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_point_cloud), __pyx_ptype_5numpy_ndarray, 1, "point_cloud", 0))) __PYX_ERR(1, 1477, __pyx_L1_error)
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_168_discretizePointCloud(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_point_cloud, __pyx_v_checked);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_168_discretizePointCloud(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_point_cloud, int __pyx_v_checked) {
  int __pyx_v_i;
  int __pyx_v_num_points;
  PyArrayObject *__pyx_v_point = 0;
  PyObject *__pyx_v_unique_keys = 0;
  PyObject *__pyx_v_discrete_points = 0;
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *__pyx_v_key = 0;
  PyObject *__pyx_v_key_tuple = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_point;
  __Pyx_Buffer __pyx_pybuffer_point;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_point_cloud;
  __Pyx_Buffer __pyx_pybuffer_point_cloud;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyArrayObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_discretizePointCloud", 1);
  __pyx_pybuffer_point.pybuffer.buf = NULL;
  __pyx_pybuffer_point.refcount = 0;
  __pyx_pybuffernd_point.data = NULL;
  __pyx_pybuffernd_point.rcbuffer = &__pyx_pybuffer_point;
  __pyx_pybuffer_point_cloud.pybuffer.buf = NULL;
  __pyx_pybuffer_point_cloud.refcount = 0;
  __pyx_pybuffernd_point_cloud.data = NULL;
  __pyx_pybuffernd_point_cloud.rcbuffer = &__pyx_pybuffer_point_cloud;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point_cloud.rcbuffer->pybuffer, (PyObject*)__pyx_v_point_cloud, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1477, __pyx_L1_error)
  }
  __pyx_pybuffernd_point_cloud.diminfo[0].strides = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_point_cloud.diminfo[0].shape = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_point_cloud.diminfo[1].strides = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_point_cloud.diminfo[1].shape = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.shape[1];

  /* "pyoctomap/octomap.pyx":1482
 *         Internal helper for faster insertion.
 *         """
 *         cdef int i, num_points = point_cloud.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[DOUBLE_t, ndim=1] point
 *         cdef set unique_keys = set()
 */
  __pyx_v_num_points = (__pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_point_cloud))[0]);

  /* "pyoctomap/octomap.pyx":1484
 *         cdef int i, num_points = point_cloud.shape[0]
 *         cdef np.ndarray[DOUBLE_t, ndim=1] point
 *         cdef set unique_keys = set()             # <<<<<<<<<<<<<<
 *         cdef list discrete_points = []
 *         cdef OcTreeKey key
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_unique_keys = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":1485
 *         cdef np.ndarray[DOUBLE_t, ndim=1] point
 *         cdef set unique_keys = set()
 *         cdef list discrete_points = []             # <<<<<<<<<<<<<<
 *         cdef OcTreeKey key
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_discrete_points = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pyoctomap/octomap.pyx":1488
 *         cdef OcTreeKey key
 * 
 *         for i in range(num_points):             # <<<<<<<<<<<<<<
 *             point = point_cloud[i]
 *             if checked:
 */
  __pyx_t_2 = __pyx_v_num_points;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "pyoctomap/octomap.pyx":1489
 * 
 *         for i in range(num_points):
 *             point = point_cloud[i]             # <<<<<<<<<<<<<<
 *             if checked:
 *                 key = self.coordToKeyChecked(point)[1]  # Returns key if in bounds
 */
    __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_point_cloud), __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1489, __pyx_L1_error)
    __pyx_t_5 = ((PyArrayObject *)__pyx_t_1);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
      __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_6 < 0)) {
        PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_point, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        }
        __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
      }
      __pyx_pybuffernd_point.diminfo[0].strides = __pyx_pybuffernd_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_point.diminfo[0].shape = __pyx_pybuffernd_point.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 1489, __pyx_L1_error)
    }
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_point, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":1490
 *         for i in range(num_points):
 *             point = point_cloud[i]
 *             if checked:             # <<<<<<<<<<<<<<
 *                 key = self.coordToKeyChecked(point)[1]  # Returns key if in bounds
 *                 if key is not None:
 */
    if (__pyx_v_checked) {

      /* "pyoctomap/octomap.pyx":1491
 *             point = point_cloud[i]
 *             if checked:
 *                 key = self.coordToKeyChecked(point)[1]  # Returns key if in bounds             # <<<<<<<<<<<<<<
 *                 if key is not None:
 *                     key_tuple = (key[0], key[1], key[2])
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coordToKeyChecked); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, ((PyObject *)__pyx_v_point)};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1491, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1491, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_9pyoctomap_7octomap_OcTreeKey))))) __PYX_ERR(1, 1491, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_key, ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "pyoctomap/octomap.pyx":1492
 *             if checked:
 *                 key = self.coordToKeyChecked(point)[1]  # Returns key if in bounds
 *                 if key is not None:             # <<<<<<<<<<<<<<
 *                     key_tuple = (key[0], key[1], key[2])
 *                     if key_tuple not in unique_keys:
 */
      __pyx_t_12 = (((PyObject *)__pyx_v_key) != Py_None);
      if (__pyx_t_12) {

        /* "pyoctomap/octomap.pyx":1493
 *                 key = self.coordToKeyChecked(point)[1]  # Returns key if in bounds
 *                 if key is not None:
 *                     key_tuple = (key[0], key[1], key[2])             # <<<<<<<<<<<<<<
 *                     if key_tuple not in unique_keys:
 *                         unique_keys.add(key_tuple)
 */
        __pyx_t_10 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1493, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1493, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1493, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1493, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_10);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_10)) __PYX_ERR(1, 1493, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_1);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_1)) __PYX_ERR(1, 1493, __pyx_L1_error);
        __Pyx_GIVEREF(__pyx_t_11);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_t_11)) __PYX_ERR(1, 1493, __pyx_L1_error);
        __pyx_t_10 = 0;
        __pyx_t_1 = 0;
        __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_key_tuple, ((PyObject*)__pyx_t_13));
        __pyx_t_13 = 0;

        /* "pyoctomap/octomap.pyx":1494
 *                 if key is not None:
 *                     key_tuple = (key[0], key[1], key[2])
 *                     if key_tuple not in unique_keys:             # <<<<<<<<<<<<<<
 *                         unique_keys.add(key_tuple)
 *                         discrete_points.append(point)
 */
        __pyx_t_12 = (__Pyx_PySet_ContainsTF(__pyx_v_key_tuple, __pyx_v_unique_keys, Py_NE)); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(1, 1494, __pyx_L1_error)
        if (__pyx_t_12) {

          /* "pyoctomap/octomap.pyx":1495
 *                     key_tuple = (key[0], key[1], key[2])
 *                     if key_tuple not in unique_keys:
 *                         unique_keys.add(key_tuple)             # <<<<<<<<<<<<<<
 *                         discrete_points.append(point)
 *             else:
 */
          __pyx_t_14 = PySet_Add(__pyx_v_unique_keys, __pyx_v_key_tuple); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 1495, __pyx_L1_error)

          /* "pyoctomap/octomap.pyx":1496
 *                     if key_tuple not in unique_keys:
 *                         unique_keys.add(key_tuple)
 *                         discrete_points.append(point)             # <<<<<<<<<<<<<<
 *             else:
 *                 key = self.coordToKey(point)
 */
          __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_discrete_points, ((PyObject *)__pyx_v_point)); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 1496, __pyx_L1_error)

          /* "pyoctomap/octomap.pyx":1494
 *                 if key is not None:
 *                     key_tuple = (key[0], key[1], key[2])
 *                     if key_tuple not in unique_keys:             # <<<<<<<<<<<<<<
 *                         unique_keys.add(key_tuple)
 *                         discrete_points.append(point)
 */
        }

        /* "pyoctomap/octomap.pyx":1492
 *             if checked:
 *                 key = self.coordToKeyChecked(point)[1]  # Returns key if in bounds
 *                 if key is not None:             # <<<<<<<<<<<<<<
 *                     key_tuple = (key[0], key[1], key[2])
 *                     if key_tuple not in unique_keys:
 */
      }

      /* "pyoctomap/octomap.pyx":1490
 *         for i in range(num_points):
 *             point = point_cloud[i]
 *             if checked:             # <<<<<<<<<<<<<<
 *                 key = self.coordToKeyChecked(point)[1]  # Returns key if in bounds
 *                 if key is not None:
 */
      goto __pyx_L5;
    }

    /* "pyoctomap/octomap.pyx":1498
 *                         discrete_points.append(point)
 *             else:
 *                 key = self.coordToKey(point)             # <<<<<<<<<<<<<<
 *                 key_tuple = (key[0], key[1], key[2])
 *                 if key_tuple not in unique_keys:
 */
    /*else*/ {
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_coordToKey); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1498, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = NULL;
      __pyx_t_6 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_6 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, ((PyObject *)__pyx_v_point)};
        __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1498, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      if (!(likely(((__pyx_t_13) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_13, __pyx_ptype_9pyoctomap_7octomap_OcTreeKey))))) __PYX_ERR(1, 1498, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_key, ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)__pyx_t_13));
      __pyx_t_13 = 0;

      /* "pyoctomap/octomap.pyx":1499
 *             else:
 *                 key = self.coordToKey(point)
 *                 key_tuple = (key[0], key[1], key[2])             # <<<<<<<<<<<<<<
 *                 if key_tuple not in unique_keys:
 *                     unique_keys.add(key_tuple)
 */
      __pyx_t_13 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_11 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = __Pyx_GetItemInt(((PyObject *)__pyx_v_key), 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1499, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_13);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_13)) __PYX_ERR(1, 1499, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_11);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_11)) __PYX_ERR(1, 1499, __pyx_L1_error);
      __Pyx_GIVEREF(__pyx_t_1);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_1)) __PYX_ERR(1, 1499, __pyx_L1_error);
      __pyx_t_13 = 0;
      __pyx_t_11 = 0;
      __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_key_tuple, ((PyObject*)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "pyoctomap/octomap.pyx":1500
 *                 key = self.coordToKey(point)
 *                 key_tuple = (key[0], key[1], key[2])
 *                 if key_tuple not in unique_keys:             # <<<<<<<<<<<<<<
 *                     unique_keys.add(key_tuple)
 *                     discrete_points.append(point)
 */
      __pyx_t_12 = (__Pyx_PySet_ContainsTF(__pyx_v_key_tuple, __pyx_v_unique_keys, Py_NE)); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(1, 1500, __pyx_L1_error)
      if (__pyx_t_12) {

        /* "pyoctomap/octomap.pyx":1501
 *                 key_tuple = (key[0], key[1], key[2])
 *                 if key_tuple not in unique_keys:
 *                     unique_keys.add(key_tuple)             # <<<<<<<<<<<<<<
 *                     discrete_points.append(point)
 * 
 */
        __pyx_t_14 = PySet_Add(__pyx_v_unique_keys, __pyx_v_key_tuple); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 1501, __pyx_L1_error)

        /* "pyoctomap/octomap.pyx":1502
 *                 if key_tuple not in unique_keys:
 *                     unique_keys.add(key_tuple)
 *                     discrete_points.append(point)             # <<<<<<<<<<<<<<
 * 
 *         return np.array(discrete_points, dtype=np.float64)
 */
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_discrete_points, ((PyObject *)__pyx_v_point)); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(1, 1502, __pyx_L1_error)

        /* "pyoctomap/octomap.pyx":1500
 *                 key = self.coordToKey(point)
 *                 key_tuple = (key[0], key[1], key[2])
 *                 if key_tuple not in unique_keys:             # <<<<<<<<<<<<<<
 *                     unique_keys.add(key_tuple)
 *                     discrete_points.append(point)
 */
      }
    }
    __pyx_L5:;
  }

  /* "pyoctomap/octomap.pyx":1504
 *                     discrete_points.append(point)
 * 
 *         return np.array(discrete_points, dtype=np.float64)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _build_pointcloud_and_insert(self, np.ndarray[DOUBLE_t, ndim=2] point_cloud,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_v_discrete_points);
  __Pyx_GIVEREF(__pyx_v_discrete_points);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_discrete_points)) __PYX_ERR(1, 1504, __pyx_L1_error);
  __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_float64); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_15) < 0) __PYX_ERR(1, 1504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_r = __pyx_t_15;
  __pyx_t_15 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1477
 *         return success_count
 * 
 *     def _discretizePointCloud(self, np.ndarray[DOUBLE_t, ndim=2] point_cloud, bint checked=True):             # <<<<<<<<<<<<<<
 *         """
 *         Discretize points to unique octree keys (reduces duplicates for batching).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_15);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point_cloud.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree._discretizePointCloud", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point_cloud.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_point);
  __Pyx_XDECREF(__pyx_v_unique_keys);
  __Pyx_XDECREF(__pyx_v_discrete_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_key_tuple);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1506
 *         return np.array(discrete_points, dtype=np.float64)
 * 
 *     cdef void _build_pointcloud_and_insert(self, np.ndarray[DOUBLE_t, ndim=2] point_cloud,             # <<<<<<<<<<<<<<
 *                                       np.ndarray[DOUBLE_t, ndim=1] sensor_origin,
 *                                       double max_range,
 */

static void __pyx_f_9pyoctomap_7octomap_6OcTree__build_pointcloud_and_insert(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyArrayObject *__pyx_v_point_cloud, PyArrayObject *__pyx_v_sensor_origin, double __pyx_v_max_range, int __pyx_v_discretize, int __pyx_v_lazy_eval) {
  int __pyx_v_i;
  int __pyx_v_num_points;
  PyArrayObject *__pyx_v_point = 0;
  octomap::Pointcloud __pyx_v_pc;
  CYTHON_UNUSED bool __pyx_v_success;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_point;
  __Pyx_Buffer __pyx_pybuffer_point;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_point_cloud;
  __Pyx_Buffer __pyx_pybuffer_point_cloud;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sensor_origin;
  __Pyx_Buffer __pyx_pybuffer_sensor_origin;
  __Pyx_RefNannyDeclarations
  octomap::Pointcloud __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyArrayObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  PyArrayObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  octomap::point3d __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_build_pointcloud_and_insert", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_point_cloud);
  __pyx_pybuffer_point.pybuffer.buf = NULL;
  __pyx_pybuffer_point.refcount = 0;
  __pyx_pybuffernd_point.data = NULL;
  __pyx_pybuffernd_point.rcbuffer = &__pyx_pybuffer_point;
  __pyx_pybuffer_point_cloud.pybuffer.buf = NULL;
  __pyx_pybuffer_point_cloud.refcount = 0;
  __pyx_pybuffernd_point_cloud.data = NULL;
  __pyx_pybuffernd_point_cloud.rcbuffer = &__pyx_pybuffer_point_cloud;
  __pyx_pybuffer_sensor_origin.pybuffer.buf = NULL;
  __pyx_pybuffer_sensor_origin.refcount = 0;
  __pyx_pybuffernd_sensor_origin.data = NULL;
  __pyx_pybuffernd_sensor_origin.rcbuffer = &__pyx_pybuffer_sensor_origin;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point_cloud.rcbuffer->pybuffer, (PyObject*)__pyx_v_point_cloud, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1506, __pyx_L1_error)
  }
  __pyx_pybuffernd_point_cloud.diminfo[0].strides = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_point_cloud.diminfo[0].shape = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_point_cloud.diminfo[1].strides = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_point_cloud.diminfo[1].shape = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer, (PyObject*)__pyx_v_sensor_origin, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(1, 1506, __pyx_L1_error)
  }
  __pyx_pybuffernd_sensor_origin.diminfo[0].strides = __pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sensor_origin.diminfo[0].shape = __pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer.shape[0];

  /* "pyoctomap/octomap.pyx":1512
 *                                       bint lazy_eval):
 *         """Shared internal: Build Pointcloud, optional discretize, insert via C++."""
 *         cdef int i, num_points = point_cloud.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[DOUBLE_t, ndim=1] point
 *         cdef defs.Pointcloud pc = defs.Pointcloud()
 */
  __pyx_v_num_points = (__pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_point_cloud))[0]);

  /* "pyoctomap/octomap.pyx":1514
 *         cdef int i, num_points = point_cloud.shape[0]
 *         cdef np.ndarray[DOUBLE_t, ndim=1] point
 *         cdef defs.Pointcloud pc = defs.Pointcloud()             # <<<<<<<<<<<<<<
 *         cdef cppbool success = True
 * 
 */
  try {
    __pyx_t_1 = octomap::Pointcloud();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1514, __pyx_L1_error)
  }
  __pyx_v_pc = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "pyoctomap/octomap.pyx":1515
 *         cdef np.ndarray[DOUBLE_t, ndim=1] point
 *         cdef defs.Pointcloud pc = defs.Pointcloud()
 *         cdef cppbool success = True             # <<<<<<<<<<<<<<
 * 
 *         # Discretize if requested (reduces N)
 */
  __pyx_v_success = 1;

  /* "pyoctomap/octomap.pyx":1518
 * 
 *         # Discretize if requested (reduces N)
 *         if discretize:             # <<<<<<<<<<<<<<
 *             point_cloud = self._discretizePointCloud(point_cloud)
 *             num_points = point_cloud.shape[0]
 */
  if (__pyx_v_discretize) {

    /* "pyoctomap/octomap.pyx":1519
 *         # Discretize if requested (reduces N)
 *         if discretize:
 *             point_cloud = self._discretizePointCloud(point_cloud)             # <<<<<<<<<<<<<<
 *             num_points = point_cloud.shape[0]
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_discretizePointCloud); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_v_point_cloud)};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1519, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_2);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point_cloud.rcbuffer->pybuffer);
      __pyx_t_5 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point_cloud.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_5 < 0)) {
        PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point_cloud.rcbuffer->pybuffer, (PyObject*)__pyx_v_point_cloud, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        }
        __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
      }
      __pyx_pybuffernd_point_cloud.diminfo[0].strides = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_point_cloud.diminfo[0].shape = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_point_cloud.diminfo[1].strides = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_point_cloud.diminfo[1].shape = __pyx_pybuffernd_point_cloud.rcbuffer->pybuffer.shape[1];
      if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(1, 1519, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_point_cloud, ((PyArrayObject *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "pyoctomap/octomap.pyx":1520
 *         if discretize:
 *             point_cloud = self._discretizePointCloud(point_cloud)
 *             num_points = point_cloud.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         # Build C++ Pointcloud
 */
    __pyx_v_num_points = (__pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_point_cloud))[0]);

    /* "pyoctomap/octomap.pyx":1518
 * 
 *         # Discretize if requested (reduces N)
 *         if discretize:             # <<<<<<<<<<<<<<
 *             point_cloud = self._discretizePointCloud(point_cloud)
 *             num_points = point_cloud.shape[0]
 */
  }

  /* "pyoctomap/octomap.pyx":1523
 * 
 *         # Build C++ Pointcloud
 *         for i in range(num_points):             # <<<<<<<<<<<<<<
 *             point = point_cloud[i]
 *             pc.push_back(<float>point[0], <float>point[1], <float>point[2])
 */
  __pyx_t_5 = __pyx_v_num_points;
  __pyx_t_10 = __pyx_t_5;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "pyoctomap/octomap.pyx":1524
 *         # Build C++ Pointcloud
 *         for i in range(num_points):
 *             point = point_cloud[i]             # <<<<<<<<<<<<<<
 *             pc.push_back(<float>point[0], <float>point[1], <float>point[2])
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_point_cloud), __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1524, __pyx_L1_error)
    __pyx_t_12 = ((PyArrayObject *)__pyx_t_2);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
      __pyx_t_13 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_13 < 0)) {
        PyErr_Fetch(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_point, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_7);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_9, __pyx_t_8, __pyx_t_7);
        }
        __pyx_t_9 = __pyx_t_8 = __pyx_t_7 = 0;
      }
      __pyx_pybuffernd_point.diminfo[0].strides = __pyx_pybuffernd_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_point.diminfo[0].shape = __pyx_pybuffernd_point.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(1, 1524, __pyx_L1_error)
    }
    __pyx_t_12 = 0;
    __Pyx_XDECREF_SET(__pyx_v_point, ((PyArrayObject *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "pyoctomap/octomap.pyx":1525
 *         for i in range(num_points):
 *             point = point_cloud[i]
 *             pc.push_back(<float>point[0], <float>point[1], <float>point[2])             # <<<<<<<<<<<<<<
 * 
 *         # Call native batch
 */
    __pyx_t_14 = 0;
    __pyx_t_13 = -1;
    if (__pyx_t_14 < 0) {
      __pyx_t_14 += __pyx_pybuffernd_point.diminfo[0].shape;
      if (unlikely(__pyx_t_14 < 0)) __pyx_t_13 = 0;
    } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_13 = 0;
    if (unlikely(__pyx_t_13 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_13);
      __PYX_ERR(1, 1525, __pyx_L1_error)
    }
    __pyx_t_15 = 1;
    __pyx_t_13 = -1;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_pybuffernd_point.diminfo[0].shape;
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_13 = 0;
    } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_13 = 0;
    if (unlikely(__pyx_t_13 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_13);
      __PYX_ERR(1, 1525, __pyx_L1_error)
    }
    __pyx_t_16 = 2;
    __pyx_t_13 = -1;
    if (__pyx_t_16 < 0) {
      __pyx_t_16 += __pyx_pybuffernd_point.diminfo[0].shape;
      if (unlikely(__pyx_t_16 < 0)) __pyx_t_13 = 0;
    } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_13 = 0;
    if (unlikely(__pyx_t_13 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_13);
      __PYX_ERR(1, 1525, __pyx_L1_error)
    }
    __pyx_v_pc.push_back(((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_point.diminfo[0].strides))), ((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_point.diminfo[0].strides))), ((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_point.diminfo[0].strides))));
  }

  /* "pyoctomap/octomap.pyx":1529
 *         # Call native batch
 *         self.thisptr.insertPointCloud(pc,
 *                                       defs.point3d(<float>sensor_origin[0],             # <<<<<<<<<<<<<<
 *                                                    <float>sensor_origin[1],
 *                                                    <float>sensor_origin[2]),
 */
  __pyx_t_16 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_sensor_origin.diminfo[0].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_sensor_origin.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(1, 1529, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":1530
 *         self.thisptr.insertPointCloud(pc,
 *                                       defs.point3d(<float>sensor_origin[0],
 *                                                    <float>sensor_origin[1],             # <<<<<<<<<<<<<<
 *                                                    <float>sensor_origin[2]),
 *                                       <double>max_range,
 */
  __pyx_t_15 = 1;
  __pyx_t_5 = -1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_sensor_origin.diminfo[0].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_sensor_origin.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(1, 1530, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":1531
 *                                       defs.point3d(<float>sensor_origin[0],
 *                                                    <float>sensor_origin[1],
 *                                                    <float>sensor_origin[2]),             # <<<<<<<<<<<<<<
 *                                       <double>max_range,
 *                                       <cppbool>lazy_eval,
 */
  __pyx_t_14 = 2;
  __pyx_t_5 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_sensor_origin.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_sensor_origin.diminfo[0].shape)) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(1, 1531, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":1529
 *         # Call native batch
 *         self.thisptr.insertPointCloud(pc,
 *                                       defs.point3d(<float>sensor_origin[0],             # <<<<<<<<<<<<<<
 *                                                    <float>sensor_origin[1],
 *                                                    <float>sensor_origin[2]),
 */
  try {
    __pyx_t_17 = octomap::point3d(((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_sensor_origin.diminfo[0].strides))), ((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_sensor_origin.diminfo[0].strides))), ((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_sensor_origin.diminfo[0].strides))));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1529, __pyx_L1_error)
  }

  /* "pyoctomap/octomap.pyx":1528
 * 
 *         # Call native batch
 *         self.thisptr.insertPointCloud(pc,             # <<<<<<<<<<<<<<
 *                                       defs.point3d(<float>sensor_origin[0],
 *                                                    <float>sensor_origin[1],
 */
  __pyx_v_self->thisptr->insertPointCloud(__pyx_v_pc, __pyx_t_17, ((double)__pyx_v_max_range), ((bool)__pyx_v_lazy_eval), ((bool)__pyx_v_discretize));

  /* "pyoctomap/octomap.pyx":1536
 *                                       <cppbool>discretize)
 * 
 *         if not lazy_eval:             # <<<<<<<<<<<<<<
 *             self.updateInnerOccupancy()
 * 
 */
  __pyx_t_18 = (!__pyx_v_lazy_eval);
  if (__pyx_t_18) {

    /* "pyoctomap/octomap.pyx":1537
 * 
 *         if not lazy_eval:
 *             self.updateInnerOccupancy()             # <<<<<<<<<<<<<<
 * 
 *         # No return; assume success
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateInnerOccupancy); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1537, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "pyoctomap/octomap.pyx":1536
 *                                       <cppbool>discretize)
 * 
 *         if not lazy_eval:             # <<<<<<<<<<<<<<
 *             self.updateInnerOccupancy()
 * 
 */
  }

  /* "pyoctomap/octomap.pyx":1506
 *         return np.array(discrete_points, dtype=np.float64)
 * 
 *     cdef void _build_pointcloud_and_insert(self, np.ndarray[DOUBLE_t, ndim=2] point_cloud,             # <<<<<<<<<<<<<<
 *                                       np.ndarray[DOUBLE_t, ndim=1] sensor_origin,
 *                                       double max_range,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point_cloud.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree._build_pointcloud_and_insert", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point_cloud.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sensor_origin.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_point);
  __Pyx_XDECREF((PyObject *)__pyx_v_point_cloud);
  __Pyx_RefNannyFinishContext();
}

/* "pyoctomap/octomap.pyx":1541
 *         # No return; assume success
 * 
 *     def insertPointCloudFast(self,             # <<<<<<<<<<<<<<
 *                          point_cloud,
 *                          sensor_origin,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_171insertPointCloudFast(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_170insertPointCloudFast, "\n        Fast batch insertion using native C++ (parallelized with OpenMP, batched updates).\n        \n        Marks full rays from origin to endpoints as free, endpoints as occupied.\n        Less accurate than ray-casting (doesn't stop at hits) but much faster.\n        Uses discretization if enabled (groups points to reduce rays ~50% for dense clouds).\n        \n        Args:\n            point_cloud: Nx3 array of points\n            sensor_origin: Sensor origin [x, y, z]\n            max_range: Max range per ray (-1 = unlimited)\n            discretize: If True, discretize points to keys first (faster for dense clouds)\n            lazy_eval: If True, defer updateInnerOccupancy (call manually later)\n        \n        Returns:\n            int: Number of points processed\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_171insertPointCloudFast = {"insertPointCloudFast", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_171insertPointCloudFast, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_170insertPointCloudFast};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_171insertPointCloudFast(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_point_cloud = 0;
  PyObject *__pyx_v_sensor_origin = 0;
  double __pyx_v_max_range;
  int __pyx_v_discretize;
  int __pyx_v_lazy_eval;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insertPointCloudFast (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_point_cloud,&__pyx_n_s_sensor_origin,&__pyx_n_s_max_range,&__pyx_n_s_discretize,&__pyx_n_s_lazy_eval,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_point_cloud)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1541, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sensor_origin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1541, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("insertPointCloudFast", 0, 2, 5, 1); __PYX_ERR(1, 1541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_range);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_discretize);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1541, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lazy_eval);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1541, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "insertPointCloudFast") < 0)) __PYX_ERR(1, 1541, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_point_cloud = values[0];
    __pyx_v_sensor_origin = values[1];
    if (values[2]) {
      __pyx_v_max_range = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_max_range == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1544, __pyx_L3_error)
    } else {
      __pyx_v_max_range = ((double)-1.0);
    }
    if (values[3]) {
      __pyx_v_discretize = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_discretize == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1545, __pyx_L3_error)
    } else {

      /* "pyoctomap/octomap.pyx":1545
 *                          sensor_origin,
 *                          double max_range=-1.0,
 *                          bint discretize=False,             # <<<<<<<<<<<<<<
 *                          bint lazy_eval=False):
 *         """
 */
      __pyx_v_discretize = ((int)0);
    }
    if (values[4]) {
      __pyx_v_lazy_eval = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_lazy_eval == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1546, __pyx_L3_error)
    } else {

      /* "pyoctomap/octomap.pyx":1546
 *                          double max_range=-1.0,
 *                          bint discretize=False,
 *                          bint lazy_eval=False):             # <<<<<<<<<<<<<<
 *         """
 *         Fast batch insertion using native C++ (parallelized with OpenMP, batched updates).
 */
      __pyx_v_lazy_eval = ((int)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insertPointCloudFast", 0, 2, 5, __pyx_nargs); __PYX_ERR(1, 1541, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.insertPointCloudFast", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_170insertPointCloudFast(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_point_cloud, __pyx_v_sensor_origin, __pyx_v_max_range, __pyx_v_discretize, __pyx_v_lazy_eval);

  /* "pyoctomap/octomap.pyx":1541
 *         # No return; assume success
 * 
 *     def insertPointCloudFast(self,             # <<<<<<<<<<<<<<
 *                          point_cloud,
 *                          sensor_origin,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_170insertPointCloudFast(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_point_cloud, PyObject *__pyx_v_sensor_origin, double __pyx_v_max_range, int __pyx_v_discretize, int __pyx_v_lazy_eval) {
  int __pyx_v_num_points;
  bool __pyx_v_success;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("insertPointCloudFast", 0);
  __Pyx_INCREF(__pyx_v_point_cloud);
  __Pyx_INCREF(__pyx_v_sensor_origin);

  /* "pyoctomap/octomap.pyx":1565
 *         """
 *         # Upcast inputs
 *         point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *         cdef int num_points = point_cloud.shape[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_point_cloud);
  __Pyx_GIVEREF(__pyx_v_point_cloud);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_point_cloud)) __PYX_ERR(1, 1565, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_point_cloud, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "pyoctomap/octomap.pyx":1566
 *         # Upcast inputs
 *         point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef int num_points = point_cloud.shape[0]
 *         cdef cppbool success = True
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_sensor_origin);
  __Pyx_GIVEREF(__pyx_v_sensor_origin);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_sensor_origin)) __PYX_ERR(1, 1566, __pyx_L1_error);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 1566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_sensor_origin, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":1567
 *         point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *         cdef int num_points = point_cloud.shape[0]             # <<<<<<<<<<<<<<
 *         cdef cppbool success = True
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_point_cloud, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_points = __pyx_t_6;

  /* "pyoctomap/octomap.pyx":1568
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *         cdef int num_points = point_cloud.shape[0]
 *         cdef cppbool success = True             # <<<<<<<<<<<<<<
 * 
 *         self._build_pointcloud_and_insert(point_cloud, sensor_origin, max_range, discretize, lazy_eval)
 */
  __pyx_v_success = 1;

  /* "pyoctomap/octomap.pyx":1570
 *         cdef cppbool success = True
 * 
 *         self._build_pointcloud_and_insert(point_cloud, sensor_origin, max_range, discretize, lazy_eval)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 * 
 */
  if (!(likely(((__pyx_v_point_cloud) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_point_cloud, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1570, __pyx_L1_error)
  if (!(likely(((__pyx_v_sensor_origin) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_sensor_origin, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1570, __pyx_L1_error)
  ((struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *)__pyx_v_self->__pyx_vtab)->_build_pointcloud_and_insert(__pyx_v_self, ((PyArrayObject *)__pyx_v_point_cloud), ((PyArrayObject *)__pyx_v_sensor_origin), __pyx_v_max_range, __pyx_v_discretize, __pyx_v_lazy_eval); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1570, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1571
 * 
 *         self._build_pointcloud_and_insert(point_cloud, sensor_origin, max_range, discretize, lazy_eval)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 * 
 *         return num_points if success else 0
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":1573
 *         self._mod_version += 1
 * 
 *         return num_points if success else 0             # <<<<<<<<<<<<<<
 * 
 *     def insertPointCloud(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = (__pyx_v_success != 0);
  if (__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_num_points); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_1 = __pyx_int_0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1541
 *         # No return; assume success
 * 
 *     def insertPointCloudFast(self,             # <<<<<<<<<<<<<<
 *                          point_cloud,
 *                          sensor_origin,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.insertPointCloudFast", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_point_cloud);
  __Pyx_XDECREF(__pyx_v_sensor_origin);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1575
 *         return num_points if success else 0
 * 
 *     def insertPointCloud(self,             # <<<<<<<<<<<<<<
 *                      point_cloud,
 *                      sensor_origin,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_173insertPointCloud(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_172insertPointCloud, "\n        Original native C++ batch insertion (full rays, no Python-specific opts beyond params).\n        \n        Equivalent to insertPointCloudFast with wrapper logic shared.\n        \n        Args:\n            point_cloud: Nx3 array of points\n            sensor_origin: Sensor origin [x, y, z]\n            max_range: Max range per ray (-1 = unlimited)\n            lazy_eval: If True, defer updateInnerOccupancy (call manually later)\n            discretize: If True, discretize points to keys first\n        \n        Returns:\n            int: Number of points processed\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_173insertPointCloud = {"insertPointCloud", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_173insertPointCloud, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_172insertPointCloud};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_173insertPointCloud(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_point_cloud = 0;
  PyObject *__pyx_v_sensor_origin = 0;
  double __pyx_v_max_range;
  int __pyx_v_lazy_eval;
  int __pyx_v_discretize;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insertPointCloud (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_point_cloud,&__pyx_n_s_sensor_origin,&__pyx_n_s_max_range,&__pyx_n_s_lazy_eval,&__pyx_n_s_discretize,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_point_cloud)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1575, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sensor_origin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1575, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("insertPointCloud", 0, 2, 5, 1); __PYX_ERR(1, 1575, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_range);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1575, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lazy_eval);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1575, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_discretize);
          if (value) { values[4] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1575, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "insertPointCloud") < 0)) __PYX_ERR(1, 1575, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_point_cloud = values[0];
    __pyx_v_sensor_origin = values[1];
    if (values[2]) {
      __pyx_v_max_range = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_max_range == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1578, __pyx_L3_error)
    } else {
      __pyx_v_max_range = ((double)-1.0);
    }
    if (values[3]) {
      __pyx_v_lazy_eval = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_lazy_eval == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1579, __pyx_L3_error)
    } else {

      /* "pyoctomap/octomap.pyx":1579
 *                      sensor_origin,
 *                      double max_range=-1.0,
 *                      bint lazy_eval=False,             # <<<<<<<<<<<<<<
 *                      bint discretize=False):
 *         """
 */
      __pyx_v_lazy_eval = ((int)0);
    }
    if (values[4]) {
      __pyx_v_discretize = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_discretize == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1580, __pyx_L3_error)
    } else {

      /* "pyoctomap/octomap.pyx":1580
 *                      double max_range=-1.0,
 *                      bint lazy_eval=False,
 *                      bint discretize=False):             # <<<<<<<<<<<<<<
 *         """
 *         Original native C++ batch insertion (full rays, no Python-specific opts beyond params).
 */
      __pyx_v_discretize = ((int)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insertPointCloud", 0, 2, 5, __pyx_nargs); __PYX_ERR(1, 1575, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.insertPointCloud", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_172insertPointCloud(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_point_cloud, __pyx_v_sensor_origin, __pyx_v_max_range, __pyx_v_lazy_eval, __pyx_v_discretize);

  /* "pyoctomap/octomap.pyx":1575
 *         return num_points if success else 0
 * 
 *     def insertPointCloud(self,             # <<<<<<<<<<<<<<
 *                      point_cloud,
 *                      sensor_origin,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_172insertPointCloud(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_point_cloud, PyObject *__pyx_v_sensor_origin, double __pyx_v_max_range, int __pyx_v_lazy_eval, int __pyx_v_discretize) {
  int __pyx_v_num_points;
  bool __pyx_v_success;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("insertPointCloud", 0);
  __Pyx_INCREF(__pyx_v_point_cloud);
  __Pyx_INCREF(__pyx_v_sensor_origin);

  /* "pyoctomap/octomap.pyx":1597
 *         """
 *         # Upcast inputs
 *         point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *         cdef int num_points = point_cloud.shape[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_point_cloud);
  __Pyx_GIVEREF(__pyx_v_point_cloud);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_point_cloud)) __PYX_ERR(1, 1597, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_point_cloud, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "pyoctomap/octomap.pyx":1598
 *         # Upcast inputs
 *         point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef int num_points = point_cloud.shape[0]
 *         cdef cppbool success = True
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_sensor_origin);
  __Pyx_GIVEREF(__pyx_v_sensor_origin);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_sensor_origin)) __PYX_ERR(1, 1598, __pyx_L1_error);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 1598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_sensor_origin, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":1599
 *         point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *         cdef int num_points = point_cloud.shape[0]             # <<<<<<<<<<<<<<
 *         cdef cppbool success = True
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_point_cloud, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_points = __pyx_t_6;

  /* "pyoctomap/octomap.pyx":1600
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *         cdef int num_points = point_cloud.shape[0]
 *         cdef cppbool success = True             # <<<<<<<<<<<<<<
 * 
 *         self._build_pointcloud_and_insert(point_cloud, sensor_origin, max_range, discretize, lazy_eval)
 */
  __pyx_v_success = 1;

  /* "pyoctomap/octomap.pyx":1602
 *         cdef cppbool success = True
 * 
 *         self._build_pointcloud_and_insert(point_cloud, sensor_origin, max_range, discretize, lazy_eval)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 * 
 */
  if (!(likely(((__pyx_v_point_cloud) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_point_cloud, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1602, __pyx_L1_error)
  if (!(likely(((__pyx_v_sensor_origin) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_sensor_origin, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1602, __pyx_L1_error)
  ((struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree *)__pyx_v_self->__pyx_vtab)->_build_pointcloud_and_insert(__pyx_v_self, ((PyArrayObject *)__pyx_v_point_cloud), ((PyArrayObject *)__pyx_v_sensor_origin), __pyx_v_max_range, __pyx_v_discretize, __pyx_v_lazy_eval); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1602, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1603
 * 
 *         self._build_pointcloud_and_insert(point_cloud, sensor_origin, max_range, discretize, lazy_eval)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 * 
 *         return num_points if success else 0
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":1605
 *         self._mod_version += 1
 * 
 *         return num_points if success else 0             # <<<<<<<<<<<<<<
 * 
 *     def insertPointCloudRaysFast(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = (__pyx_v_success != 0);
  if (__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_num_points); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_1 = __pyx_int_0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1575
 *         return num_points if success else 0
 * 
 *     def insertPointCloud(self,             # <<<<<<<<<<<<<<
 *                      point_cloud,
 *                      sensor_origin,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.insertPointCloud", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_point_cloud);
  __Pyx_XDECREF(__pyx_v_sensor_origin);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pyoctomap/octomap.pyx":1607
 *         return num_points if success else 0
 * 
 *     def insertPointCloudRaysFast(self,             # <<<<<<<<<<<<<<
 *                                 point_cloud,
 *                                 sensor_origin,
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_175insertPointCloudRaysFast(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_9pyoctomap_7octomap_6OcTree_174insertPointCloudRaysFast, "\n        Ultra-fast batch using native insertPointCloudRays (parallel rays, no key sets).\n        Inserts full rays without deduplication\342\200\224fastest but may over-update.\n        ");
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_175insertPointCloudRaysFast = {"insertPointCloudRaysFast", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_175insertPointCloudRaysFast, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_174insertPointCloudRaysFast};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_175insertPointCloudRaysFast(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_point_cloud = 0;
  PyObject *__pyx_v_sensor_origin = 0;
  double __pyx_v_max_range;
  int __pyx_v_lazy_eval;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insertPointCloudRaysFast (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_point_cloud,&__pyx_n_s_sensor_origin,&__pyx_n_s_max_range,&__pyx_n_s_lazy_eval,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_point_cloud)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1607, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sensor_origin)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1607, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("insertPointCloudRaysFast", 0, 2, 4, 1); __PYX_ERR(1, 1607, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_range);
          if (value) { values[2] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1607, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_lazy_eval);
          if (value) { values[3] = __Pyx_Arg_NewRef_FASTCALL(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1607, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "insertPointCloudRaysFast") < 0)) __PYX_ERR(1, 1607, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_point_cloud = values[0];
    __pyx_v_sensor_origin = values[1];
    if (values[2]) {
      __pyx_v_max_range = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_max_range == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 1610, __pyx_L3_error)
    } else {
      __pyx_v_max_range = ((double)-1.0);
    }
    if (values[3]) {
      __pyx_v_lazy_eval = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_lazy_eval == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1611, __pyx_L3_error)
    } else {

      /* "pyoctomap/octomap.pyx":1611
 *                                 sensor_origin,
 *                                 double max_range=-1.0,
 *                                 bint lazy_eval=False):             # <<<<<<<<<<<<<<
 *         """
 *         Ultra-fast batch using native insertPointCloudRays (parallel rays, no key sets).
 */
      __pyx_v_lazy_eval = ((int)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insertPointCloudRaysFast", 0, 2, 4, __pyx_nargs); __PYX_ERR(1, 1607, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.insertPointCloudRaysFast", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_174insertPointCloudRaysFast(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v_point_cloud, __pyx_v_sensor_origin, __pyx_v_max_range, __pyx_v_lazy_eval);

  /* "pyoctomap/octomap.pyx":1607
 *         return num_points if success else 0
 * 
 *     def insertPointCloudRaysFast(self,             # <<<<<<<<<<<<<<
 *                                 point_cloud,
 *                                 sensor_origin,
 */

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_174insertPointCloudRaysFast(struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, PyObject *__pyx_v_point_cloud, PyObject *__pyx_v_sensor_origin, double __pyx_v_max_range, int __pyx_v_lazy_eval) {
  octomap::Pointcloud __pyx_v_pc;
  int __pyx_v_i;
  int __pyx_v_num_points;
  PyArrayObject *__pyx_v_point = 0;
  octomap::point3d __pyx_v_origin_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_point;
  __Pyx_Buffer __pyx_pybuffer_point;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  octomap::Pointcloud __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyArrayObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  float __pyx_t_18;
  float __pyx_t_19;
  float __pyx_t_20;
  octomap::point3d __pyx_t_21;
  int __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("insertPointCloudRaysFast", 0);
  __Pyx_INCREF(__pyx_v_point_cloud);
  __Pyx_INCREF(__pyx_v_sensor_origin);
  __pyx_pybuffer_point.pybuffer.buf = NULL;
  __pyx_pybuffer_point.refcount = 0;
  __pyx_pybuffernd_point.data = NULL;
  __pyx_pybuffernd_point.rcbuffer = &__pyx_pybuffer_point;

  /* "pyoctomap/octomap.pyx":1618
 *         cdef defs.Pointcloud pc
 *         # Upcast inputs
 *         point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *         cdef int i, num_points = point_cloud.shape[0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_point_cloud);
  __Pyx_GIVEREF(__pyx_v_point_cloud);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_point_cloud)) __PYX_ERR(1, 1618, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float64); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 1618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_point_cloud, __pyx_t_5);
  __pyx_t_5 = 0;

  /* "pyoctomap/octomap.pyx":1619
 *         # Upcast inputs
 *         point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         cdef int i, num_points = point_cloud.shape[0]
 *         cdef np.ndarray[DOUBLE_t, ndim=1] point
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_sensor_origin);
  __Pyx_GIVEREF(__pyx_v_sensor_origin);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_sensor_origin)) __PYX_ERR(1, 1619, __pyx_L1_error);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float64); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 1619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF_SET(__pyx_v_sensor_origin, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "pyoctomap/octomap.pyx":1620
 *         point_cloud = np.ascontiguousarray(point_cloud, dtype=np.float64)
 *         sensor_origin = np.ascontiguousarray(sensor_origin, dtype=np.float64)
 *         cdef int i, num_points = point_cloud.shape[0]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[DOUBLE_t, ndim=1] point
 *         cdef defs.point3d origin_c  # C++ type declaration
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_point_cloud, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_points = __pyx_t_6;

  /* "pyoctomap/octomap.pyx":1624
 *         cdef defs.point3d origin_c  # C++ type declaration
 * 
 *         pc = defs.Pointcloud()  # C++ constructor             # <<<<<<<<<<<<<<
 * 
 *         for i in range(num_points):
 */
  try {
    __pyx_t_7 = octomap::Pointcloud();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1624, __pyx_L1_error)
  }
  __pyx_v_pc = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_7);

  /* "pyoctomap/octomap.pyx":1626
 *         pc = defs.Pointcloud()  # C++ constructor
 * 
 *         for i in range(num_points):             # <<<<<<<<<<<<<<
 *             point = point_cloud[i]
 *             pc.push_back(<float>point[0], <float>point[1], <float>point[2])
 */
  __pyx_t_6 = __pyx_v_num_points;
  __pyx_t_8 = __pyx_t_6;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "pyoctomap/octomap.pyx":1627
 * 
 *         for i in range(num_points):
 *             point = point_cloud[i]             # <<<<<<<<<<<<<<
 *             pc.push_back(<float>point[0], <float>point[1], <float>point[2])
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_point_cloud, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(1, 1627, __pyx_L1_error)
    __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
      __pyx_t_11 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_11 < 0)) {
        PyErr_Fetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_point, &__Pyx_TypeInfo_nn___pyx_t_9pyoctomap_7octomap_DOUBLE_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
        }
        __pyx_t_12 = __pyx_t_13 = __pyx_t_14 = 0;
      }
      __pyx_pybuffernd_point.diminfo[0].strides = __pyx_pybuffernd_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_point.diminfo[0].shape = __pyx_pybuffernd_point.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(1, 1627, __pyx_L1_error)
    }
    __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_point, ((PyArrayObject *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":1628
 *         for i in range(num_points):
 *             point = point_cloud[i]
 *             pc.push_back(<float>point[0], <float>point[1], <float>point[2])             # <<<<<<<<<<<<<<
 * 
 *         # Create C++ origin without Python conversion
 */
    __pyx_t_15 = 0;
    __pyx_t_11 = -1;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_pybuffernd_point.diminfo[0].shape;
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(1, 1628, __pyx_L1_error)
    }
    __pyx_t_16 = 1;
    __pyx_t_11 = -1;
    if (__pyx_t_16 < 0) {
      __pyx_t_16 += __pyx_pybuffernd_point.diminfo[0].shape;
      if (unlikely(__pyx_t_16 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(1, 1628, __pyx_L1_error)
    }
    __pyx_t_17 = 2;
    __pyx_t_11 = -1;
    if (__pyx_t_17 < 0) {
      __pyx_t_17 += __pyx_pybuffernd_point.diminfo[0].shape;
      if (unlikely(__pyx_t_17 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_point.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(1, 1628, __pyx_L1_error)
    }
    __pyx_v_pc.push_back(((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_point.diminfo[0].strides))), ((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_point.diminfo[0].strides))), ((float)(*__Pyx_BufPtrStrided1d(__pyx_t_9pyoctomap_7octomap_DOUBLE_t *, __pyx_pybuffernd_point.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_point.diminfo[0].strides))));
  }

  /* "pyoctomap/octomap.pyx":1631
 * 
 *         # Create C++ origin without Python conversion
 *         origin_c = defs.point3d(<float>sensor_origin[0], <float>sensor_origin[1], <float>sensor_origin[2])             # <<<<<<<<<<<<<<
 * 
 *         self.thisptr.insertPointCloudRays(pc, origin_c, <double>max_range, <cppbool>lazy_eval)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_sensor_origin, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_18 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_18 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_sensor_origin, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_19 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_19 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_sensor_origin, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_20 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1631, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_21 = octomap::point3d(((float)__pyx_t_18), ((float)__pyx_t_19), ((float)__pyx_t_20));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 1631, __pyx_L1_error)
  }
  __pyx_v_origin_c = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_21);

  /* "pyoctomap/octomap.pyx":1633
 *         origin_c = defs.point3d(<float>sensor_origin[0], <float>sensor_origin[1], <float>sensor_origin[2])
 * 
 *         self.thisptr.insertPointCloudRays(pc, origin_c, <double>max_range, <cppbool>lazy_eval)             # <<<<<<<<<<<<<<
 *         self._mod_version += 1
 * 
 */
  __pyx_v_self->thisptr->insertPointCloudRays(__pyx_v_pc, __pyx_v_origin_c, ((double)__pyx_v_max_range), ((bool)__pyx_v_lazy_eval));

  /* "pyoctomap/octomap.pyx":1634
 * 
 *         self.thisptr.insertPointCloudRays(pc, origin_c, <double>max_range, <cppbool>lazy_eval)
 *         self._mod_version += 1             # <<<<<<<<<<<<<<
 * 
 *         if not lazy_eval:
 */
  __pyx_v_self->_mod_version = (__pyx_v_self->_mod_version + 1);

  /* "pyoctomap/octomap.pyx":1636
 *         self._mod_version += 1
 * 
 *         if not lazy_eval:             # <<<<<<<<<<<<<<
 *             self.updateInnerOccupancy()
 * 
 */
  __pyx_t_22 = (!__pyx_v_lazy_eval);
  if (__pyx_t_22) {

    /* "pyoctomap/octomap.pyx":1637
 * 
 *         if not lazy_eval:
 *             self.updateInnerOccupancy()             # <<<<<<<<<<<<<<
 * 
 *         return num_points
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_updateInnerOccupancy); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1637, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pyoctomap/octomap.pyx":1636
 *         self._mod_version += 1
 * 
 *         if not lazy_eval:             # <<<<<<<<<<<<<<
 *             self.updateInnerOccupancy()
 * 
 */
  }

  /* "pyoctomap/octomap.pyx":1639
 *             self.updateInnerOccupancy()
 * 
 *         return num_points             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_num_points); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pyoctomap/octomap.pyx":1607
 *         return num_points if success else 0
 * 
 *     def insertPointCloudRaysFast(self,             # <<<<<<<<<<<<<<
 *                                 point_cloud,
 *                                 sensor_origin,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.insertPointCloudRaysFast", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_point.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_point);
  __Pyx_XDECREF(__pyx_v_point_cloud);
  __Pyx_XDECREF(__pyx_v_sensor_origin);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_177__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_177__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_177__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_177__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_176__reduce_cython__(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_176__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_179__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_9pyoctomap_7octomap_6OcTree_179__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_179__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_9pyoctomap_7octomap_6OcTree_179__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(0, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_9pyoctomap_7octomap_6OcTree_178__setstate_cython__(((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_9pyoctomap_7octomap_6OcTree_178__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_9pyoctomap_7octomap_OcTree *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyoctomap.octomap.OcTree.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_9pyoctomap_7octomap_OcTreeKey(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)o);
  new((void*)&(p->thisptr)) struct octomap::OcTreeKey();
  if (unlikely(__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9pyoctomap_7octomap_OcTreeKey(PyObject *o) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *p = (struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9pyoctomap_7octomap_OcTreeKey) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  __Pyx_call_destructor(p->thisptr);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
static PyObject *__pyx_sq_item_9pyoctomap_7octomap_OcTreeKey(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_9pyoctomap_7octomap_OcTreeKey(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_9pyoctomap_7octomap_9OcTreeKey_7__setitem__(o, i, v);
  }
  else {
    __Pyx_TypeName o_type_name;
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
}

static PyObject *__pyx_specialmethod___pyx_pw_9pyoctomap_7octomap_9OcTreeKey_9__repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_pw_9pyoctomap_7octomap_9OcTreeKey_9__repr__(self);
}

static PyMethodDef __pyx_methods_9pyoctomap_7octomap_OcTreeKey[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_pw_9pyoctomap_7octomap_9OcTreeKey_9__repr__, METH_NOARGS|METH_COEXIST, 0},
  {"computeChildIdx", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_11computeChildIdx, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"computeIndexKey", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_13computeIndexKey, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_15__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_17__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9pyoctomap_7octomap_OcTreeKey_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9pyoctomap_7octomap_OcTreeKey},
  {Py_tp_repr, (void *)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_9__repr__},
  {Py_sq_item, (void *)__pyx_sq_item_9pyoctomap_7octomap_OcTreeKey},
  {Py_mp_subscript, (void *)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_5__getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_9pyoctomap_7octomap_OcTreeKey},
  {Py_tp_doc, (void *)PyDoc_STR("\n    OcTreeKey is a container class for internal key addressing.\n    The keys count the number of cells (voxels) from the origin as discrete address of a voxel.\n    ")},
  {Py_tp_richcompare, (void *)__pyx_pw_9pyoctomap_7octomap_9OcTreeKey_3__richcmp__},
  {Py_tp_methods, (void *)__pyx_methods_9pyoctomap_7octomap_OcTreeKey},
  {Py_tp_new, (void *)__pyx_tp_new_9pyoctomap_7octomap_OcTreeKey},
  {0, 0},
};
static PyType_Spec __pyx_type_9pyoctomap_7octomap_OcTreeKey_spec = {
  "pyoctomap.octomap.OcTreeKey",
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9pyoctomap_7octomap_OcTreeKey_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_OcTreeKey = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_9pyoctomap_7octomap_OcTreeKey, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_OcTreeKey = {
  0, /*mp_length*/
  __pyx_pw_9pyoctomap_7octomap_9OcTreeKey_5__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_9pyoctomap_7octomap_OcTreeKey, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_9pyoctomap_7octomap_OcTreeKey = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyoctomap.octomap.""OcTreeKey", /*tp_name*/
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_OcTreeKey), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pyoctomap_7octomap_OcTreeKey, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_9pyoctomap_7octomap_9OcTreeKey_9__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_OcTreeKey, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_OcTreeKey, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    OcTreeKey is a container class for internal key addressing.\n    The keys count the number of cells (voxels) from the origin as discrete address of a voxel.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_9pyoctomap_7octomap_9OcTreeKey_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9pyoctomap_7octomap_OcTreeKey, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pyoctomap_7octomap_OcTreeKey, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9pyoctomap_7octomap_OcTreeNode(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9pyoctomap_7octomap_OcTreeNode(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9pyoctomap_7octomap_OcTreeNode) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9pyoctomap_7octomap_10OcTreeNode_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9pyoctomap_7octomap_OcTreeNode[] = {
  {"addValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_5addValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_10OcTreeNode_4addValue},
  {"childExists", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_7childExists, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_10OcTreeNode_6childExists},
  {"getValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_9getValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"setValue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_11setValue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getOccupancy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_13getOccupancy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getLogOdds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_15getLogOdds, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"setLogOdds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_17setLogOdds, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"hasChildren", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_19hasChildren, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_10OcTreeNode_18hasChildren},
  {"getMaxChildLogOdds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_21getMaxChildLogOdds, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"updateOccupancyChildren", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_23updateOccupancyChildren, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_25__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_10OcTreeNode_27__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9pyoctomap_7octomap_OcTreeNode_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9pyoctomap_7octomap_OcTreeNode},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Nodes to be used in OcTree.\n    They represent 3d occupancy grid cells. \"value\" stores their log-odds occupancy.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_9pyoctomap_7octomap_OcTreeNode},
  {Py_tp_new, (void *)__pyx_tp_new_9pyoctomap_7octomap_OcTreeNode},
  {0, 0},
};
static PyType_Spec __pyx_type_9pyoctomap_7octomap_OcTreeNode_spec = {
  "pyoctomap.octomap.OcTreeNode",
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9pyoctomap_7octomap_OcTreeNode_slots,
};
#else

static PyTypeObject __pyx_type_9pyoctomap_7octomap_OcTreeNode = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyoctomap.octomap.""OcTreeNode", /*tp_name*/
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_OcTreeNode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pyoctomap_7octomap_OcTreeNode, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    Nodes to be used in OcTree.\n    They represent 3d occupancy grid cells. \"value\" stores their log-odds occupancy.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9pyoctomap_7octomap_OcTreeNode, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pyoctomap_7octomap_OcTreeNode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9pyoctomap_7octomap_SimpleTreeIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)o);
  p->_tree = Py_None; Py_INCREF(Py_None);
  p->_current_node = Py_None; Py_INCREF(Py_None);
  p->_current_coord = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9pyoctomap_7octomap_SimpleTreeIterator(PyObject *o) {
  struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *p = (struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9pyoctomap_7octomap_SimpleTreeIterator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_tree);
  Py_CLEAR(p->_current_node);
  Py_CLEAR(p->_current_coord);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_9pyoctomap_7octomap_SimpleTreeIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *p = (struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)o;
  if (p->_tree) {
    e = (*v)(p->_tree, a); if (e) return e;
  }
  if (p->_current_node) {
    e = (*v)(p->_current_node, a); if (e) return e;
  }
  if (p->_current_coord) {
    e = (*v)(p->_current_coord, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9pyoctomap_7octomap_SimpleTreeIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *p = (struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator *)o;
  tmp = ((PyObject*)p->_tree);
  p->_tree = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_current_node);
  p->_current_node = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_current_coord);
  p->_current_coord = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_9__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  PyObject *res = __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_9__next__(self);
  if (!res && !PyErr_Occurred()) { PyErr_SetNone(PyExc_StopIteration); }
  return res;
}

static PyMethodDef __pyx_methods_9pyoctomap_7octomap_SimpleTreeIterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_9__next__, METH_NOARGS|METH_COEXIST, 0},
  {"getCoordinate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_11getCoordinate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getSize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_13getSize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getDepth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_15getDepth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"isLeaf", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_17isLeaf, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9pyoctomap_7octomap_SimpleTreeIterator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9pyoctomap_7octomap_SimpleTreeIterator},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Robust wrapper around octomap C++ tree_iterator.\n    Captures per-step state so methods refer to the item yielded by the last next().\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9pyoctomap_7octomap_SimpleTreeIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_9pyoctomap_7octomap_SimpleTreeIterator},
  {Py_tp_iter, (void *)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_7__iter__},
  {Py_tp_iternext, (void *)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_9__next__},
  {Py_tp_methods, (void *)__pyx_methods_9pyoctomap_7octomap_SimpleTreeIterator},
  {Py_tp_init, (void *)__pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_5__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9pyoctomap_7octomap_SimpleTreeIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_9pyoctomap_7octomap_SimpleTreeIterator_spec = {
  "pyoctomap.octomap.SimpleTreeIterator",
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9pyoctomap_7octomap_SimpleTreeIterator_slots,
};
#else

static PyTypeObject __pyx_type_9pyoctomap_7octomap_SimpleTreeIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyoctomap.octomap.""SimpleTreeIterator", /*tp_name*/
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_SimpleTreeIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pyoctomap_7octomap_SimpleTreeIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    Robust wrapper around octomap C++ tree_iterator.\n    Captures per-step state so methods refer to the item yielded by the last next().\n    "), /*tp_doc*/
  __pyx_tp_traverse_9pyoctomap_7octomap_SimpleTreeIterator, /*tp_traverse*/
  __pyx_tp_clear_9pyoctomap_7octomap_SimpleTreeIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_7__iter__, /*tp_iter*/
  __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_9__next__, /*tp_iternext*/
  __pyx_methods_9pyoctomap_7octomap_SimpleTreeIterator, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9pyoctomap_7octomap_18SimpleTreeIterator_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pyoctomap_7octomap_SimpleTreeIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9pyoctomap_7octomap_SimpleLeafIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)o);
  p->_tree = Py_None; Py_INCREF(Py_None);
  p->_current_node = Py_None; Py_INCREF(Py_None);
  p->_current_coord = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9pyoctomap_7octomap_SimpleLeafIterator(PyObject *o) {
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *p = (struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9pyoctomap_7octomap_SimpleLeafIterator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_tree);
  Py_CLEAR(p->_current_node);
  Py_CLEAR(p->_current_coord);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_9pyoctomap_7octomap_SimpleLeafIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *p = (struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)o;
  if (p->_tree) {
    e = (*v)(p->_tree, a); if (e) return e;
  }
  if (p->_current_node) {
    e = (*v)(p->_current_node, a); if (e) return e;
  }
  if (p->_current_coord) {
    e = (*v)(p->_current_coord, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9pyoctomap_7octomap_SimpleLeafIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *p = (struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator *)o;
  tmp = ((PyObject*)p->_tree);
  p->_tree = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_current_node);
  p->_current_node = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_current_coord);
  p->_current_coord = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9pyoctomap_7octomap_18SimpleLeafIterator_current_node(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_12current_node_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_9__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  PyObject *res = __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_9__next__(self);
  if (!res && !PyErr_Occurred()) { PyErr_SetNone(PyExc_StopIteration); }
  return res;
}

static PyMethodDef __pyx_methods_9pyoctomap_7octomap_SimpleLeafIterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_9__next__, METH_NOARGS|METH_COEXIST, 0},
  {"getCoordinate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_11getCoordinate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getSize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_13getSize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getDepth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_15getDepth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"isLeaf", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_17isLeaf, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_18SimpleLeafIterator_16isLeaf},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9pyoctomap_7octomap_SimpleLeafIterator[] = {
  {(char *)"current_node", __pyx_getprop_9pyoctomap_7octomap_18SimpleLeafIterator_current_node, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9pyoctomap_7octomap_SimpleLeafIterator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9pyoctomap_7octomap_SimpleLeafIterator},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Robust wrapper around octomap C++ leaf_iterator.\n    Captures per-step state so methods refer to the item yielded by the last next().\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9pyoctomap_7octomap_SimpleLeafIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_9pyoctomap_7octomap_SimpleLeafIterator},
  {Py_tp_iter, (void *)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_7__iter__},
  {Py_tp_iternext, (void *)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_9__next__},
  {Py_tp_methods, (void *)__pyx_methods_9pyoctomap_7octomap_SimpleLeafIterator},
  {Py_tp_getset, (void *)__pyx_getsets_9pyoctomap_7octomap_SimpleLeafIterator},
  {Py_tp_init, (void *)__pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_5__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9pyoctomap_7octomap_SimpleLeafIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_9pyoctomap_7octomap_SimpleLeafIterator_spec = {
  "pyoctomap.octomap.SimpleLeafIterator",
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9pyoctomap_7octomap_SimpleLeafIterator_slots,
};
#else

static PyTypeObject __pyx_type_9pyoctomap_7octomap_SimpleLeafIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyoctomap.octomap.""SimpleLeafIterator", /*tp_name*/
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pyoctomap_7octomap_SimpleLeafIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    Robust wrapper around octomap C++ leaf_iterator.\n    Captures per-step state so methods refer to the item yielded by the last next().\n    "), /*tp_doc*/
  __pyx_tp_traverse_9pyoctomap_7octomap_SimpleLeafIterator, /*tp_traverse*/
  __pyx_tp_clear_9pyoctomap_7octomap_SimpleLeafIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_7__iter__, /*tp_iter*/
  __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_9__next__, /*tp_iternext*/
  __pyx_methods_9pyoctomap_7octomap_SimpleLeafIterator, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9pyoctomap_7octomap_SimpleLeafIterator, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9pyoctomap_7octomap_18SimpleLeafIterator_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pyoctomap_7octomap_SimpleLeafIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_9pyoctomap_7octomap_SimpleLeafBBXIterator(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)o);
  p->_tree = Py_None; Py_INCREF(Py_None);
  p->_current_node = Py_None; Py_INCREF(Py_None);
  p->_current_coord = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9pyoctomap_7octomap_SimpleLeafBBXIterator(PyObject *o) {
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *p = (struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9pyoctomap_7octomap_SimpleLeafBBXIterator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_1__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_tree);
  Py_CLEAR(p->_current_node);
  Py_CLEAR(p->_current_coord);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_9pyoctomap_7octomap_SimpleLeafBBXIterator(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *p = (struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)o;
  if (p->_tree) {
    e = (*v)(p->_tree, a); if (e) return e;
  }
  if (p->_current_node) {
    e = (*v)(p->_current_node, a); if (e) return e;
  }
  if (p->_current_coord) {
    e = (*v)(p->_current_coord, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_9pyoctomap_7octomap_SimpleLeafBBXIterator(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *p = (struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator *)o;
  tmp = ((PyObject*)p->_tree);
  p->_tree = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_current_node);
  p->_current_node = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_current_coord);
  p->_current_coord = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_9pyoctomap_7octomap_21SimpleLeafBBXIterator_current_node(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_12current_node_1__get__(o);
}

static PyObject *__pyx_getprop_9pyoctomap_7octomap_21SimpleLeafBBXIterator_is_end(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_6is_end_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_9__next__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  PyObject *res = __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_9__next__(self);
  if (!res && !PyErr_Occurred()) { PyErr_SetNone(PyExc_StopIteration); }
  return res;
}

static PyMethodDef __pyx_methods_9pyoctomap_7octomap_SimpleLeafBBXIterator[] = {
  {"__next__", (PyCFunction)__pyx_specialmethod___pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_9__next__, METH_NOARGS|METH_COEXIST, 0},
  {"getCoordinate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_11getCoordinate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getSize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_13getSize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getDepth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_15getDepth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"isLeaf", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_17isLeaf, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_21SimpleLeafBBXIterator_16isLeaf},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_19__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_21__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_9pyoctomap_7octomap_SimpleLeafBBXIterator[] = {
  {(char *)"current_node", __pyx_getprop_9pyoctomap_7octomap_21SimpleLeafBBXIterator_current_node, 0, (char *)0, 0},
  {(char *)"is_end", __pyx_getprop_9pyoctomap_7octomap_21SimpleLeafBBXIterator_is_end, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9pyoctomap_7octomap_SimpleLeafBBXIterator},
  {Py_tp_doc, (void *)PyDoc_STR("\n    Robust wrapper around octomap C++ leaf_bbx_iterator.\n    Captures per-step state so methods refer to the item yielded by the last next().\n    ")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_9pyoctomap_7octomap_SimpleLeafBBXIterator},
  {Py_tp_clear, (void *)__pyx_tp_clear_9pyoctomap_7octomap_SimpleLeafBBXIterator},
  {Py_tp_iter, (void *)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_7__iter__},
  {Py_tp_iternext, (void *)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_9__next__},
  {Py_tp_methods, (void *)__pyx_methods_9pyoctomap_7octomap_SimpleLeafBBXIterator},
  {Py_tp_getset, (void *)__pyx_getsets_9pyoctomap_7octomap_SimpleLeafBBXIterator},
  {Py_tp_init, (void *)__pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_5__init__},
  {Py_tp_new, (void *)__pyx_tp_new_9pyoctomap_7octomap_SimpleLeafBBXIterator},
  {0, 0},
};
static PyType_Spec __pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator_spec = {
  "pyoctomap.octomap.SimpleLeafBBXIterator",
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator_slots,
};
#else

static PyTypeObject __pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyoctomap.octomap.""SimpleLeafBBXIterator", /*tp_name*/
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_SimpleLeafBBXIterator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pyoctomap_7octomap_SimpleLeafBBXIterator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  PyDoc_STR("\n    Robust wrapper around octomap C++ leaf_bbx_iterator.\n    Captures per-step state so methods refer to the item yielded by the last next().\n    "), /*tp_doc*/
  __pyx_tp_traverse_9pyoctomap_7octomap_SimpleLeafBBXIterator, /*tp_traverse*/
  __pyx_tp_clear_9pyoctomap_7octomap_SimpleLeafBBXIterator, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_7__iter__, /*tp_iter*/
  __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_9__next__, /*tp_iternext*/
  __pyx_methods_9pyoctomap_7octomap_SimpleLeafBBXIterator, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_9pyoctomap_7octomap_SimpleLeafBBXIterator, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_9pyoctomap_7octomap_21SimpleLeafBBXIterator_5__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pyoctomap_7octomap_SimpleLeafBBXIterator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_9pyoctomap_7octomap_OcTree __pyx_vtable_9pyoctomap_7octomap_OcTree;

static PyObject *__pyx_tp_new_9pyoctomap_7octomap_OcTree(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_9pyoctomap_7octomap_OcTree *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_9pyoctomap_7octomap_OcTree *)o);
  p->__pyx_vtab = __pyx_vtabptr_9pyoctomap_7octomap_OcTree;
  if (unlikely(__pyx_pw_9pyoctomap_7octomap_6OcTree_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_9pyoctomap_7octomap_OcTree(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_9pyoctomap_7octomap_OcTree) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_9pyoctomap_7octomap_6OcTree_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_9pyoctomap_7octomap_OcTree[] = {
  {"adjustKeyAtDepth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_5adjustKeyAtDepth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"bbxSet", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_7bbxSet, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"calcNumNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_9calcNumNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"clear", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_11clear, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"coordToKey", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_13coordToKey, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"coordToKeyChecked", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_15coordToKeyChecked, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"deleteNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_17deleteNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"castRay", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_19castRay, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_18castRay},
  {"read", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_21read, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"write", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_23write, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_22write},
  {"readBinary", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_25readBinary, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"writeBinary", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_27writeBinary, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"isNodeOccupied", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_29isNodeOccupied, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"isNodeAtThreshold", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_31isNodeAtThreshold, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getLabels", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_33getLabels, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"extractPointCloud", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_35extractPointCloud, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"insertPointCloud", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_37insertPointCloud, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_36insertPointCloud},
  {"begin_tree", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_39begin_tree, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_38begin_tree},
  {"begin_leafs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_41begin_leafs, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_40begin_leafs},
  {"begin_leafs_bbx", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_43begin_leafs_bbx, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_42begin_leafs_bbx},
  {"end_tree", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_45end_tree, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_44end_tree},
  {"end_leafs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_47end_leafs, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_46end_leafs},
  {"end_leafs_bbx", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_49end_leafs_bbx, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_48end_leafs_bbx},
  {"getBBXBounds", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_51getBBXBounds, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getBBXCenter", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_53getBBXCenter, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getBBXMax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_55getBBXMax, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getBBXMin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_57getBBXMin, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getRoot", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_59getRoot, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getNumLeafNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_61getNumLeafNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getResolution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_63getResolution, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getTreeDepth", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_65getTreeDepth, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getTreeType", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_67getTreeType, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"inBBX", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_69inBBX, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"keyToCoord", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_71keyToCoord, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"memoryFullGrid", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_73memoryFullGrid, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"memoryUsage", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_75memoryUsage, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"memoryUsageNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_77memoryUsageNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"resetChangeDetection", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_79resetChangeDetection, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_78resetChangeDetection},
  {"search", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_81search, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"setBBXMax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_83setBBXMax, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_82setBBXMax},
  {"setBBXMin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_85setBBXMin, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_84setBBXMin},
  {"setResolution", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_87setResolution, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_86setResolution},
  {"size", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_89size, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"toMaxLikelihood", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_91toMaxLikelihood, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_90toMaxLikelihood},
  {"updateNodes", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_93updateNodes, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_92updateNodes},
  {"updateNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_95updateNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"updateInnerOccupancy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_97updateInnerOccupancy, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_96updateInnerOccupancy},
  {"useBBXLimit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_99useBBXLimit, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_98useBBXLimit},
  {"volume", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_101volume, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getClampingThresMax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_103getClampingThresMax, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getClampingThresMaxLog", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_105getClampingThresMaxLog, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getClampingThresMin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_107getClampingThresMin, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getClampingThresMinLog", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_109getClampingThresMinLog, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getOccupancyThres", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_111getOccupancyThres, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getOccupancyThresLog", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_113getOccupancyThresLog, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getProbHit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_115getProbHit, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getProbHitLog", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_117getProbHitLog, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getProbMiss", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_119getProbMiss, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getProbMissLog", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_121getProbMissLog, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"setClampingThresMax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_123setClampingThresMax, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"setClampingThresMin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_125setClampingThresMin, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"setOccupancyThres", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_127setOccupancyThres, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"setProbHit", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_129setProbHit, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"setProbMiss", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_131setProbMiss, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getMetricSize", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_133getMetricSize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getMetricMin", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_135getMetricMin, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getMetricMax", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_137getMetricMax, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"expandNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_139expandNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"createNodeChild", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_141createNodeChild, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"getNodeChild", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_143getNodeChild, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"isNodeCollapsible", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_145isNodeCollapsible, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"deleteNodeChild", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_147deleteNodeChild, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"pruneNode", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_149pruneNode, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"nodeHasChildren", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_151nodeHasChildren, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_150nodeHasChildren},
  {"dynamicEDT_generate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_153dynamicEDT_generate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"dynamicEDT_checkConsistency", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_155dynamicEDT_checkConsistency, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"dynamicEDT_update", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_157dynamicEDT_update, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"dynamicEDT_getMaxDist", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_159dynamicEDT_getMaxDist, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"dynamicEDT_getDistance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_161dynamicEDT_getDistance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"addPointWithRayCasting", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_163addPointWithRayCasting, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_162addPointWithRayCasting},
  {"markFreeSpaceAlongRay", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_165markFreeSpaceAlongRay, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_164markFreeSpaceAlongRay},
  {"addPointCloudWithRayCasting", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_167addPointCloudWithRayCasting, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_166addPointCloudWithRayCasting},
  {"_discretizePointCloud", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_169_discretizePointCloud, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_168_discretizePointCloud},
  {"insertPointCloudFast", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_171insertPointCloudFast, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_170insertPointCloudFast},
  {"insertPointCloud", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_173insertPointCloud, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_172insertPointCloud},
  {"insertPointCloudRaysFast", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_175insertPointCloudRaysFast, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_9pyoctomap_7octomap_6OcTree_174insertPointCloudRaysFast},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_177__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_9pyoctomap_7octomap_6OcTree_179__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_9pyoctomap_7octomap_OcTree_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_9pyoctomap_7octomap_OcTree},
  {Py_tp_doc, (void *)PyDoc_STR("\n    octomap main map data structure, stores 3D occupancy grid map in an OcTree.\n    ")},
  {Py_tp_methods, (void *)__pyx_methods_9pyoctomap_7octomap_OcTree},
  {Py_tp_new, (void *)__pyx_tp_new_9pyoctomap_7octomap_OcTree},
  {0, 0},
};
static PyType_Spec __pyx_type_9pyoctomap_7octomap_OcTree_spec = {
  "pyoctomap.octomap.OcTree",
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_OcTree),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_9pyoctomap_7octomap_OcTree_slots,
};
#else

static PyTypeObject __pyx_type_9pyoctomap_7octomap_OcTree = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyoctomap.octomap.""OcTree", /*tp_name*/
  sizeof(struct __pyx_obj_9pyoctomap_7octomap_OcTree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_9pyoctomap_7octomap_OcTree, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  PyDoc_STR("\n    octomap main map data structure, stores 3D occupancy grid map in an OcTree.\n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_9pyoctomap_7octomap_OcTree, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_9pyoctomap_7octomap_OcTree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_Error_in_point_cloud_processing, __pyx_k_Error_in_point_cloud_processing, sizeof(__pyx_k_Error_in_point_cloud_processing), 0, 1, 0, 0},
    {&__pyx_kp_u_Expected_OcTreeNode, __pyx_k_Expected_OcTreeNode, sizeof(__pyx_k_Expected_OcTreeNode), 0, 1, 0, 0},
    {&__pyx_kp_u_Expected_OcTreeNode_or_iterator, __pyx_k_Expected_OcTreeNode_or_iterator, sizeof(__pyx_k_Expected_OcTreeNode_or_iterator), 0, 1, 0, 0},
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_n_s_NullPointerException, __pyx_k_NullPointerException, sizeof(__pyx_k_NullPointerException), 0, 0, 1, 1},
    {&__pyx_n_s_NullPointerException___init, __pyx_k_NullPointerException___init, sizeof(__pyx_k_NullPointerException___init), 0, 0, 1, 1},
    {&__pyx_kp_s_Null_pointer_exception, __pyx_k_Null_pointer_exception, sizeof(__pyx_k_Null_pointer_exception), 0, 0, 1, 0},
    {&__pyx_n_s_Number, __pyx_k_Number, sizeof(__pyx_k_Number), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree, __pyx_k_OcTree, sizeof(__pyx_k_OcTree), 0, 0, 1, 1},
    {&__pyx_kp_u_OcTreeKey, __pyx_k_OcTreeKey, sizeof(__pyx_k_OcTreeKey), 0, 1, 0, 0},
    {&__pyx_n_s_OcTreeKey_2, __pyx_k_OcTreeKey_2, sizeof(__pyx_k_OcTreeKey_2), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeKey___reduce_cython, __pyx_k_OcTreeKey___reduce_cython, sizeof(__pyx_k_OcTreeKey___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeKey___setstate_cython, __pyx_k_OcTreeKey___setstate_cython, sizeof(__pyx_k_OcTreeKey___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeKey_computeChildIdx, __pyx_k_OcTreeKey_computeChildIdx, sizeof(__pyx_k_OcTreeKey_computeChildIdx), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeKey_computeIndexKey, __pyx_k_OcTreeKey_computeIndexKey, sizeof(__pyx_k_OcTreeKey_computeIndexKey), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode, __pyx_k_OcTreeNode, sizeof(__pyx_k_OcTreeNode), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode___reduce_cython, __pyx_k_OcTreeNode___reduce_cython, sizeof(__pyx_k_OcTreeNode___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode___setstate_cython, __pyx_k_OcTreeNode___setstate_cython, sizeof(__pyx_k_OcTreeNode___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode_addValue, __pyx_k_OcTreeNode_addValue, sizeof(__pyx_k_OcTreeNode_addValue), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode_childExists, __pyx_k_OcTreeNode_childExists, sizeof(__pyx_k_OcTreeNode_childExists), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode_getLogOdds, __pyx_k_OcTreeNode_getLogOdds, sizeof(__pyx_k_OcTreeNode_getLogOdds), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode_getMaxChildLogOdds, __pyx_k_OcTreeNode_getMaxChildLogOdds, sizeof(__pyx_k_OcTreeNode_getMaxChildLogOdds), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode_getOccupancy, __pyx_k_OcTreeNode_getOccupancy, sizeof(__pyx_k_OcTreeNode_getOccupancy), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode_getValue, __pyx_k_OcTreeNode_getValue, sizeof(__pyx_k_OcTreeNode_getValue), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode_hasChildren, __pyx_k_OcTreeNode_hasChildren, sizeof(__pyx_k_OcTreeNode_hasChildren), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode_setLogOdds, __pyx_k_OcTreeNode_setLogOdds, sizeof(__pyx_k_OcTreeNode_setLogOdds), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode_setValue, __pyx_k_OcTreeNode_setValue, sizeof(__pyx_k_OcTreeNode_setValue), 0, 0, 1, 1},
    {&__pyx_n_s_OcTreeNode_updateOccupancyChildr, __pyx_k_OcTreeNode_updateOccupancyChildr, sizeof(__pyx_k_OcTreeNode_updateOccupancyChildr), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree___reduce_cython, __pyx_k_OcTree___reduce_cython, sizeof(__pyx_k_OcTree___reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree___setstate_cython, __pyx_k_OcTree___setstate_cython, sizeof(__pyx_k_OcTree___setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree__discretizePointCloud, __pyx_k_OcTree__discretizePointCloud, sizeof(__pyx_k_OcTree__discretizePointCloud), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_addPointCloudWithRayCasti, __pyx_k_OcTree_addPointCloudWithRayCasti, sizeof(__pyx_k_OcTree_addPointCloudWithRayCasti), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_addPointWithRayCasting, __pyx_k_OcTree_addPointWithRayCasting, sizeof(__pyx_k_OcTree_addPointWithRayCasting), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_adjustKeyAtDepth, __pyx_k_OcTree_adjustKeyAtDepth, sizeof(__pyx_k_OcTree_adjustKeyAtDepth), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_bbxSet, __pyx_k_OcTree_bbxSet, sizeof(__pyx_k_OcTree_bbxSet), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_begin_leafs, __pyx_k_OcTree_begin_leafs, sizeof(__pyx_k_OcTree_begin_leafs), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_begin_leafs_bbx, __pyx_k_OcTree_begin_leafs_bbx, sizeof(__pyx_k_OcTree_begin_leafs_bbx), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_begin_tree, __pyx_k_OcTree_begin_tree, sizeof(__pyx_k_OcTree_begin_tree), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_calcNumNodes, __pyx_k_OcTree_calcNumNodes, sizeof(__pyx_k_OcTree_calcNumNodes), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_castRay, __pyx_k_OcTree_castRay, sizeof(__pyx_k_OcTree_castRay), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_clear, __pyx_k_OcTree_clear, sizeof(__pyx_k_OcTree_clear), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_coordToKey, __pyx_k_OcTree_coordToKey, sizeof(__pyx_k_OcTree_coordToKey), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_coordToKeyChecked, __pyx_k_OcTree_coordToKeyChecked, sizeof(__pyx_k_OcTree_coordToKeyChecked), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_createNodeChild, __pyx_k_OcTree_createNodeChild, sizeof(__pyx_k_OcTree_createNodeChild), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_deleteNode, __pyx_k_OcTree_deleteNode, sizeof(__pyx_k_OcTree_deleteNode), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_deleteNodeChild, __pyx_k_OcTree_deleteNodeChild, sizeof(__pyx_k_OcTree_deleteNodeChild), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_dynamicEDT_checkConsisten, __pyx_k_OcTree_dynamicEDT_checkConsisten, sizeof(__pyx_k_OcTree_dynamicEDT_checkConsisten), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_dynamicEDT_generate, __pyx_k_OcTree_dynamicEDT_generate, sizeof(__pyx_k_OcTree_dynamicEDT_generate), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_dynamicEDT_getDistance, __pyx_k_OcTree_dynamicEDT_getDistance, sizeof(__pyx_k_OcTree_dynamicEDT_getDistance), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_dynamicEDT_getMaxDist, __pyx_k_OcTree_dynamicEDT_getMaxDist, sizeof(__pyx_k_OcTree_dynamicEDT_getMaxDist), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_dynamicEDT_update, __pyx_k_OcTree_dynamicEDT_update, sizeof(__pyx_k_OcTree_dynamicEDT_update), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_end_leafs, __pyx_k_OcTree_end_leafs, sizeof(__pyx_k_OcTree_end_leafs), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_end_leafs_bbx, __pyx_k_OcTree_end_leafs_bbx, sizeof(__pyx_k_OcTree_end_leafs_bbx), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_end_tree, __pyx_k_OcTree_end_tree, sizeof(__pyx_k_OcTree_end_tree), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_expandNode, __pyx_k_OcTree_expandNode, sizeof(__pyx_k_OcTree_expandNode), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_extractPointCloud, __pyx_k_OcTree_extractPointCloud, sizeof(__pyx_k_OcTree_extractPointCloud), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getBBXBounds, __pyx_k_OcTree_getBBXBounds, sizeof(__pyx_k_OcTree_getBBXBounds), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getBBXCenter, __pyx_k_OcTree_getBBXCenter, sizeof(__pyx_k_OcTree_getBBXCenter), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getBBXMax, __pyx_k_OcTree_getBBXMax, sizeof(__pyx_k_OcTree_getBBXMax), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getBBXMin, __pyx_k_OcTree_getBBXMin, sizeof(__pyx_k_OcTree_getBBXMin), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getClampingThresMax, __pyx_k_OcTree_getClampingThresMax, sizeof(__pyx_k_OcTree_getClampingThresMax), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getClampingThresMaxLog, __pyx_k_OcTree_getClampingThresMaxLog, sizeof(__pyx_k_OcTree_getClampingThresMaxLog), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getClampingThresMin, __pyx_k_OcTree_getClampingThresMin, sizeof(__pyx_k_OcTree_getClampingThresMin), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getClampingThresMinLog, __pyx_k_OcTree_getClampingThresMinLog, sizeof(__pyx_k_OcTree_getClampingThresMinLog), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getLabels, __pyx_k_OcTree_getLabels, sizeof(__pyx_k_OcTree_getLabels), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getMetricMax, __pyx_k_OcTree_getMetricMax, sizeof(__pyx_k_OcTree_getMetricMax), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getMetricMin, __pyx_k_OcTree_getMetricMin, sizeof(__pyx_k_OcTree_getMetricMin), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getMetricSize, __pyx_k_OcTree_getMetricSize, sizeof(__pyx_k_OcTree_getMetricSize), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getNodeChild, __pyx_k_OcTree_getNodeChild, sizeof(__pyx_k_OcTree_getNodeChild), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getNumLeafNodes, __pyx_k_OcTree_getNumLeafNodes, sizeof(__pyx_k_OcTree_getNumLeafNodes), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getOccupancyThres, __pyx_k_OcTree_getOccupancyThres, sizeof(__pyx_k_OcTree_getOccupancyThres), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getOccupancyThresLog, __pyx_k_OcTree_getOccupancyThresLog, sizeof(__pyx_k_OcTree_getOccupancyThresLog), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getProbHit, __pyx_k_OcTree_getProbHit, sizeof(__pyx_k_OcTree_getProbHit), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getProbHitLog, __pyx_k_OcTree_getProbHitLog, sizeof(__pyx_k_OcTree_getProbHitLog), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getProbMiss, __pyx_k_OcTree_getProbMiss, sizeof(__pyx_k_OcTree_getProbMiss), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getProbMissLog, __pyx_k_OcTree_getProbMissLog, sizeof(__pyx_k_OcTree_getProbMissLog), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getResolution, __pyx_k_OcTree_getResolution, sizeof(__pyx_k_OcTree_getResolution), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getRoot, __pyx_k_OcTree_getRoot, sizeof(__pyx_k_OcTree_getRoot), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getTreeDepth, __pyx_k_OcTree_getTreeDepth, sizeof(__pyx_k_OcTree_getTreeDepth), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_getTreeType, __pyx_k_OcTree_getTreeType, sizeof(__pyx_k_OcTree_getTreeType), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_inBBX, __pyx_k_OcTree_inBBX, sizeof(__pyx_k_OcTree_inBBX), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_insertPointCloud, __pyx_k_OcTree_insertPointCloud, sizeof(__pyx_k_OcTree_insertPointCloud), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_insertPointCloudFast, __pyx_k_OcTree_insertPointCloudFast, sizeof(__pyx_k_OcTree_insertPointCloudFast), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_insertPointCloudRaysFast, __pyx_k_OcTree_insertPointCloudRaysFast, sizeof(__pyx_k_OcTree_insertPointCloudRaysFast), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_isNodeAtThreshold, __pyx_k_OcTree_isNodeAtThreshold, sizeof(__pyx_k_OcTree_isNodeAtThreshold), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_isNodeCollapsible, __pyx_k_OcTree_isNodeCollapsible, sizeof(__pyx_k_OcTree_isNodeCollapsible), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_isNodeOccupied, __pyx_k_OcTree_isNodeOccupied, sizeof(__pyx_k_OcTree_isNodeOccupied), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_keyToCoord, __pyx_k_OcTree_keyToCoord, sizeof(__pyx_k_OcTree_keyToCoord), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_markFreeSpaceAlongRay, __pyx_k_OcTree_markFreeSpaceAlongRay, sizeof(__pyx_k_OcTree_markFreeSpaceAlongRay), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_memoryFullGrid, __pyx_k_OcTree_memoryFullGrid, sizeof(__pyx_k_OcTree_memoryFullGrid), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_memoryUsage, __pyx_k_OcTree_memoryUsage, sizeof(__pyx_k_OcTree_memoryUsage), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_memoryUsageNode, __pyx_k_OcTree_memoryUsageNode, sizeof(__pyx_k_OcTree_memoryUsageNode), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_nodeHasChildren, __pyx_k_OcTree_nodeHasChildren, sizeof(__pyx_k_OcTree_nodeHasChildren), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_pruneNode, __pyx_k_OcTree_pruneNode, sizeof(__pyx_k_OcTree_pruneNode), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_read, __pyx_k_OcTree_read, sizeof(__pyx_k_OcTree_read), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_readBinary, __pyx_k_OcTree_readBinary, sizeof(__pyx_k_OcTree_readBinary), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_resetChangeDetection, __pyx_k_OcTree_resetChangeDetection, sizeof(__pyx_k_OcTree_resetChangeDetection), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_search, __pyx_k_OcTree_search, sizeof(__pyx_k_OcTree_search), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_setBBXMax, __pyx_k_OcTree_setBBXMax, sizeof(__pyx_k_OcTree_setBBXMax), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_setBBXMin, __pyx_k_OcTree_setBBXMin, sizeof(__pyx_k_OcTree_setBBXMin), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_setClampingThresMax, __pyx_k_OcTree_setClampingThresMax, sizeof(__pyx_k_OcTree_setClampingThresMax), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_setClampingThresMin, __pyx_k_OcTree_setClampingThresMin, sizeof(__pyx_k_OcTree_setClampingThresMin), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_setOccupancyThres, __pyx_k_OcTree_setOccupancyThres, sizeof(__pyx_k_OcTree_setOccupancyThres), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_setProbHit, __pyx_k_OcTree_setProbHit, sizeof(__pyx_k_OcTree_setProbHit), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_setProbMiss, __pyx_k_OcTree_setProbMiss, sizeof(__pyx_k_OcTree_setProbMiss), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_setResolution, __pyx_k_OcTree_setResolution, sizeof(__pyx_k_OcTree_setResolution), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_size, __pyx_k_OcTree_size, sizeof(__pyx_k_OcTree_size), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_toMaxLikelihood, __pyx_k_OcTree_toMaxLikelihood, sizeof(__pyx_k_OcTree_toMaxLikelihood), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_updateInnerOccupancy, __pyx_k_OcTree_updateInnerOccupancy, sizeof(__pyx_k_OcTree_updateInnerOccupancy), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_updateNode, __pyx_k_OcTree_updateNode, sizeof(__pyx_k_OcTree_updateNode), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_updateNodes, __pyx_k_OcTree_updateNodes, sizeof(__pyx_k_OcTree_updateNodes), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_useBBXLimit, __pyx_k_OcTree_useBBXLimit, sizeof(__pyx_k_OcTree_useBBXLimit), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_volume, __pyx_k_OcTree_volume, sizeof(__pyx_k_OcTree_volume), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_write, __pyx_k_OcTree_write, sizeof(__pyx_k_OcTree_write), 0, 0, 1, 1},
    {&__pyx_n_s_OcTree_writeBinary, __pyx_k_OcTree_writeBinary, sizeof(__pyx_k_OcTree_writeBinary), 0, 0, 1, 1},
    {&__pyx_kp_b_Octomap_OcTree_file, __pyx_k_Octomap_OcTree_file, sizeof(__pyx_k_Octomap_OcTree_file), 0, 0, 0, 0},
    {&__pyx_n_s_SimpleLeafBBXIterator, __pyx_k_SimpleLeafBBXIterator, sizeof(__pyx_k_SimpleLeafBBXIterator), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafBBXIterator___reduce_c, __pyx_k_SimpleLeafBBXIterator___reduce_c, sizeof(__pyx_k_SimpleLeafBBXIterator___reduce_c), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafBBXIterator___setstate, __pyx_k_SimpleLeafBBXIterator___setstate, sizeof(__pyx_k_SimpleLeafBBXIterator___setstate), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafBBXIterator_getCoordin, __pyx_k_SimpleLeafBBXIterator_getCoordin, sizeof(__pyx_k_SimpleLeafBBXIterator_getCoordin), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafBBXIterator_getDepth, __pyx_k_SimpleLeafBBXIterator_getDepth, sizeof(__pyx_k_SimpleLeafBBXIterator_getDepth), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafBBXIterator_getSize, __pyx_k_SimpleLeafBBXIterator_getSize, sizeof(__pyx_k_SimpleLeafBBXIterator_getSize), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafBBXIterator_isLeaf, __pyx_k_SimpleLeafBBXIterator_isLeaf, sizeof(__pyx_k_SimpleLeafBBXIterator_isLeaf), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafIterator, __pyx_k_SimpleLeafIterator, sizeof(__pyx_k_SimpleLeafIterator), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafIterator___reduce_cyth, __pyx_k_SimpleLeafIterator___reduce_cyth, sizeof(__pyx_k_SimpleLeafIterator___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafIterator___setstate_cy, __pyx_k_SimpleLeafIterator___setstate_cy, sizeof(__pyx_k_SimpleLeafIterator___setstate_cy), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafIterator_getCoordinate, __pyx_k_SimpleLeafIterator_getCoordinate, sizeof(__pyx_k_SimpleLeafIterator_getCoordinate), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafIterator_getDepth, __pyx_k_SimpleLeafIterator_getDepth, sizeof(__pyx_k_SimpleLeafIterator_getDepth), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafIterator_getSize, __pyx_k_SimpleLeafIterator_getSize, sizeof(__pyx_k_SimpleLeafIterator_getSize), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleLeafIterator_isLeaf, __pyx_k_SimpleLeafIterator_isLeaf, sizeof(__pyx_k_SimpleLeafIterator_isLeaf), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleTreeIterator, __pyx_k_SimpleTreeIterator, sizeof(__pyx_k_SimpleTreeIterator), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleTreeIterator___reduce_cyth, __pyx_k_SimpleTreeIterator___reduce_cyth, sizeof(__pyx_k_SimpleTreeIterator___reduce_cyth), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleTreeIterator___setstate_cy, __pyx_k_SimpleTreeIterator___setstate_cy, sizeof(__pyx_k_SimpleTreeIterator___setstate_cy), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleTreeIterator_getCoordinate, __pyx_k_SimpleTreeIterator_getCoordinate, sizeof(__pyx_k_SimpleTreeIterator_getCoordinate), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleTreeIterator_getDepth, __pyx_k_SimpleTreeIterator_getDepth, sizeof(__pyx_k_SimpleTreeIterator_getDepth), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleTreeIterator_getSize, __pyx_k_SimpleTreeIterator_getSize, sizeof(__pyx_k_SimpleTreeIterator_getSize), 0, 0, 1, 1},
    {&__pyx_n_s_SimpleTreeIterator_isLeaf, __pyx_k_SimpleTreeIterator_isLeaf, sizeof(__pyx_k_SimpleTreeIterator_isLeaf), 0, 0, 1, 1},
    {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_n_s__194, __pyx_k__194, sizeof(__pyx_k__194), 0, 0, 1, 1},
    {&__pyx_kp_u__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0, 0},
    {&__pyx_kp_u__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0, 0},
    {&__pyx_n_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 1},
    {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
    {&__pyx_n_s_addPointCloudWithRayCasting, __pyx_k_addPointCloudWithRayCasting, sizeof(__pyx_k_addPointCloudWithRayCasting), 0, 0, 1, 1},
    {&__pyx_n_s_addPointWithRayCasting, __pyx_k_addPointWithRayCasting, sizeof(__pyx_k_addPointWithRayCasting), 0, 0, 1, 1},
    {&__pyx_n_s_addValue, __pyx_k_addValue, sizeof(__pyx_k_addValue), 0, 0, 1, 1},
    {&__pyx_n_s_adjustKeyAtDepth, __pyx_k_adjustKeyAtDepth, sizeof(__pyx_k_adjustKeyAtDepth), 0, 0, 1, 1},
    {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
    {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
    {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
    {&__pyx_n_s_ascontiguousarray, __pyx_k_ascontiguousarray, sizeof(__pyx_k_ascontiguousarray), 0, 0, 1, 1},
    {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
    {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
    {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
    {&__pyx_n_s_bbxSet, __pyx_k_bbxSet, sizeof(__pyx_k_bbxSet), 0, 0, 1, 1},
    {&__pyx_n_s_bbx_max, __pyx_k_bbx_max, sizeof(__pyx_k_bbx_max), 0, 0, 1, 1},
    {&__pyx_n_s_bbx_min, __pyx_k_bbx_min, sizeof(__pyx_k_bbx_min), 0, 0, 1, 1},
    {&__pyx_n_s_begin_leafs, __pyx_k_begin_leafs, sizeof(__pyx_k_begin_leafs), 0, 0, 1, 1},
    {&__pyx_n_s_begin_leafs_bbx, __pyx_k_begin_leafs_bbx, sizeof(__pyx_k_begin_leafs_bbx), 0, 0, 1, 1},
    {&__pyx_n_s_begin_tree, __pyx_k_begin_tree, sizeof(__pyx_k_begin_tree), 0, 0, 1, 1},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_n_s_c_filename, __pyx_k_c_filename, sizeof(__pyx_k_c_filename), 0, 0, 1, 1},
    {&__pyx_n_s_calcNumNodes, __pyx_k_calcNumNodes, sizeof(__pyx_k_calcNumNodes), 0, 0, 1, 1},
    {&__pyx_n_s_castRay, __pyx_k_castRay, sizeof(__pyx_k_castRay), 0, 0, 1, 1},
    {&__pyx_n_s_center, __pyx_k_center, sizeof(__pyx_k_center), 0, 0, 1, 1},
    {&__pyx_n_s_checked, __pyx_k_checked, sizeof(__pyx_k_checked), 0, 0, 1, 1},
    {&__pyx_n_s_child, __pyx_k_child, sizeof(__pyx_k_child), 0, 0, 1, 1},
    {&__pyx_n_s_childExists, __pyx_k_childExists, sizeof(__pyx_k_childExists), 0, 0, 1, 1},
    {&__pyx_n_s_chk, __pyx_k_chk, sizeof(__pyx_k_chk), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_clear, __pyx_k_clear, sizeof(__pyx_k_clear), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_column_stack, __pyx_k_column_stack, sizeof(__pyx_k_column_stack), 0, 0, 1, 1},
    {&__pyx_n_s_computeChildIdx, __pyx_k_computeChildIdx, sizeof(__pyx_k_computeChildIdx), 0, 0, 1, 1},
    {&__pyx_n_s_computeIndexKey, __pyx_k_computeIndexKey, sizeof(__pyx_k_computeIndexKey), 0, 0, 1, 1},
    {&__pyx_n_s_concatenate, __pyx_k_concatenate, sizeof(__pyx_k_concatenate), 0, 0, 1, 1},
    {&__pyx_n_s_coord, __pyx_k_coord, sizeof(__pyx_k_coord), 0, 0, 1, 1},
    {&__pyx_n_s_coordToKey, __pyx_k_coordToKey, sizeof(__pyx_k_coordToKey), 0, 0, 1, 1},
    {&__pyx_n_s_coordToKeyChecked, __pyx_k_coordToKeyChecked, sizeof(__pyx_k_coordToKeyChecked), 0, 0, 1, 1},
    {&__pyx_n_s_createNodeChild, __pyx_k_createNodeChild, sizeof(__pyx_k_createNodeChild), 0, 0, 1, 1},
    {&__pyx_n_s_deleteNode, __pyx_k_deleteNode, sizeof(__pyx_k_deleteNode), 0, 0, 1, 1},
    {&__pyx_n_s_deleteNodeChild, __pyx_k_deleteNodeChild, sizeof(__pyx_k_deleteNodeChild), 0, 0, 1, 1},
    {&__pyx_n_s_depth, __pyx_k_depth, sizeof(__pyx_k_depth), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_n_s_dimension, __pyx_k_dimension, sizeof(__pyx_k_dimension), 0, 0, 1, 1},
    {&__pyx_n_s_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 0, 1, 1},
    {&__pyx_n_s_direction_2, __pyx_k_direction_2, sizeof(__pyx_k_direction_2), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_discrete_points, __pyx_k_discrete_points, sizeof(__pyx_k_discrete_points), 0, 0, 1, 1},
    {&__pyx_n_s_discretize, __pyx_k_discretize, sizeof(__pyx_k_discretize), 0, 0, 1, 1},
    {&__pyx_n_s_discretizePointCloud, __pyx_k_discretizePointCloud, sizeof(__pyx_k_discretizePointCloud), 0, 0, 1, 1},
    {&__pyx_n_s_distances, __pyx_k_distances, sizeof(__pyx_k_distances), 0, 0, 1, 1},
    {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
    {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
    {&__pyx_n_s_dynamicEDT_checkConsistency, __pyx_k_dynamicEDT_checkConsistency, sizeof(__pyx_k_dynamicEDT_checkConsistency), 0, 0, 1, 1},
    {&__pyx_n_s_dynamicEDT_generate, __pyx_k_dynamicEDT_generate, sizeof(__pyx_k_dynamicEDT_generate), 0, 0, 1, 1},
    {&__pyx_n_s_dynamicEDT_getDistance, __pyx_k_dynamicEDT_getDistance, sizeof(__pyx_k_dynamicEDT_getDistance), 0, 0, 1, 1},
    {&__pyx_n_s_dynamicEDT_getMaxDist, __pyx_k_dynamicEDT_getMaxDist, sizeof(__pyx_k_dynamicEDT_getMaxDist), 0, 0, 1, 1},
    {&__pyx_n_s_dynamicEDT_update, __pyx_k_dynamicEDT_update, sizeof(__pyx_k_dynamicEDT_update), 0, 0, 1, 1},
    {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
    {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
    {&__pyx_n_s_empty_arr, __pyx_k_empty_arr, sizeof(__pyx_k_empty_arr), 0, 0, 1, 1},
    {&__pyx_n_s_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
    {&__pyx_n_s_end_2, __pyx_k_end_2, sizeof(__pyx_k_end_2), 0, 0, 1, 1},
    {&__pyx_n_s_end_leafs, __pyx_k_end_leafs, sizeof(__pyx_k_end_leafs), 0, 0, 1, 1},
    {&__pyx_n_s_end_leafs_bbx, __pyx_k_end_leafs_bbx, sizeof(__pyx_k_end_leafs_bbx), 0, 0, 1, 1},
    {&__pyx_n_s_end_point, __pyx_k_end_point, sizeof(__pyx_k_end_point), 0, 0, 1, 1},
    {&__pyx_n_s_end_tree, __pyx_k_end_tree, sizeof(__pyx_k_end_tree), 0, 0, 1, 1},
    {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
    {&__pyx_n_s_expandNode, __pyx_k_expandNode, sizeof(__pyx_k_expandNode), 0, 0, 1, 1},
    {&__pyx_n_s_extractPointCloud, __pyx_k_extractPointCloud, sizeof(__pyx_k_extractPointCloud), 0, 0, 1, 1},
    {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
    {&__pyx_n_s_filtered_points, __pyx_k_filtered_points, sizeof(__pyx_k_filtered_points), 0, 0, 1, 1},
    {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
    {&__pyx_n_s_found_node, __pyx_k_found_node, sizeof(__pyx_k_found_node), 0, 0, 1, 1},
    {&__pyx_n_s_full, __pyx_k_full, sizeof(__pyx_k_full), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_getBBXBounds, __pyx_k_getBBXBounds, sizeof(__pyx_k_getBBXBounds), 0, 0, 1, 1},
    {&__pyx_n_s_getBBXCenter, __pyx_k_getBBXCenter, sizeof(__pyx_k_getBBXCenter), 0, 0, 1, 1},
    {&__pyx_n_s_getBBXMax, __pyx_k_getBBXMax, sizeof(__pyx_k_getBBXMax), 0, 0, 1, 1},
    {&__pyx_n_s_getBBXMin, __pyx_k_getBBXMin, sizeof(__pyx_k_getBBXMin), 0, 0, 1, 1},
    {&__pyx_n_s_getClampingThresMax, __pyx_k_getClampingThresMax, sizeof(__pyx_k_getClampingThresMax), 0, 0, 1, 1},
    {&__pyx_n_s_getClampingThresMaxLog, __pyx_k_getClampingThresMaxLog, sizeof(__pyx_k_getClampingThresMaxLog), 0, 0, 1, 1},
    {&__pyx_n_s_getClampingThresMin, __pyx_k_getClampingThresMin, sizeof(__pyx_k_getClampingThresMin), 0, 0, 1, 1},
    {&__pyx_n_s_getClampingThresMinLog, __pyx_k_getClampingThresMinLog, sizeof(__pyx_k_getClampingThresMinLog), 0, 0, 1, 1},
    {&__pyx_n_s_getCoordinate, __pyx_k_getCoordinate, sizeof(__pyx_k_getCoordinate), 0, 0, 1, 1},
    {&__pyx_n_s_getDepth, __pyx_k_getDepth, sizeof(__pyx_k_getDepth), 0, 0, 1, 1},
    {&__pyx_n_s_getLabels, __pyx_k_getLabels, sizeof(__pyx_k_getLabels), 0, 0, 1, 1},
    {&__pyx_n_s_getLogOdds, __pyx_k_getLogOdds, sizeof(__pyx_k_getLogOdds), 0, 0, 1, 1},
    {&__pyx_n_s_getMaxChildLogOdds, __pyx_k_getMaxChildLogOdds, sizeof(__pyx_k_getMaxChildLogOdds), 0, 0, 1, 1},
    {&__pyx_n_s_getMetricMax, __pyx_k_getMetricMax, sizeof(__pyx_k_getMetricMax), 0, 0, 1, 1},
    {&__pyx_n_s_getMetricMin, __pyx_k_getMetricMin, sizeof(__pyx_k_getMetricMin), 0, 0, 1, 1},
    {&__pyx_n_s_getMetricSize, __pyx_k_getMetricSize, sizeof(__pyx_k_getMetricSize), 0, 0, 1, 1},
    {&__pyx_n_s_getNodeChild, __pyx_k_getNodeChild, sizeof(__pyx_k_getNodeChild), 0, 0, 1, 1},
    {&__pyx_n_s_getNumLeafNodes, __pyx_k_getNumLeafNodes, sizeof(__pyx_k_getNumLeafNodes), 0, 0, 1, 1},
    {&__pyx_n_s_getOccupancy, __pyx_k_getOccupancy, sizeof(__pyx_k_getOccupancy), 0, 0, 1, 1},
    {&__pyx_n_s_getOccupancyThres, __pyx_k_getOccupancyThres, sizeof(__pyx_k_getOccupancyThres), 0, 0, 1, 1},
    {&__pyx_n_s_getOccupancyThresLog, __pyx_k_getOccupancyThresLog, sizeof(__pyx_k_getOccupancyThresLog), 0, 0, 1, 1},
    {&__pyx_n_s_getProbHit, __pyx_k_getProbHit, sizeof(__pyx_k_getProbHit), 0, 0, 1, 1},
    {&__pyx_n_s_getProbHitLog, __pyx_k_getProbHitLog, sizeof(__pyx_k_getProbHitLog), 0, 0, 1, 1},
    {&__pyx_n_s_getProbMiss, __pyx_k_getProbMiss, sizeof(__pyx_k_getProbMiss), 0, 0, 1, 1},
    {&__pyx_n_s_getProbMissLog, __pyx_k_getProbMissLog, sizeof(__pyx_k_getProbMissLog), 0, 0, 1, 1},
    {&__pyx_n_s_getResolution, __pyx_k_getResolution, sizeof(__pyx_k_getResolution), 0, 0, 1, 1},
    {&__pyx_n_s_getRoot, __pyx_k_getRoot, sizeof(__pyx_k_getRoot), 0, 0, 1, 1},
    {&__pyx_n_s_getSize, __pyx_k_getSize, sizeof(__pyx_k_getSize), 0, 0, 1, 1},
    {&__pyx_n_s_getTreeDepth, __pyx_k_getTreeDepth, sizeof(__pyx_k_getTreeDepth), 0, 0, 1, 1},
    {&__pyx_n_s_getTreeType, __pyx_k_getTreeType, sizeof(__pyx_k_getTreeType), 0, 0, 1, 1},
    {&__pyx_n_s_getValue, __pyx_k_getValue, sizeof(__pyx_k_getValue), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_n_s_hasChildren, __pyx_k_hasChildren, sizeof(__pyx_k_hasChildren), 0, 0, 1, 1},
    {&__pyx_n_s_hit, __pyx_k_hit, sizeof(__pyx_k_hit), 0, 0, 1, 1},
    {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
    {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
    {&__pyx_n_s_ignoreUnknownCells, __pyx_k_ignoreUnknownCells, sizeof(__pyx_k_ignoreUnknownCells), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_inBBX, __pyx_k_inBBX, sizeof(__pyx_k_inBBX), 0, 0, 1, 1},
    {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
    {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
    {&__pyx_n_s_init_subclass, __pyx_k_init_subclass, sizeof(__pyx_k_init_subclass), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_insertPointCloud, __pyx_k_insertPointCloud, sizeof(__pyx_k_insertPointCloud), 0, 0, 1, 1},
    {&__pyx_n_s_insertPointCloudFast, __pyx_k_insertPointCloudFast, sizeof(__pyx_k_insertPointCloudFast), 0, 0, 1, 1},
    {&__pyx_n_s_insertPointCloudRaysFast, __pyx_k_insertPointCloudRaysFast, sizeof(__pyx_k_insertPointCloudRaysFast), 0, 0, 1, 1},
    {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
    {&__pyx_n_s_isLeaf, __pyx_k_isLeaf, sizeof(__pyx_k_isLeaf), 0, 0, 1, 1},
    {&__pyx_n_s_isNodeAtThreshold, __pyx_k_isNodeAtThreshold, sizeof(__pyx_k_isNodeAtThreshold), 0, 0, 1, 1},
    {&__pyx_n_s_isNodeCollapsible, __pyx_k_isNodeCollapsible, sizeof(__pyx_k_isNodeCollapsible), 0, 0, 1, 1},
    {&__pyx_n_s_isNodeOccupied, __pyx_k_isNodeOccupied, sizeof(__pyx_k_isNodeOccupied), 0, 0, 1, 1},
    {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
    {&__pyx_n_s_is_occupied, __pyx_k_is_occupied, sizeof(__pyx_k_is_occupied), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_iss, __pyx_k_iss, sizeof(__pyx_k_iss), 0, 0, 1, 1},
    {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
    {&__pyx_n_s_itr, __pyx_k_itr, sizeof(__pyx_k_itr), 0, 0, 1, 1},
    {&__pyx_n_s_keep, __pyx_k_keep, sizeof(__pyx_k_keep), 0, 0, 1, 1},
    {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
    {&__pyx_n_s_keyToCoord, __pyx_k_keyToCoord, sizeof(__pyx_k_keyToCoord), 0, 0, 1, 1},
    {&__pyx_n_s_key_in, __pyx_k_key_in, sizeof(__pyx_k_key_in), 0, 0, 1, 1},
    {&__pyx_n_s_key_out, __pyx_k_key_out, sizeof(__pyx_k_key_out), 0, 0, 1, 1},
    {&__pyx_n_s_key_tuple, __pyx_k_key_tuple, sizeof(__pyx_k_key_tuple), 0, 0, 1, 1},
    {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
    {&__pyx_n_s_labels, __pyx_k_labels, sizeof(__pyx_k_labels), 0, 0, 1, 1},
    {&__pyx_n_s_lazy_eval, __pyx_k_lazy_eval, sizeof(__pyx_k_lazy_eval), 0, 0, 1, 1},
    {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
    {&__pyx_n_s_linalg, __pyx_k_linalg, sizeof(__pyx_k_linalg), 0, 0, 1, 1},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_markFreeSpaceAlongRay, __pyx_k_markFreeSpaceAlongRay, sizeof(__pyx_k_markFreeSpaceAlongRay), 0, 0, 1, 1},
    {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
    {&__pyx_n_s_maxDepth, __pyx_k_maxDepth, sizeof(__pyx_k_maxDepth), 0, 0, 1, 1},
    {&__pyx_n_s_maxRange, __pyx_k_maxRange, sizeof(__pyx_k_maxRange), 0, 0, 1, 1},
    {&__pyx_n_s_max_range, __pyx_k_max_range, sizeof(__pyx_k_max_range), 0, 0, 1, 1},
    {&__pyx_n_s_maxdist, __pyx_k_maxdist, sizeof(__pyx_k_maxdist), 0, 0, 1, 1},
    {&__pyx_n_s_maxrange, __pyx_k_maxrange, sizeof(__pyx_k_maxrange), 0, 0, 1, 1},
    {&__pyx_n_s_memoryFullGrid, __pyx_k_memoryFullGrid, sizeof(__pyx_k_memoryFullGrid), 0, 0, 1, 1},
    {&__pyx_n_s_memoryUsage, __pyx_k_memoryUsage, sizeof(__pyx_k_memoryUsage), 0, 0, 1, 1},
    {&__pyx_n_s_memoryUsageNode, __pyx_k_memoryUsageNode, sizeof(__pyx_k_memoryUsageNode), 0, 0, 1, 1},
    {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
    {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
    {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
    {&__pyx_n_s_mro_entries, __pyx_k_mro_entries, sizeof(__pyx_k_mro_entries), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_new_tree, __pyx_k_new_tree, sizeof(__pyx_k_new_tree), 0, 0, 1, 1},
    {&__pyx_n_s_newaxis, __pyx_k_newaxis, sizeof(__pyx_k_newaxis), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_node, __pyx_k_node, sizeof(__pyx_k_node), 0, 0, 1, 1},
    {&__pyx_n_s_nodeHasChildren, __pyx_k_nodeHasChildren, sizeof(__pyx_k_nodeHasChildren), 0, 0, 1, 1},
    {&__pyx_n_s_nonzero, __pyx_k_nonzero, sizeof(__pyx_k_nonzero), 0, 0, 1, 1},
    {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
    {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
    {&__pyx_n_s_num_points, __pyx_k_num_points, sizeof(__pyx_k_num_points), 0, 0, 1, 1},
    {&__pyx_n_s_num_steps, __pyx_k_num_steps, sizeof(__pyx_k_num_steps), 0, 0, 1, 1},
    {&__pyx_n_s_numbers, __pyx_k_numbers, sizeof(__pyx_k_numbers), 0, 0, 1, 1},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_kp_u_numpy__core_multiarray_failed_to, __pyx_k_numpy__core_multiarray_failed_to, sizeof(__pyx_k_numpy__core_multiarray_failed_to), 0, 1, 0, 0},
    {&__pyx_kp_u_numpy__core_umath_failed_to_impo, __pyx_k_numpy__core_umath_failed_to_impo, sizeof(__pyx_k_numpy__core_umath_failed_to_impo), 0, 1, 0, 0},
    {&__pyx_n_s_occupied, __pyx_k_occupied, sizeof(__pyx_k_occupied), 0, 0, 1, 1},
    {&__pyx_n_s_occupied_arr, __pyx_k_occupied_arr, sizeof(__pyx_k_occupied_arr), 0, 0, 1, 1},
    {&__pyx_n_s_octree_read, __pyx_k_octree_read, sizeof(__pyx_k_octree_read), 0, 0, 1, 1},
    {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
    {&__pyx_n_s_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 0, 1, 1},
    {&__pyx_n_s_origin64, __pyx_k_origin64, sizeof(__pyx_k_origin64), 0, 0, 1, 1},
    {&__pyx_n_s_origin_2, __pyx_k_origin_2, sizeof(__pyx_k_origin_2), 0, 0, 1, 1},
    {&__pyx_n_s_origin_c, __pyx_k_origin_c, sizeof(__pyx_k_origin_c), 0, 0, 1, 1},
    {&__pyx_n_s_oss, __pyx_k_oss, sizeof(__pyx_k_oss), 0, 0, 1, 1},
    {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
    {&__pyx_n_s_pc, __pyx_k_pc, sizeof(__pyx_k_pc), 0, 0, 1, 1},
    {&__pyx_n_s_point, __pyx_k_point, sizeof(__pyx_k_point), 0, 0, 1, 1},
    {&__pyx_n_s_point64, __pyx_k_point64, sizeof(__pyx_k_point64), 0, 0, 1, 1},
    {&__pyx_n_s_point_cloud, __pyx_k_point_cloud, sizeof(__pyx_k_point_cloud), 0, 0, 1, 1},
    {&__pyx_n_s_pointcloud, __pyx_k_pointcloud, sizeof(__pyx_k_pointcloud), 0, 0, 1, 1},
    {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
    {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
    {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
    {&__pyx_n_s_prob, __pyx_k_prob, sizeof(__pyx_k_prob), 0, 0, 1, 1},
    {&__pyx_n_s_pruneNode, __pyx_k_pruneNode, sizeof(__pyx_k_pruneNode), 0, 0, 1, 1},
    {&__pyx_n_s_pt, __pyx_k_pt, sizeof(__pyx_k_pt), 0, 0, 1, 1},
    {&__pyx_n_s_pyoctomap_octomap, __pyx_k_pyoctomap_octomap, sizeof(__pyx_k_pyoctomap_octomap), 0, 0, 1, 1},
    {&__pyx_kp_s_pyoctomap_octomap_pyx, __pyx_k_pyoctomap_octomap_pyx, sizeof(__pyx_k_pyoctomap_octomap_pyx), 0, 0, 1, 0},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
    {&__pyx_n_s_r, __pyx_k_r, sizeof(__pyx_k_r), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_raw_dimension, __pyx_k_raw_dimension, sizeof(__pyx_k_raw_dimension), 0, 0, 1, 1},
    {&__pyx_n_s_ray_length, __pyx_k_ray_length, sizeof(__pyx_k_ray_length), 0, 0, 1, 1},
    {&__pyx_n_s_read, __pyx_k_read, sizeof(__pyx_k_read), 0, 0, 1, 1},
    {&__pyx_n_s_readBinary, __pyx_k_readBinary, sizeof(__pyx_k_readBinary), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
    {&__pyx_n_s_resetChangeDetection, __pyx_k_resetChangeDetection, sizeof(__pyx_k_resetChangeDetection), 0, 0, 1, 1},
    {&__pyx_n_s_resolution, __pyx_k_resolution, sizeof(__pyx_k_resolution), 0, 0, 1, 1},
    {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
    {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
    {&__pyx_n_s_ret_2, __pyx_k_ret_2, sizeof(__pyx_k_ret_2), 0, 0, 1, 1},
    {&__pyx_n_s_ret_prune, __pyx_k_ret_prune, sizeof(__pyx_k_ret_prune), 0, 0, 1, 1},
    {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
    {&__pyx_n_s_sample_point, __pyx_k_sample_point, sizeof(__pyx_k_sample_point), 0, 0, 1, 1},
    {&__pyx_n_s_sampled_points, __pyx_k_sampled_points, sizeof(__pyx_k_sampled_points), 0, 0, 1, 1},
    {&__pyx_n_s_search, __pyx_k_search, sizeof(__pyx_k_search), 0, 0, 1, 1},
    {&__pyx_n_s_search_key, __pyx_k_search_key, sizeof(__pyx_k_search_key), 0, 0, 1, 1},
    {&__pyx_n_s_search_point, __pyx_k_search_point, sizeof(__pyx_k_search_point), 0, 0, 1, 1},
    {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
    {&__pyx_n_s_sensor_origin, __pyx_k_sensor_origin, sizeof(__pyx_k_sensor_origin), 0, 0, 1, 1},
    {&__pyx_n_s_setBBXMax, __pyx_k_setBBXMax, sizeof(__pyx_k_setBBXMax), 0, 0, 1, 1},
    {&__pyx_n_s_setBBXMin, __pyx_k_setBBXMin, sizeof(__pyx_k_setBBXMin), 0, 0, 1, 1},
    {&__pyx_n_s_setClampingThresMax, __pyx_k_setClampingThresMax, sizeof(__pyx_k_setClampingThresMax), 0, 0, 1, 1},
    {&__pyx_n_s_setClampingThresMin, __pyx_k_setClampingThresMin, sizeof(__pyx_k_setClampingThresMin), 0, 0, 1, 1},
    {&__pyx_n_s_setLogOdds, __pyx_k_setLogOdds, sizeof(__pyx_k_setLogOdds), 0, 0, 1, 1},
    {&__pyx_n_s_setOccupancyThres, __pyx_k_setOccupancyThres, sizeof(__pyx_k_setOccupancyThres), 0, 0, 1, 1},
    {&__pyx_n_s_setProbHit, __pyx_k_setProbHit, sizeof(__pyx_k_setProbHit), 0, 0, 1, 1},
    {&__pyx_n_s_setProbMiss, __pyx_k_setProbMiss, sizeof(__pyx_k_setProbMiss), 0, 0, 1, 1},
    {&__pyx_n_s_setResolution, __pyx_k_setResolution, sizeof(__pyx_k_setResolution), 0, 0, 1, 1},
    {&__pyx_n_s_setValue, __pyx_k_setValue, sizeof(__pyx_k_setValue), 0, 0, 1, 1},
    {&__pyx_n_s_set_name, __pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_startswith, __pyx_k_startswith, sizeof(__pyx_k_startswith), 0, 0, 1, 1},
    {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
    {&__pyx_n_s_step_size, __pyx_k_step_size, sizeof(__pyx_k_step_size), 0, 0, 1, 1},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_success, __pyx_k_success, sizeof(__pyx_k_success), 0, 0, 1, 1},
    {&__pyx_n_s_success_count, __pyx_k_success_count, sizeof(__pyx_k_success_count), 0, 0, 1, 1},
    {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
    {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
    {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_thresProb, __pyx_k_thresProb, sizeof(__pyx_k_thresProb), 0, 0, 1, 1},
    {&__pyx_n_s_toMaxLikelihood, __pyx_k_toMaxLikelihood, sizeof(__pyx_k_toMaxLikelihood), 0, 0, 1, 1},
    {&__pyx_n_s_treatUnknownAsOccupied, __pyx_k_treatUnknownAsOccupied, sizeof(__pyx_k_treatUnknownAsOccupied), 0, 0, 1, 1},
    {&__pyx_n_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 1},
    {&__pyx_n_s_unique_keys, __pyx_k_unique_keys, sizeof(__pyx_k_unique_keys), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_updateInnerOccupancy, __pyx_k_updateInnerOccupancy, sizeof(__pyx_k_updateInnerOccupancy), 0, 0, 1, 1},
    {&__pyx_n_s_updateNode, __pyx_k_updateNode, sizeof(__pyx_k_updateNode), 0, 0, 1, 1},
    {&__pyx_n_s_updateNodes, __pyx_k_updateNodes, sizeof(__pyx_k_updateNodes), 0, 0, 1, 1},
    {&__pyx_n_s_updateOccupancyChildren, __pyx_k_updateOccupancyChildren, sizeof(__pyx_k_updateOccupancyChildren), 0, 0, 1, 1},
    {&__pyx_n_s_updateRealDist, __pyx_k_updateRealDist, sizeof(__pyx_k_updateRealDist), 0, 0, 1, 1},
    {&__pyx_n_s_update_inner_occupancy, __pyx_k_update_inner_occupancy, sizeof(__pyx_k_update_inner_occupancy), 0, 0, 1, 1},
    {&__pyx_n_s_update_key, __pyx_k_update_key, sizeof(__pyx_k_update_key), 0, 0, 1, 1},
    {&__pyx_n_s_useBBXLimit, __pyx_k_useBBXLimit, sizeof(__pyx_k_useBBXLimit), 0, 0, 1, 1},
    {&__pyx_kp_u_utf_8, __pyx_k_utf_8, sizeof(__pyx_k_utf_8), 0, 1, 0, 0},
    {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
    {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
    {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
    {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
    {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
    {&__pyx_n_s_writeBinary, __pyx_k_writeBinary, sizeof(__pyx_k_writeBinary), 0, 0, 1, 1},
    {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
    {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
    {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
    {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(1, 196, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 713, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(1, 750, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 1266, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(1, 1415, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1010, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1010
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_numpy__core_multiarray_failed_to); if (unlikely(!__pyx_tuple_)) __PYX_ERR(2, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../../../../../../../home/lespi/.local/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1016
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_numpy__core_umath_failed_to_impo); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(2, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pyoctomap/octomap.pyx":451
 *     """
 *     cdef defs.istringstream iss
 *     cdef OcTree tree = OcTree(0.1)             # <<<<<<<<<<<<<<
 *     cdef string c_filename = filename.encode('utf-8')
 *     cdef defs.OcTree* new_tree = NULL
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_float_0_1); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "pyoctomap/octomap.pyx":586
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _origin = np.ascontiguousarray(origin, dtype=np.float64)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _direction = np.ascontiguousarray(direction, dtype=np.float64)
 *         cdef np.ndarray[DOUBLE_t, ndim=1] _end = np.zeros(3, dtype=np.float64)             # <<<<<<<<<<<<<<
 *         hit = self.thisptr.castRay(
 *             defs.point3d(_origin[0], _origin[1], _origin[2]),
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "pyoctomap/octomap.pyx":595
 *         )
 *         if hit:
 *             _end[0:3] = e.x(), e.y(), e.z()             # <<<<<<<<<<<<<<
 *             # Copy back into provided end buffer (dtype-agnostic)
 *             try:
 */
  __pyx_slice__8 = PySlice_New(__pyx_int_0, __pyx_int_3, Py_None); if (unlikely(!__pyx_slice__8)) __PYX_ERR(1, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__8);
  __Pyx_GIVEREF(__pyx_slice__8);

  /* "pyoctomap/octomap.pyx":764
 *         cdef np.ndarray[DOUBLE_t, ndim=2] empty_arr
 *         if len(occupied) == 0:
 *             occupied_arr = np.zeros((0, 3), dtype=float)             # <<<<<<<<<<<<<<
 *         else:
 *             occupied_arr = np.concatenate(occupied, axis=0)
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_3); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(1, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_tuple__9); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "pyoctomap/octomap.pyx":1156
 *                 raise NullPointerException
 *         else:
 *             raise TypeError("Expected OcTreeNode")             # <<<<<<<<<<<<<<
 * 
 *     def dynamicEDT_generate(self, maxdist,
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_Expected_OcTreeNode); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "pyoctomap/octomap.pyx":18
 *     Null pointer exception
 *     """
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_init, 18, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(1, 18, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":49
 *         return f"OcTreeKey({self.thisptr.k[0]}, {self.thisptr.k[1]}, {self.thisptr.k[2]})"
 * 
 *     def computeChildIdx(self, OcTreeKey key, int depth):             # <<<<<<<<<<<<<<
 *         cdef unsigned int result
 *         cdef defs.OcTreeKey key_in
 */
  __pyx_tuple__14 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_depth, __pyx_n_s_result, __pyx_n_s_key_in); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__14, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_computeChildIdx, 49, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(1, 49, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":57
 *         result = defs.computeChildIdx(key_in, depth)
 *         return result
 *     def computeIndexKey(self, unsigned int level, OcTreeKey key):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.OcTreeKey result
 */
  __pyx_tuple__16 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_level, __pyx_n_s_key, __pyx_n_s_key_in, __pyx_n_s_result); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__16, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_computeIndexKey, 57, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(1, 57, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_tuple__19 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":77
 *     def __dealloc__(self):
 *         pass
 *     def addValue(self, float p):             # <<<<<<<<<<<<<<
 *         """
 *         adds p to the node's logOdds value (with no boundary / threshold checking!)
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_p); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_addValue, 77, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(1, 77, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":85
 *         else:
 *             raise NullPointerException
 *     def childExists(self, unsigned int i):             # <<<<<<<<<<<<<<
 *         """
 *         Safe test to check of the i-th child exists,
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_i); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_childExists, 85, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(1, 85, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":94
 *         else:
 *             raise NullPointerException
 *     def getValue(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getValue()
 */
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getValue, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(1, 94, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":99
 *         else:
 *             raise NullPointerException
 *     def setValue(self, float v):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.setValue(v)
 */
  __pyx_tuple__26 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_v); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_setValue, 99, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(1, 99, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":104
 *         else:
 *             raise NullPointerException
 *     def getOccupancy(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getOccupancy()
 */
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getOccupancy, 104, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(1, 104, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":109
 *         else:
 *             raise NullPointerException
 *     def getLogOdds(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getLogOdds()
 */
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getLogOdds, 109, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(1, 109, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":114
 *         else:
 *             raise NullPointerException
 *     def setLogOdds(self, float l):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.setLogOdds(l)
 */
  __pyx_tuple__30 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_l); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_setLogOdds, 114, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(1, 114, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":119
 *         else:
 *             raise NullPointerException
 *     def hasChildren(self):             # <<<<<<<<<<<<<<
 *         """
 *         Deprecated: Use tree.nodeHasChildren(node) instead.
 */
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_hasChildren, 119, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(1, 119, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":128
 *         else:
 *             raise NullPointerException
 *     def getMaxChildLogOdds(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getMaxChildLogOdds()
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getMaxChildLogOdds, 128, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(1, 128, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":133
 *         else:
 *             raise NullPointerException
 *     def updateOccupancyChildren(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.updateOccupancyChildren()
 */
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_updateOccupancyChildren, 133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(1, 133, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":221
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getCoordinate, 221, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(1, 221, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":226
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getSize, 226, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(1, 226, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":229
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getDepth, 229, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(1, 229, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":232
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         if self._current_node is None:
 *             return True
 */
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_isLeaf, 232, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(1, 232, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":318
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getCoordinate, 318, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(1, 318, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":323
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getSize, 323, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(1, 323, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":326
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getDepth, 326, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(1, 326, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":329
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:
 */
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_isLeaf, 329, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(1, 329, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":420
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getCoordinate, 420, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(1, 420, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":425
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getSize, 425, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(1, 425, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":428
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getDepth, 428, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(1, 428, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":431
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:
 */
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_isLeaf, 431, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(1, 431, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(0, 3, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":445
 *         return self._is_end
 * 
 * def _octree_read(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read the file header, create the appropriate class and deserialize.
 */
  __pyx_tuple__55 = PyTuple_Pack(5, __pyx_n_s_filename, __pyx_n_s_iss, __pyx_n_s_tree, __pyx_n_s_c_filename, __pyx_n_s_new_tree); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_octree_read, 445, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(1, 445, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":500
 *             self.thisptr = NULL
 * 
 *     def adjustKeyAtDepth(self, OcTreeKey key, depth):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         key_in.k[0] = key[0]
 */
  __pyx_tuple__57 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_depth, __pyx_n_s_key_in, __pyx_n_s_key_out, __pyx_n_s_res); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_adjustKeyAtDepth, 500, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(1, 500, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":512
 *         return res
 * 
 *     def bbxSet(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.bbxSet()
 * 
 */
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_bbxSet, 512, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(1, 512, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":515
 *         return self.thisptr.bbxSet()
 * 
 *     def calcNumNodes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.calcNumNodes()
 * 
 */
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_calcNumNodes, 515, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(1, 515, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":518
 *         return self.thisptr.calcNumNodes()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clear()
 *         self._mod_version += 1
 */
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_clear, 518, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(1, 518, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":522
 *         self._mod_version += 1
 * 
 *     def coordToKey(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key
 *         if depth is None:
 */
  __pyx_tuple__62 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_coord, __pyx_n_s_depth, __pyx_n_s_key, __pyx_n_s_res); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_coordToKey, 522, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(1, 522, __pyx_L1_error)
  __pyx_tuple__64 = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "pyoctomap/octomap.pyx":539
 *         return res
 * 
 *     def coordToKeyChecked(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key
 *         cdef cppbool chk
 */
  __pyx_tuple__65 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_coord, __pyx_n_s_depth, __pyx_n_s_key, __pyx_n_s_chk, __pyx_n_s_res); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(1, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_coordToKeyChecked, 539, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(1, 539, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":562
 *             return chk, None
 * 
 *     def deleteNode(self, np.ndarray[DOUBLE_t, ndim=1] value, depth=1):             # <<<<<<<<<<<<<<
 *         cdef cppbool _ret = self.thisptr.deleteNode(defs.point3d(value[0],
 *                                                                  value[1],
 */
  __pyx_tuple__67 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_depth, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_deleteNode, 562, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(1, 562, __pyx_L1_error)
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "pyoctomap/octomap.pyx":570
 *         return _ret
 * 
 *     def castRay(self, origin,             # <<<<<<<<<<<<<<
 *                 direction,
 *                 end,
 */
  __pyx_tuple__70 = PyTuple_Pack(11, __pyx_n_s_self, __pyx_n_s_origin, __pyx_n_s_direction, __pyx_n_s_end, __pyx_n_s_ignoreUnknownCells, __pyx_n_s_maxRange, __pyx_n_s_e, __pyx_n_s_hit, __pyx_n_s_origin_2, __pyx_n_s_direction_2, __pyx_n_s_end_2); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_castRay, 570, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(1, 570, __pyx_L1_error)
  __pyx_tuple__72 = PyTuple_Pack(2, Py_False, __pyx_float_neg_1_0); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "pyoctomap/octomap.pyx":604
 *         return hit
 * 
 *     def read(self, filename):             # <<<<<<<<<<<<<<
 *         cdef string c_filename = filename.encode('utf-8')
 *         cdef defs.OcTree* result
 */
  __pyx_tuple__73 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_filename, __pyx_n_s_c_filename, __pyx_n_s_result, __pyx_n_s_new_tree); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_read, 604, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(1, 604, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":616
 *         return None
 * 
 *     def write(self, filename=None):             # <<<<<<<<<<<<<<
 *         """
 *         Write file header and complete tree to file/stream (serialization)
 */
  __pyx_tuple__75 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_filename, __pyx_n_s_oss, __pyx_n_s_c_filename, __pyx_n_s_ret_2); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_write, 616, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(1, 616, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":632
 *                 return False
 * 
 *     def readBinary(self, filename):             # <<<<<<<<<<<<<<
 *         # Treat input as a filesystem path; accept str or bytes
 *         cdef string c_filename
 */
  __pyx_tuple__77 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_filename, __pyx_n_s_c_filename); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_readBinary, 632, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(1, 632, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":641
 *         return self.thisptr.readBinary(c_filename)
 * 
 *     def writeBinary(self, filename=None):             # <<<<<<<<<<<<<<
 *         cdef defs.ostringstream oss
 *         cdef string c_filename
 */
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_writeBinary, 641, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(1, 641, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":654
 *                 return False
 * 
 *     def isNodeOccupied(self, node):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d search_point
 *         cdef defs.OcTreeNode* found_node
 */
  __pyx_tuple__80 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_node, __pyx_n_s_search_point, __pyx_n_s_found_node, __pyx_n_s_coord, __pyx_n_s_result); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_isNodeOccupied, 654, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(1, 654, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":680
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")
 * 
 *     def isNodeAtThreshold(self, node):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d search_point
 *         cdef defs.OcTreeNode* found_node
 */
  __pyx_tuple__82 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_node, __pyx_n_s_search_point, __pyx_n_s_found_node, __pyx_n_s_coord); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_isNodeAtThreshold, 680, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(1, 680, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":705
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")
 * 
 *     def getLabels(self, np.ndarray[DOUBLE_t, ndim=2] points):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[DOUBLE_t, ndim=1] pt
 */
  __pyx_tuple__84 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_points, __pyx_n_s_i, __pyx_n_s_pt, __pyx_n_s_key, __pyx_n_s_node, __pyx_n_s_labels); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(1, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getLabels, 705, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(1, 705, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":725
 *         return labels
 * 
 *     def extractPointCloud(self):             # <<<<<<<<<<<<<<
 *         cdef float resolution = self.getResolution()
 * 
 */
  __pyx_tuple__86 = PyTuple_Pack(16, __pyx_n_s_self, __pyx_n_s_resolution, __pyx_n_s_occupied, __pyx_n_s_empty, __pyx_n_s_it, __pyx_n_s_size, __pyx_n_s_is_occupied, __pyx_n_s_center, __pyx_n_s_origin, __pyx_n_s_indices, __pyx_n_s_points, __pyx_n_s_keep, __pyx_n_s_dimension, __pyx_n_s_raw_dimension, __pyx_n_s_occupied_arr, __pyx_n_s_empty_arr); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(1, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 16, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_extractPointCloud, 725, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(1, 725, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":773
 *         return occupied_arr, empty_arr
 * 
 *     def insertPointCloud(self,             # <<<<<<<<<<<<<<
 *                          pointcloud,
 *                          origin,
 */
  __pyx_tuple__88 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_pointcloud, __pyx_n_s_origin, __pyx_n_s_maxrange, __pyx_n_s_lazy_eval, __pyx_n_s_discretize, __pyx_n_s_pc, __pyx_n_s_p); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(1, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_insertPointCloud, 773, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(1, 773, __pyx_L1_error)
  __pyx_tuple__90 = PyTuple_Pack(3, __pyx_float_neg_1_, Py_False, Py_False); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(1, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "pyoctomap/octomap.pyx":808
 *                                       bool(discretize))
 * 
 *     def begin_tree(self, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified tree iterator"""
 *         return SimpleTreeIterator(self, maxDepth)
 */
  __pyx_tuple__91 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_maxDepth); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(1, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_begin_tree, 808, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(1, 808, __pyx_L1_error)
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(1, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "pyoctomap/octomap.pyx":812
 *         return SimpleTreeIterator(self, maxDepth)
 * 
 *     def begin_leafs(self, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified leaf iterator"""
 *         return SimpleLeafIterator(self, maxDepth)
 */
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_begin_leafs, 812, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(1, 812, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":816
 *         return SimpleLeafIterator(self, maxDepth)
 * 
 *     def begin_leafs_bbx(self, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified leaf iterator for a bounding box"""
 *         return SimpleLeafBBXIterator(self, bbx_min, bbx_max, maxDepth)
 */
  __pyx_tuple__95 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_bbx_min, __pyx_n_s_bbx_max, __pyx_n_s_maxDepth); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(1, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_begin_leafs_bbx, 816, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(1, 816, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":820
 *         return SimpleLeafBBXIterator(self, bbx_min, bbx_max, maxDepth)
 * 
 *     def end_tree(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for tree traversal"""
 *         itr = SimpleTreeIterator(self)
 */
  __pyx_tuple__97 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_itr); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(1, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__97, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_end_tree, 820, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(1, 820, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":826
 *         return itr
 * 
 *     def end_leafs(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for leaf traversal"""
 *         itr = SimpleLeafIterator(self)
 */
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__97, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_end_leafs, 826, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(1, 826, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":832
 *         return itr
 * 
 *     def end_leafs_bbx(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for leaf bounding box traversal"""
 *         itr = SimpleLeafBBXIterator(self, np.array([0.0, 0.0, 0.0], dtype=np.float64), np.array([1.0, 1.0, 1.0], dtype=np.float64))
 */
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__97, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_end_leafs_bbx, 832, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(1, 832, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":839
 *         return itr
 * 
 *     def getBBXBounds(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXBounds()
 *         return np.array((p.x(), p.y(), p.z()))
 */
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getBBXBounds, 839, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(1, 839, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":843
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXCenter(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXCenter()
 *         return np.array((p.x(), p.y(), p.z()))
 */
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getBBXCenter, 843, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(1, 843, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":847
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXMax(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXMax()
 *         return np.array((p.x(), p.y(), p.z()))
 */
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getBBXMax, 847, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(1, 847, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":851
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXMin(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXMin()
 *         return np.array((p.x(), p.y(), p.z()))
 */
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getBBXMin, 851, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(1, 851, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":855
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getRoot(self):             # <<<<<<<<<<<<<<
 *         node = OcTreeNode()
 *         node.thisptr = self.thisptr.getRoot()
 */
  __pyx_tuple__105 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_node); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getRoot, 855, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(1, 855, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":860
 *         return node
 * 
 *     def getNumLeafNodes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getNumLeafNodes()
 * 
 */
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getNumLeafNodes, 860, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(1, 860, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":863
 *         return self.thisptr.getNumLeafNodes()
 * 
 *     def getResolution(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getResolution()
 * 
 */
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getResolution, 863, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(1, 863, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":866
 *         return self.thisptr.getResolution()
 * 
 *     def getTreeDepth(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getTreeDepth()
 * 
 */
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getTreeDepth, 866, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(1, 866, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":869
 *         return self.thisptr.getTreeDepth()
 * 
 *     def getTreeType(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getTreeType().c_str()
 * 
 */
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getTreeType, 869, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(1, 869, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":872
 *         return self.thisptr.getTreeType().c_str()
 * 
 *     def inBBX(self, np.ndarray[DOUBLE_t, ndim=1] p):             # <<<<<<<<<<<<<<
 *         return self.thisptr.inBBX(defs.point3d(p[0], p[1], p[2]))
 * 
 */
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_inBBX, 872, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(1, 872, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":875
 *         return self.thisptr.inBBX(defs.point3d(p[0], p[1], p[2]))
 * 
 *     def keyToCoord(self, OcTreeKey key, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.point3d p = defs.point3d()
 */
  __pyx_tuple__112 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_key, __pyx_n_s_depth, __pyx_n_s_key_in, __pyx_n_s_p); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(1, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_keyToCoord, 875, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(1, 875, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":887
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def memoryFullGrid(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryFullGrid()
 * 
 */
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_memoryFullGrid, 887, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(1, 887, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":890
 *         return self.thisptr.memoryFullGrid()
 * 
 *     def memoryUsage(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryUsage()
 * 
 */
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_memoryUsage, 890, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(1, 890, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":893
 *         return self.thisptr.memoryUsage()
 * 
 *     def memoryUsageNode(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryUsageNode()
 * 
 */
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_memoryUsageNode, 893, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(1, 893, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":896
 *         return self.thisptr.memoryUsageNode()
 * 
 *     def resetChangeDetection(self):             # <<<<<<<<<<<<<<
 *         """
 *         Reset the set of changed keys. Call this after you obtained all changed nodes.
 */
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_resetChangeDetection, 896, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(1, 896, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":904
 * 
 * 
 *     def search(self, value, depth=0):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey search_key
 *         node = OcTreeNode()
 */
  __pyx_tuple__118 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_depth, __pyx_n_s_search_key, __pyx_n_s_node); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(1, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_search, 904, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(1, 904, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":923
 *         return node
 * 
 *     def setBBXMax(self, np.ndarray[DOUBLE_t, ndim=1] max):             # <<<<<<<<<<<<<<
 *         """
 *         sets the maximum for a query bounding box to use
 */
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_max); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(1, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_setBBXMax, 923, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(1, 923, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":929
 *         self.thisptr.setBBXMax(defs.point3d(max[0], max[1], max[2]))
 * 
 *     def setBBXMin(self, np.ndarray[DOUBLE_t, ndim=1] min):             # <<<<<<<<<<<<<<
 *         """
 *         sets the minimum for a query bounding box to use
 */
  __pyx_tuple__122 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_min); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(1, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_setBBXMin, 929, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(1, 929, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":935
 *         self.thisptr.setBBXMin(defs.point3d(min[0], min[1], min[2]))
 * 
 *     def setResolution(self, double r):             # <<<<<<<<<<<<<<
 *         """
 *         Change the resolution of the octree, scaling all voxels. This will not preserve the (metric) scale!
 */
  __pyx_tuple__124 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_r); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(1, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_setResolution, 935, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(1, 935, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":942
 *         self._mod_version += 1
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * 
 */
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_size, 942, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(1, 942, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":945
 *         return self.thisptr.size()
 * 
 *     def toMaxLikelihood(self):             # <<<<<<<<<<<<<<
 *         """
 *         Creates the maximum likelihood map by calling toMaxLikelihood on all tree nodes,
 */
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_toMaxLikelihood, 945, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(1, 945, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":953
 *         self._mod_version += 1
 * 
 *     def updateNodes(self, values, update, lazy_eval=False):             # <<<<<<<<<<<<<<
 *         """
 *         Integrate occupancy measurements and Manipulate log_odds value of voxel directly.
 */
  __pyx_tuple__128 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_values, __pyx_n_s_update, __pyx_n_s_lazy_eval, __pyx_n_s_update_key, __pyx_n_s_v); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(1, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_updateNodes, 953, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(1, 953, __pyx_L1_error)
  __pyx_tuple__130 = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(1, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "pyoctomap/octomap.pyx":994
 *         self._mod_version += 1
 * 
 *     def updateNode(self, value, update, lazy_eval=False):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey update_key # Moved to top
 *         """
 */
  __pyx_tuple__131 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_value, __pyx_n_s_update, __pyx_n_s_lazy_eval, __pyx_n_s_update_key, __pyx_n_s_node); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(1, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__131, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_updateNode, 994, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) __PYX_ERR(1, 994, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1031
 *         return node
 * 
 *     def updateInnerOccupancy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Updates the occupancy of all inner nodes to reflect their children's occupancy.
 */
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_updateInnerOccupancy, 1031, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(1, 1031, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1038
 *         self._mod_version += 1
 * 
 *     def useBBXLimit(self, enable):             # <<<<<<<<<<<<<<
 *         """
 *         use or ignore BBX limit (default: ignore)
 */
  __pyx_tuple__134 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_enable); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(1, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_useBBXLimit, 1038, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(1, 1038, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1044
 *         self.thisptr.useBBXLimit(bool(enable))
 * 
 *     def volume(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.volume()
 * 
 */
  __pyx_codeobj__136 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_volume, 1044, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__136)) __PYX_ERR(1, 1044, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1047
 *         return self.thisptr.volume()
 * 
 *     def getClampingThresMax(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMax()
 * 
 */
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getClampingThresMax, 1047, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(1, 1047, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1050
 *         return self.thisptr.getClampingThresMax()
 * 
 *     def getClampingThresMaxLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMaxLog()
 * 
 */
  __pyx_codeobj__138 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getClampingThresMaxLog, 1050, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__138)) __PYX_ERR(1, 1050, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1053
 *         return self.thisptr.getClampingThresMaxLog()
 * 
 *     def getClampingThresMin(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMin()
 * 
 */
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getClampingThresMin, 1053, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(1, 1053, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1056
 *         return self.thisptr.getClampingThresMin()
 * 
 *     def getClampingThresMinLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMinLog()
 * 
 */
  __pyx_codeobj__140 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getClampingThresMinLog, 1056, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__140)) __PYX_ERR(1, 1056, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1059
 *         return self.thisptr.getClampingThresMinLog()
 * 
 *     def getOccupancyThres(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getOccupancyThres()
 * 
 */
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getOccupancyThres, 1059, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(1, 1059, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1062
 *         return self.thisptr.getOccupancyThres()
 * 
 *     def getOccupancyThresLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getOccupancyThresLog()
 * 
 */
  __pyx_codeobj__142 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getOccupancyThresLog, 1062, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__142)) __PYX_ERR(1, 1062, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1065
 *         return self.thisptr.getOccupancyThresLog()
 * 
 *     def getProbHit(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbHit()
 * 
 */
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getProbHit, 1065, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(1, 1065, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1068
 *         return self.thisptr.getProbHit()
 * 
 *     def getProbHitLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbHitLog()
 * 
 */
  __pyx_codeobj__144 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getProbHitLog, 1068, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__144)) __PYX_ERR(1, 1068, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1071
 *         return self.thisptr.getProbHitLog()
 * 
 *     def getProbMiss(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbMiss()
 * 
 */
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getProbMiss, 1071, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(1, 1071, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1074
 *         return self.thisptr.getProbMiss()
 * 
 *     def getProbMissLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbMissLog()
 * 
 */
  __pyx_codeobj__146 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getProbMissLog, 1074, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__146)) __PYX_ERR(1, 1074, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1077
 *         return self.thisptr.getProbMissLog()
 * 
 *     def setClampingThresMax(self, double thresProb):             # <<<<<<<<<<<<<<
 *         self.thisptr.setClampingThresMax(thresProb)
 * 
 */
  __pyx_tuple__147 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_thresProb); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(1, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);
  __pyx_codeobj__148 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__147, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_setClampingThresMax, 1077, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__148)) __PYX_ERR(1, 1077, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1080
 *         self.thisptr.setClampingThresMax(thresProb)
 * 
 *     def setClampingThresMin(self, double thresProb):             # <<<<<<<<<<<<<<
 *         self.thisptr.setClampingThresMin(thresProb)
 * 
 */
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__147, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_setClampingThresMin, 1080, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(1, 1080, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1083
 *         self.thisptr.setClampingThresMin(thresProb)
 * 
 *     def setOccupancyThres(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setOccupancyThres(prob)
 * 
 */
  __pyx_tuple__150 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_prob); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(1, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_setOccupancyThres, 1083, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(1, 1083, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1086
 *         self.thisptr.setOccupancyThres(prob)
 * 
 *     def setProbHit(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setProbHit(prob)
 * 
 */
  __pyx_codeobj__152 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_setProbHit, 1086, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__152)) __PYX_ERR(1, 1086, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1089
 *         self.thisptr.setProbHit(prob)
 * 
 *     def setProbMiss(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setProbMiss(prob)
 * 
 */
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_setProbMiss, 1089, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(1, 1089, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1092
 *         self.thisptr.setProbMiss(prob)
 * 
 *     def getMetricSize(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */
  __pyx_tuple__154 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(1, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getMetricSize, 1092, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(1, 1092, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1099
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def getMetricMin(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */
  __pyx_codeobj__156 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getMetricMin, 1099, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__156)) __PYX_ERR(1, 1099, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1106
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def getMetricMax(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getMetricMax, 1106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(1, 1106, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1113
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def expandNode(self, node):             # <<<<<<<<<<<<<<
 *         self.thisptr.expandNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1
 */
  __pyx_codeobj__158 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_expandNode, 1113, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__158)) __PYX_ERR(1, 1113, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1117
 *         self._mod_version += 1
 * 
 *     def createNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.createNodeChild((<OcTreeNode>node).thisptr, idx)
 */
  __pyx_tuple__159 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_node, __pyx_n_s_idx, __pyx_n_s_child); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(1, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__159, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_createNodeChild, 1117, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(1, 1117, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1123
 *         return child
 * 
 *     def getNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.getNodeChild((<OcTreeNode>node).thisptr, idx)
 */
  __pyx_codeobj__161 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__159, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_getNodeChild, 1123, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__161)) __PYX_ERR(1, 1123, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1128
 *         return child
 * 
 *     def isNodeCollapsible(self, node):             # <<<<<<<<<<<<<<
 *         return self.thisptr.isNodeCollapsible((<OcTreeNode>node).thisptr)
 * 
 */
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_isNodeCollapsible, 1128, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(1, 1128, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1131
 *         return self.thisptr.isNodeCollapsible((<OcTreeNode>node).thisptr)
 * 
 *     def deleteNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         self.thisptr.deleteNodeChild((<OcTreeNode>node).thisptr, idx)
 *         self._mod_version += 1
 */
  __pyx_tuple__163 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_node, __pyx_n_s_idx); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(1, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_deleteNodeChild, 1131, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(1, 1131, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1135
 *         self._mod_version += 1
 * 
 *     def pruneNode(self, node):             # <<<<<<<<<<<<<<
 *         cdef cppbool _ret_prune = self.thisptr.pruneNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1
 */
  __pyx_tuple__165 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_node, __pyx_n_s_ret_prune); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(1, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_pruneNode, 1135, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) __PYX_ERR(1, 1135, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1140
 *         return _ret_prune
 * 
 *     def nodeHasChildren(self, node):             # <<<<<<<<<<<<<<
 *         """
 *         Check if a node has children (recommended replacement for node.hasChildren()).
 */
  __pyx_codeobj__167 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_nodeHasChildren, 1140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__167)) __PYX_ERR(1, 1140, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1158
 *             raise TypeError("Expected OcTreeNode")
 * 
 *     def dynamicEDT_generate(self, maxdist,             # <<<<<<<<<<<<<<
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_min,
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_max,
 */
  __pyx_tuple__168 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_maxdist, __pyx_n_s_bbx_min, __pyx_n_s_bbx_max, __pyx_n_s_treatUnknownAsOccupied); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(1, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);
  __pyx_codeobj__169 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__168, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_dynamicEDT_generate, 1158, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__169)) __PYX_ERR(1, 1158, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1173
 *                                                 <cppbool?>treatUnknownAsOccupied)
 * 
 *     def dynamicEDT_checkConsistency(self):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             return self.edtptr.checkConsistency()
 */
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_dynamicEDT_checkConsistency, 1173, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(1, 1173, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1179
 *             raise NullPointerException
 * 
 *     def dynamicEDT_update(self, updateRealDist):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             self.edtptr.update(<cppbool?>updateRealDist)
 */
  __pyx_tuple__171 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_updateRealDist); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(1, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_dynamicEDT_update, 1179, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(1, 1179, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1185
 *             raise NullPointerException
 * 
 *     def dynamicEDT_getMaxDist(self):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             return self.edtptr.getMaxDist()
 */
  __pyx_codeobj__173 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_dynamicEDT_getMaxDist, 1185, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__173)) __PYX_ERR(1, 1185, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1191
 *             raise NullPointerException
 * 
 *     def dynamicEDT_getDistance(self, p):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             if isinstance(p, OcTreeKey):
 */
  __pyx_codeobj__174 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_dynamicEDT_getDistance, 1191, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__174)) __PYX_ERR(1, 1191, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1204
 *             raise NullPointerException
 * 
 *     def addPointWithRayCasting(self,             # <<<<<<<<<<<<<<
 *                               point,
 *                               sensor_origin,
 */
  __pyx_tuple__175 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_point, __pyx_n_s_sensor_origin, __pyx_n_s_update_inner_occupancy, __pyx_n_s_point64, __pyx_n_s_origin64, __pyx_n_s_success); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(1, 1204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  __pyx_codeobj__176 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__175, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_addPointWithRayCasting, 1204, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__176)) __PYX_ERR(1, 1204, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1234
 *         return success
 * 
 *     def markFreeSpaceAlongRay(self,             # <<<<<<<<<<<<<<
 *                              origin,
 *                              end_point,
 */
  __pyx_tuple__177 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_origin, __pyx_n_s_end_point, __pyx_n_s_step_size, __pyx_n_s_resolution, __pyx_n_s_step, __pyx_n_s_direction, __pyx_n_s_ray_length, __pyx_n_s_num_steps, __pyx_n_s_i, __pyx_n_s_t, __pyx_n_s_sample_point); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(1, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_codeobj__178 = (PyObject*)__Pyx_PyCode_New(4, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__177, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_markFreeSpaceAlongRay, 1234, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__178)) __PYX_ERR(1, 1234, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1361
 *             self.updateNode(sample_point, False)  # Mark as free
 * 
 *     def addPointCloudWithRayCasting(self,             # <<<<<<<<<<<<<<
 *                                    point_cloud,
 *                                    sensor_origin,
 */
  __pyx_tuple__179 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_point_cloud, __pyx_n_s_sensor_origin, __pyx_n_s_max_range, __pyx_n_s_update_inner_occupancy, __pyx_n_s_discretize, __pyx_n_s_success_count, __pyx_n_s_i, __pyx_n_s_num_points, __pyx_n_s_point, __pyx_n_s_filtered_points, __pyx_n_s_success, __pyx_n_s_distances, __pyx_n_s_e); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(1, 1361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);
  __pyx_codeobj__180 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__179, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_addPointCloudWithRayCasting, 1361, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__180)) __PYX_ERR(1, 1361, __pyx_L1_error)
  __pyx_tuple__181 = PyTuple_Pack(3, __pyx_float_neg_1_0, Py_True, Py_False); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(1, 1361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);

  /* "pyoctomap/octomap.pyx":1477
 *         return success_count
 * 
 *     def _discretizePointCloud(self, np.ndarray[DOUBLE_t, ndim=2] point_cloud, bint checked=True):             # <<<<<<<<<<<<<<
 *         """
 *         Discretize points to unique octree keys (reduces duplicates for batching).
 */
  __pyx_tuple__182 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_point_cloud, __pyx_n_s_checked, __pyx_n_s_i, __pyx_n_s_num_points, __pyx_n_s_point, __pyx_n_s_unique_keys, __pyx_n_s_discrete_points, __pyx_n_s_key, __pyx_n_s_key_tuple); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(1, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__182, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_discretizePointCloud, 1477, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) __PYX_ERR(1, 1477, __pyx_L1_error)
  __pyx_tuple__184 = PyTuple_Pack(1, Py_True); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(1, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);

  /* "pyoctomap/octomap.pyx":1541
 *         # No return; assume success
 * 
 *     def insertPointCloudFast(self,             # <<<<<<<<<<<<<<
 *                          point_cloud,
 *                          sensor_origin,
 */
  __pyx_tuple__185 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_point_cloud, __pyx_n_s_sensor_origin, __pyx_n_s_max_range, __pyx_n_s_discretize, __pyx_n_s_lazy_eval, __pyx_n_s_num_points, __pyx_n_s_success); if (unlikely(!__pyx_tuple__185)) __PYX_ERR(1, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);
  __pyx_codeobj__186 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__185, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_insertPointCloudFast, 1541, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__186)) __PYX_ERR(1, 1541, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1575
 *         return num_points if success else 0
 * 
 *     def insertPointCloud(self,             # <<<<<<<<<<<<<<
 *                      point_cloud,
 *                      sensor_origin,
 */
  __pyx_tuple__187 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_point_cloud, __pyx_n_s_sensor_origin, __pyx_n_s_max_range, __pyx_n_s_lazy_eval, __pyx_n_s_discretize, __pyx_n_s_num_points, __pyx_n_s_success); if (unlikely(!__pyx_tuple__187)) __PYX_ERR(1, 1575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);
  __pyx_codeobj__188 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__187, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_insertPointCloud, 1575, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__188)) __PYX_ERR(1, 1575, __pyx_L1_error)

  /* "pyoctomap/octomap.pyx":1607
 *         return num_points if success else 0
 * 
 *     def insertPointCloudRaysFast(self,             # <<<<<<<<<<<<<<
 *                                 point_cloud,
 *                                 sensor_origin,
 */
  __pyx_tuple__189 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_point_cloud, __pyx_n_s_sensor_origin, __pyx_n_s_max_range, __pyx_n_s_lazy_eval, __pyx_n_s_pc, __pyx_n_s_i, __pyx_n_s_num_points, __pyx_n_s_point, __pyx_n_s_origin_c); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(1, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);
  __pyx_codeobj__190 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__189, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pyoctomap_octomap_pyx, __pyx_n_s_insertPointCloudRaysFast, 1607, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__190)) __PYX_ERR(1, 1607, __pyx_L1_error)
  __pyx_tuple__191 = PyTuple_Pack(2, __pyx_float_neg_1_0, Py_False); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(1, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_codeobj__192 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__12, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__192)) __PYX_ERR(0, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_codeobj__193 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__193)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_neg_1_ = PyFloat_FromDouble(-1.); if (unlikely(!__pyx_float_neg_1_)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_neg_1_0 = PyFloat_FromDouble(-1.0); if (unlikely(!__pyx_float_neg_1_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* NumpyImportArray.init */
  /*
 * Cython has automatically inserted a call to _import_array since
 * you didn't include one when you cimported numpy. To disable this
 * add the line
 *   <void>numpy._import_array
 */
#ifdef NPY_FEATURE_VERSION
#ifndef NO_IMPORT_ARRAY
if (unlikely(_import_array() == -1)) {
    PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import "
    "(auto-generated because you didn't call 'numpy.import_array()' after cimporting numpy; "
    "use '<void>numpy._import_array' to disable if you are certain you don't need it).");
}
#endif
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9pyoctomap_7octomap_OcTreeKey = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9pyoctomap_7octomap_OcTreeKey_spec, NULL); if (unlikely(!__pyx_ptype_9pyoctomap_7octomap_OcTreeKey)) __PYX_ERR(1, 21, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9pyoctomap_7octomap_OcTreeKey_spec, __pyx_ptype_9pyoctomap_7octomap_OcTreeKey) < 0) __PYX_ERR(1, 21, __pyx_L1_error)
  #else
  __pyx_ptype_9pyoctomap_7octomap_OcTreeKey = &__pyx_type_9pyoctomap_7octomap_OcTreeKey;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9pyoctomap_7octomap_OcTreeKey) < 0) __PYX_ERR(1, 21, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9pyoctomap_7octomap_OcTreeKey->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9pyoctomap_7octomap_OcTreeKey->tp_dictoffset && __pyx_ptype_9pyoctomap_7octomap_OcTreeKey->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9pyoctomap_7octomap_OcTreeKey->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OcTreeKey_2, (PyObject *) __pyx_ptype_9pyoctomap_7octomap_OcTreeKey) < 0) __PYX_ERR(1, 21, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9pyoctomap_7octomap_OcTreeKey) < 0) __PYX_ERR(1, 21, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9pyoctomap_7octomap_OcTreeNode = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9pyoctomap_7octomap_OcTreeNode_spec, NULL); if (unlikely(!__pyx_ptype_9pyoctomap_7octomap_OcTreeNode)) __PYX_ERR(1, 67, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9pyoctomap_7octomap_OcTreeNode_spec, __pyx_ptype_9pyoctomap_7octomap_OcTreeNode) < 0) __PYX_ERR(1, 67, __pyx_L1_error)
  #else
  __pyx_ptype_9pyoctomap_7octomap_OcTreeNode = &__pyx_type_9pyoctomap_7octomap_OcTreeNode;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode) < 0) __PYX_ERR(1, 67, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9pyoctomap_7octomap_OcTreeNode->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9pyoctomap_7octomap_OcTreeNode->tp_dictoffset && __pyx_ptype_9pyoctomap_7octomap_OcTreeNode->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9pyoctomap_7octomap_OcTreeNode->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OcTreeNode, (PyObject *) __pyx_ptype_9pyoctomap_7octomap_OcTreeNode) < 0) __PYX_ERR(1, 67, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9pyoctomap_7octomap_OcTreeNode) < 0) __PYX_ERR(1, 67, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9pyoctomap_7octomap_SimpleTreeIterator_spec, NULL); if (unlikely(!__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator)) __PYX_ERR(1, 141, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9pyoctomap_7octomap_SimpleTreeIterator_spec, __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator) < 0) __PYX_ERR(1, 141, __pyx_L1_error)
  #else
  __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator = &__pyx_type_9pyoctomap_7octomap_SimpleTreeIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator) < 0) __PYX_ERR(1, 141, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator->tp_dictoffset && __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SimpleTreeIterator, (PyObject *) __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator) < 0) __PYX_ERR(1, 141, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator) < 0) __PYX_ERR(1, 141, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9pyoctomap_7octomap_SimpleLeafIterator_spec, NULL); if (unlikely(!__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator)) __PYX_ERR(1, 238, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9pyoctomap_7octomap_SimpleLeafIterator_spec, __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator) < 0) __PYX_ERR(1, 238, __pyx_L1_error)
  #else
  __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator = &__pyx_type_9pyoctomap_7octomap_SimpleLeafIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator) < 0) __PYX_ERR(1, 238, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator->tp_dictoffset && __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SimpleLeafIterator, (PyObject *) __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator) < 0) __PYX_ERR(1, 238, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator) < 0) __PYX_ERR(1, 238, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator_spec, NULL); if (unlikely(!__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator)) __PYX_ERR(1, 339, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator_spec, __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator) < 0) __PYX_ERR(1, 339, __pyx_L1_error)
  #else
  __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator = &__pyx_type_9pyoctomap_7octomap_SimpleLeafBBXIterator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator) < 0) __PYX_ERR(1, 339, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator->tp_dictoffset && __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SimpleLeafBBXIterator, (PyObject *) __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator) < 0) __PYX_ERR(1, 339, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator) < 0) __PYX_ERR(1, 339, __pyx_L1_error)
  #endif
  __pyx_vtabptr_9pyoctomap_7octomap_OcTree = &__pyx_vtable_9pyoctomap_7octomap_OcTree;
  __pyx_vtable_9pyoctomap_7octomap_OcTree._add_single_point_optimized = (bool (*)(struct __pyx_obj_9pyoctomap_7octomap_OcTree *, PyArrayObject *, PyArrayObject *))__pyx_f_9pyoctomap_7octomap_6OcTree__add_single_point_optimized;
  __pyx_vtable_9pyoctomap_7octomap_OcTree._mark_free_space_optimized = (void (*)(struct __pyx_obj_9pyoctomap_7octomap_OcTree *, PyArrayObject *, PyArrayObject *))__pyx_f_9pyoctomap_7octomap_6OcTree__mark_free_space_optimized;
  __pyx_vtable_9pyoctomap_7octomap_OcTree._process_points_vectorized = (int (*)(struct __pyx_obj_9pyoctomap_7octomap_OcTree *, PyArrayObject *, PyArrayObject *, int))__pyx_f_9pyoctomap_7octomap_6OcTree__process_points_vectorized;
  __pyx_vtable_9pyoctomap_7octomap_OcTree._build_pointcloud_and_insert = (void (*)(struct __pyx_obj_9pyoctomap_7octomap_OcTree *, PyArrayObject *, PyArrayObject *, double, int, int))__pyx_f_9pyoctomap_7octomap_6OcTree__build_pointcloud_and_insert;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_ptype_9pyoctomap_7octomap_OcTree = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_9pyoctomap_7octomap_OcTree_spec, NULL); if (unlikely(!__pyx_ptype_9pyoctomap_7octomap_OcTree)) __PYX_ERR(1, 470, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_9pyoctomap_7octomap_OcTree_spec, __pyx_ptype_9pyoctomap_7octomap_OcTree) < 0) __PYX_ERR(1, 470, __pyx_L1_error)
  #else
  __pyx_ptype_9pyoctomap_7octomap_OcTree = &__pyx_type_9pyoctomap_7octomap_OcTree;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_ptype_9pyoctomap_7octomap_OcTree) < 0) __PYX_ERR(1, 470, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_ptype_9pyoctomap_7octomap_OcTree->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_ptype_9pyoctomap_7octomap_OcTree->tp_dictoffset && __pyx_ptype_9pyoctomap_7octomap_OcTree->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_ptype_9pyoctomap_7octomap_OcTree->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_vtabptr_9pyoctomap_7octomap_OcTree) < 0) __PYX_ERR(1, 470, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_ptype_9pyoctomap_7octomap_OcTree) < 0) __PYX_ERR(1, 470, __pyx_L1_error)
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OcTree, (PyObject *) __pyx_ptype_9pyoctomap_7octomap_OcTree) < 0) __PYX_ERR(1, 470, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_ptype_9pyoctomap_7octomap_OcTree) < 0) __PYX_ERR(1, 470, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_8(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 228, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 273, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 277, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 316, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 825, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 827, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 829, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 831, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 833, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 835, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 837, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 839, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 841, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_8); if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 843, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_0_8(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_8(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_3_0_8); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 907, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_octomap(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_octomap},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "octomap",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initoctomap(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initoctomap(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_octomap(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_octomap(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_octomap(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'octomap' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("octomap", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "octomap" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_octomap(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pyoctomap__octomap) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pyoctomap.octomap")) {
      if (unlikely((PyDict_SetItemString(modules, "pyoctomap.octomap", __pyx_m) < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "pyoctomap/octomap.pyx":7
 * cimport octomap_defs as defs
 * cimport dynamicEDT3D_defs as edt
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * ctypedef np.float64_t DOUBLE_t
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyoctomap/octomap.pyx":14
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator* leaf_bbx_iterator_ptr
 * 
 * class NullPointerException(Exception):             # <<<<<<<<<<<<<<
 *     """
 *     Null pointer exception
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0]));
  __Pyx_GIVEREF((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0]));
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])))) __PYX_ERR(1, 14, __pyx_L1_error);
  __pyx_t_3 = __Pyx_PEP560_update_bases(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_4, __pyx_t_3, __pyx_n_s_NullPointerException, __pyx_n_s_NullPointerException, (PyObject *) NULL, __pyx_n_s_pyoctomap_octomap, __pyx_kp_s_Null_pointer_exception); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (__pyx_t_3 != __pyx_t_2) {
    if (unlikely((PyDict_SetItemString(__pyx_t_5, "__orig_bases__", __pyx_t_2) < 0))) __PYX_ERR(1, 14, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyoctomap/octomap.pyx":18
 *     Null pointer exception
 *     """
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_20NullPointerException_1__init__, 0, __pyx_n_s_NullPointerException___init, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetNameInClass(__pyx_t_5, __pyx_n_s_init, __pyx_t_2) < 0) __PYX_ERR(1, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pyoctomap/octomap.pyx":14
 * ctypedef defs.OccupancyOcTreeBase[defs.OcTreeNode].leaf_bbx_iterator* leaf_bbx_iterator_ptr
 * 
 * class NullPointerException(Exception):             # <<<<<<<<<<<<<<
 *     """
 *     Null pointer exception
 */
  __pyx_t_2 = __Pyx_Py3ClassCreate(__pyx_t_4, __pyx_n_s_NullPointerException, __pyx_t_3, __pyx_t_5, NULL, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NullPointerException, __pyx_t_2) < 0) __PYX_ERR(1, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyoctomap/octomap.pyx":49
 *         return f"OcTreeKey({self.thisptr.k[0]}, {self.thisptr.k[1]}, {self.thisptr.k[2]})"
 * 
 *     def computeChildIdx(self, OcTreeKey key, int depth):             # <<<<<<<<<<<<<<
 *         cdef unsigned int result
 *         cdef defs.OcTreeKey key_in
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_9OcTreeKey_11computeChildIdx, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeKey_computeChildIdx, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeKey, __pyx_n_s_computeChildIdx, __pyx_t_3) < 0) __PYX_ERR(1, 49, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeKey);

  /* "pyoctomap/octomap.pyx":57
 *         result = defs.computeChildIdx(key_in, depth)
 *         return result
 *     def computeIndexKey(self, unsigned int level, OcTreeKey key):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.OcTreeKey result
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_9OcTreeKey_13computeIndexKey, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeKey_computeIndexKey, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeKey, __pyx_n_s_computeIndexKey, __pyx_t_3) < 0) __PYX_ERR(1, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeKey);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_9OcTreeKey_15__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeKey___reduce_cython, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_9OcTreeKey_17__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeKey___setstate_cython, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyoctomap/octomap.pyx":77
 *     def __dealloc__(self):
 *         pass
 *     def addValue(self, float p):             # <<<<<<<<<<<<<<
 *         """
 *         adds p to the node's logOdds value (with no boundary / threshold checking!)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_5addValue, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode_addValue, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode, __pyx_n_s_addValue, __pyx_t_3) < 0) __PYX_ERR(1, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);

  /* "pyoctomap/octomap.pyx":85
 *         else:
 *             raise NullPointerException
 *     def childExists(self, unsigned int i):             # <<<<<<<<<<<<<<
 *         """
 *         Safe test to check of the i-th child exists,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_7childExists, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode_childExists, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode, __pyx_n_s_childExists, __pyx_t_3) < 0) __PYX_ERR(1, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);

  /* "pyoctomap/octomap.pyx":94
 *         else:
 *             raise NullPointerException
 *     def getValue(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getValue()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_9getValue, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode_getValue, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode, __pyx_n_s_getValue, __pyx_t_3) < 0) __PYX_ERR(1, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);

  /* "pyoctomap/octomap.pyx":99
 *         else:
 *             raise NullPointerException
 *     def setValue(self, float v):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.setValue(v)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_11setValue, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode_setValue, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__27)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode, __pyx_n_s_setValue, __pyx_t_3) < 0) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);

  /* "pyoctomap/octomap.pyx":104
 *         else:
 *             raise NullPointerException
 *     def getOccupancy(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getOccupancy()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_13getOccupancy, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode_getOccupancy, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode, __pyx_n_s_getOccupancy, __pyx_t_3) < 0) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);

  /* "pyoctomap/octomap.pyx":109
 *         else:
 *             raise NullPointerException
 *     def getLogOdds(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getLogOdds()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_15getLogOdds, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode_getLogOdds, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__29)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode, __pyx_n_s_getLogOdds, __pyx_t_3) < 0) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);

  /* "pyoctomap/octomap.pyx":114
 *         else:
 *             raise NullPointerException
 *     def setLogOdds(self, float l):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.setLogOdds(l)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_17setLogOdds, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode_setLogOdds, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__31)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode, __pyx_n_s_setLogOdds, __pyx_t_3) < 0) __PYX_ERR(1, 114, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);

  /* "pyoctomap/octomap.pyx":119
 *         else:
 *             raise NullPointerException
 *     def hasChildren(self):             # <<<<<<<<<<<<<<
 *         """
 *         Deprecated: Use tree.nodeHasChildren(node) instead.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_19hasChildren, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode_hasChildren, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode, __pyx_n_s_hasChildren, __pyx_t_3) < 0) __PYX_ERR(1, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);

  /* "pyoctomap/octomap.pyx":128
 *         else:
 *             raise NullPointerException
 *     def getMaxChildLogOdds(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             return self.thisptr.getMaxChildLogOdds()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_21getMaxChildLogOdds, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode_getMaxChildLogOdds, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__33)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode, __pyx_n_s_getMaxChildLogOdds, __pyx_t_3) < 0) __PYX_ERR(1, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);

  /* "pyoctomap/octomap.pyx":133
 *         else:
 *             raise NullPointerException
 *     def updateOccupancyChildren(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.updateOccupancyChildren()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_23updateOccupancyChildren, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode_updateOccupancyChildr, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTreeNode, __pyx_n_s_updateOccupancyChildren, __pyx_t_3) < 0) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTreeNode);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_25__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode___reduce_cython, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__35)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_10OcTreeNode_27__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTreeNode___setstate_cython, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__36)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyoctomap/octomap.pyx":221
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_11getCoordinate, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleTreeIterator_getCoordinate, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator, __pyx_n_s_getCoordinate, __pyx_t_3) < 0) __PYX_ERR(1, 221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator);

  /* "pyoctomap/octomap.pyx":226
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_13getSize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleTreeIterator_getSize, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator, __pyx_n_s_getSize, __pyx_t_3) < 0) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator);

  /* "pyoctomap/octomap.pyx":229
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_15getDepth, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleTreeIterator_getDepth, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator, __pyx_n_s_getDepth, __pyx_t_3) < 0) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator);

  /* "pyoctomap/octomap.pyx":232
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         if self._current_node is None:
 *             return True
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_17isLeaf, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleTreeIterator_isLeaf, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator, __pyx_n_s_isLeaf, __pyx_t_3) < 0) __PYX_ERR(1, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleTreeIterator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_19__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleTreeIterator___reduce_cyth, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleTreeIterator_21__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleTreeIterator___setstate_cy, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__42)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyoctomap/octomap.pyx":318
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_11getCoordinate, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafIterator_getCoordinate, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator, __pyx_n_s_getCoordinate, __pyx_t_3) < 0) __PYX_ERR(1, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator);

  /* "pyoctomap/octomap.pyx":323
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_13getSize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafIterator_getSize, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__44)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator, __pyx_n_s_getSize, __pyx_t_3) < 0) __PYX_ERR(1, 323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator);

  /* "pyoctomap/octomap.pyx":326
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_15getDepth, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafIterator_getDepth, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator, __pyx_n_s_getDepth, __pyx_t_3) < 0) __PYX_ERR(1, 326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator);

  /* "pyoctomap/octomap.pyx":329
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_17isLeaf, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafIterator_isLeaf, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator, __pyx_n_s_isLeaf, __pyx_t_3) < 0) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleLeafIterator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_19__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafIterator___reduce_cyth, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_18SimpleLeafIterator_21__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafIterator___setstate_cy, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyoctomap/octomap.pyx":420
 *         return self
 * 
 *     def getCoordinate(self):             # <<<<<<<<<<<<<<
 *         if self._current_coord is not None:
 *             return self._current_coord
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_11getCoordinate, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafBBXIterator_getCoordin, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator, __pyx_n_s_getCoordinate, __pyx_t_3) < 0) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator);

  /* "pyoctomap/octomap.pyx":425
 *         return [0.0, 0.0, 0.0]
 * 
 *     def getSize(self):             # <<<<<<<<<<<<<<
 *         return self._current_size
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_13getSize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafBBXIterator_getSize, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator, __pyx_n_s_getSize, __pyx_t_3) < 0) __PYX_ERR(1, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator);

  /* "pyoctomap/octomap.pyx":428
 *         return self._current_size
 * 
 *     def getDepth(self):             # <<<<<<<<<<<<<<
 *         return self._current_depth
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_15getDepth, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafBBXIterator_getDepth, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator, __pyx_n_s_getDepth, __pyx_t_3) < 0) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator);

  /* "pyoctomap/octomap.pyx":431
 *         return self._current_depth
 * 
 *     def isLeaf(self):             # <<<<<<<<<<<<<<
 *         """Check if current node is a leaf"""
 *         if self._current_node is None:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_17isLeaf, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafBBXIterator_isLeaf, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator, __pyx_n_s_isLeaf, __pyx_t_3) < 0) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_SimpleLeafBBXIterator);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_19__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafBBXIterator___reduce_c, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_21SimpleLeafBBXIterator_21__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SimpleLeafBBXIterator___setstate, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyoctomap/octomap.pyx":445
 *         return self._is_end
 * 
 * def _octree_read(filename):             # <<<<<<<<<<<<<<
 *     """
 *     Read the file header, create the appropriate class and deserialize.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_1_octree_read, 0, __pyx_n_s_octree_read, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_octree_read, __pyx_t_3) < 0) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyoctomap/octomap.pyx":500
 *             self.thisptr = NULL
 * 
 *     def adjustKeyAtDepth(self, OcTreeKey key, depth):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         key_in.k[0] = key[0]
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_5adjustKeyAtDepth, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_adjustKeyAtDepth, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_adjustKeyAtDepth, __pyx_t_3) < 0) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":512
 *         return res
 * 
 *     def bbxSet(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.bbxSet()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_7bbxSet, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_bbxSet, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_bbxSet, __pyx_t_3) < 0) __PYX_ERR(1, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":515
 *         return self.thisptr.bbxSet()
 * 
 *     def calcNumNodes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.calcNumNodes()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_9calcNumNodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_calcNumNodes, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__60)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_calcNumNodes, __pyx_t_3) < 0) __PYX_ERR(1, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":518
 *         return self.thisptr.calcNumNodes()
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clear()
 *         self._mod_version += 1
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_11clear, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_clear, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_clear, __pyx_t_3) < 0) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":522
 *         self._mod_version += 1
 * 
 *     def coordToKey(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key
 *         if depth is None:
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_13coordToKey, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_coordToKey, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__64);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_coordToKey, __pyx_t_3) < 0) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":539
 *         return res
 * 
 *     def coordToKeyChecked(self, np.ndarray[DOUBLE_t, ndim=1] coord, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key
 *         cdef cppbool chk
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_15coordToKeyChecked, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_coordToKeyChecked, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__66)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__64);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_coordToKeyChecked, __pyx_t_3) < 0) __PYX_ERR(1, 539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":562
 *             return chk, None
 * 
 *     def deleteNode(self, np.ndarray[DOUBLE_t, ndim=1] value, depth=1):             # <<<<<<<<<<<<<<
 *         cdef cppbool _ret = self.thisptr.deleteNode(defs.point3d(value[0],
 *                                                                  value[1],
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_17deleteNode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_deleteNode, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__69);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_deleteNode, __pyx_t_3) < 0) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":570
 *         return _ret
 * 
 *     def castRay(self, origin,             # <<<<<<<<<<<<<<
 *                 direction,
 *                 end,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_19castRay, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_castRay, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__72);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_castRay, __pyx_t_3) < 0) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":604
 *         return hit
 * 
 *     def read(self, filename):             # <<<<<<<<<<<<<<
 *         cdef string c_filename = filename.encode('utf-8')
 *         cdef defs.OcTree* result
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_21read, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_read, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_read, __pyx_t_3) < 0) __PYX_ERR(1, 604, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":616
 *         return None
 * 
 *     def write(self, filename=None):             # <<<<<<<<<<<<<<
 *         """
 *         Write file header and complete tree to file/stream (serialization)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_23write, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_write, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__64);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_write, __pyx_t_3) < 0) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":632
 *                 return False
 * 
 *     def readBinary(self, filename):             # <<<<<<<<<<<<<<
 *         # Treat input as a filesystem path; accept str or bytes
 *         cdef string c_filename
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_25readBinary, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_readBinary, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__78)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_readBinary, __pyx_t_3) < 0) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":641
 *         return self.thisptr.readBinary(c_filename)
 * 
 *     def writeBinary(self, filename=None):             # <<<<<<<<<<<<<<
 *         cdef defs.ostringstream oss
 *         cdef string c_filename
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_27writeBinary, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_writeBinary, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__64);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_writeBinary, __pyx_t_3) < 0) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":654
 *                 return False
 * 
 *     def isNodeOccupied(self, node):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d search_point
 *         cdef defs.OcTreeNode* found_node
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_29isNodeOccupied, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_isNodeOccupied, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_isNodeOccupied, __pyx_t_3) < 0) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":680
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")
 * 
 *     def isNodeAtThreshold(self, node):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d search_point
 *         cdef defs.OcTreeNode* found_node
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_31isNodeAtThreshold, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_isNodeAtThreshold, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_isNodeAtThreshold, __pyx_t_3) < 0) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":705
 *             raise TypeError(f"Expected OcTreeNode or iterator, got {type(node)}")
 * 
 *     def getLabels(self, np.ndarray[DOUBLE_t, ndim=2] points):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[DOUBLE_t, ndim=1] pt
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_33getLabels, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getLabels, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getLabels, __pyx_t_3) < 0) __PYX_ERR(1, 705, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":725
 *         return labels
 * 
 *     def extractPointCloud(self):             # <<<<<<<<<<<<<<
 *         cdef float resolution = self.getResolution()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_35extractPointCloud, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_extractPointCloud, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_extractPointCloud, __pyx_t_3) < 0) __PYX_ERR(1, 725, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":773
 *         return occupied_arr, empty_arr
 * 
 *     def insertPointCloud(self,             # <<<<<<<<<<<<<<
 *                          pointcloud,
 *                          origin,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_37insertPointCloud, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_insertPointCloud, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__90);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_insertPointCloud, __pyx_t_3) < 0) __PYX_ERR(1, 773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":808
 *                                       bool(discretize))
 * 
 *     def begin_tree(self, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified tree iterator"""
 *         return SimpleTreeIterator(self, maxDepth)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_39begin_tree, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_begin_tree, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__93);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_begin_tree, __pyx_t_3) < 0) __PYX_ERR(1, 808, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":812
 *         return SimpleTreeIterator(self, maxDepth)
 * 
 *     def begin_leafs(self, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified leaf iterator"""
 *         return SimpleLeafIterator(self, maxDepth)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_41begin_leafs, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_begin_leafs, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__93);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_begin_leafs, __pyx_t_3) < 0) __PYX_ERR(1, 812, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":816
 *         return SimpleLeafIterator(self, maxDepth)
 * 
 *     def begin_leafs_bbx(self, np.ndarray[DOUBLE_t, ndim=1] bbx_min, np.ndarray[DOUBLE_t, ndim=1] bbx_max, maxDepth=0):             # <<<<<<<<<<<<<<
 *         """Return a simplified leaf iterator for a bounding box"""
 *         return SimpleLeafBBXIterator(self, bbx_min, bbx_max, maxDepth)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_43begin_leafs_bbx, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_begin_leafs_bbx, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__93);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_begin_leafs_bbx, __pyx_t_3) < 0) __PYX_ERR(1, 816, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":820
 *         return SimpleLeafBBXIterator(self, bbx_min, bbx_max, maxDepth)
 * 
 *     def end_tree(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for tree traversal"""
 *         itr = SimpleTreeIterator(self)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_45end_tree, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_end_tree, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_end_tree, __pyx_t_3) < 0) __PYX_ERR(1, 820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":826
 *         return itr
 * 
 *     def end_leafs(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for leaf traversal"""
 *         itr = SimpleLeafIterator(self)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_47end_leafs, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_end_leafs, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_end_leafs, __pyx_t_3) < 0) __PYX_ERR(1, 826, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":832
 *         return itr
 * 
 *     def end_leafs_bbx(self):             # <<<<<<<<<<<<<<
 *         """Return an end iterator for leaf bounding box traversal"""
 *         itr = SimpleLeafBBXIterator(self, np.array([0.0, 0.0, 0.0], dtype=np.float64), np.array([1.0, 1.0, 1.0], dtype=np.float64))
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_49end_leafs_bbx, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_end_leafs_bbx, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_end_leafs_bbx, __pyx_t_3) < 0) __PYX_ERR(1, 832, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":839
 *         return itr
 * 
 *     def getBBXBounds(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXBounds()
 *         return np.array((p.x(), p.y(), p.z()))
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_51getBBXBounds, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getBBXBounds, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getBBXBounds, __pyx_t_3) < 0) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":843
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXCenter(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXCenter()
 *         return np.array((p.x(), p.y(), p.z()))
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_53getBBXCenter, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getBBXCenter, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getBBXCenter, __pyx_t_3) < 0) __PYX_ERR(1, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":847
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXMax(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXMax()
 *         return np.array((p.x(), p.y(), p.z()))
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_55getBBXMax, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getBBXMax, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getBBXMax, __pyx_t_3) < 0) __PYX_ERR(1, 847, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":851
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getBBXMin(self):             # <<<<<<<<<<<<<<
 *         cdef defs.point3d p = self.thisptr.getBBXMin()
 *         return np.array((p.x(), p.y(), p.z()))
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_57getBBXMin, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getBBXMin, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getBBXMin, __pyx_t_3) < 0) __PYX_ERR(1, 851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":855
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def getRoot(self):             # <<<<<<<<<<<<<<
 *         node = OcTreeNode()
 *         node.thisptr = self.thisptr.getRoot()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_59getRoot, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getRoot, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getRoot, __pyx_t_3) < 0) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":860
 *         return node
 * 
 *     def getNumLeafNodes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getNumLeafNodes()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_61getNumLeafNodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getNumLeafNodes, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getNumLeafNodes, __pyx_t_3) < 0) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":863
 *         return self.thisptr.getNumLeafNodes()
 * 
 *     def getResolution(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getResolution()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_63getResolution, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getResolution, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getResolution, __pyx_t_3) < 0) __PYX_ERR(1, 863, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":866
 *         return self.thisptr.getResolution()
 * 
 *     def getTreeDepth(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getTreeDepth()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_65getTreeDepth, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getTreeDepth, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getTreeDepth, __pyx_t_3) < 0) __PYX_ERR(1, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":869
 *         return self.thisptr.getTreeDepth()
 * 
 *     def getTreeType(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getTreeType().c_str()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_67getTreeType, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getTreeType, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getTreeType, __pyx_t_3) < 0) __PYX_ERR(1, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":872
 *         return self.thisptr.getTreeType().c_str()
 * 
 *     def inBBX(self, np.ndarray[DOUBLE_t, ndim=1] p):             # <<<<<<<<<<<<<<
 *         return self.thisptr.inBBX(defs.point3d(p[0], p[1], p[2]))
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_69inBBX, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_inBBX, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_inBBX, __pyx_t_3) < 0) __PYX_ERR(1, 872, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":875
 *         return self.thisptr.inBBX(defs.point3d(p[0], p[1], p[2]))
 * 
 *     def keyToCoord(self, OcTreeKey key, depth=None):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey key_in
 *         cdef defs.point3d p = defs.point3d()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_71keyToCoord, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_keyToCoord, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__64);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_keyToCoord, __pyx_t_3) < 0) __PYX_ERR(1, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":887
 *         return np.array((p.x(), p.y(), p.z()))
 * 
 *     def memoryFullGrid(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryFullGrid()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_73memoryFullGrid, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_memoryFullGrid, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_memoryFullGrid, __pyx_t_3) < 0) __PYX_ERR(1, 887, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":890
 *         return self.thisptr.memoryFullGrid()
 * 
 *     def memoryUsage(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryUsage()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_75memoryUsage, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_memoryUsage, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_memoryUsage, __pyx_t_3) < 0) __PYX_ERR(1, 890, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":893
 *         return self.thisptr.memoryUsage()
 * 
 *     def memoryUsageNode(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.memoryUsageNode()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_77memoryUsageNode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_memoryUsageNode, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_memoryUsageNode, __pyx_t_3) < 0) __PYX_ERR(1, 893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":896
 *         return self.thisptr.memoryUsageNode()
 * 
 *     def resetChangeDetection(self):             # <<<<<<<<<<<<<<
 *         """
 *         Reset the set of changed keys. Call this after you obtained all changed nodes.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_79resetChangeDetection, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_resetChangeDetection, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_resetChangeDetection, __pyx_t_3) < 0) __PYX_ERR(1, 896, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":904
 * 
 * 
 *     def search(self, value, depth=0):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey search_key
 *         node = OcTreeNode()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_81search, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_search, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__93);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_search, __pyx_t_3) < 0) __PYX_ERR(1, 904, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":923
 *         return node
 * 
 *     def setBBXMax(self, np.ndarray[DOUBLE_t, ndim=1] max):             # <<<<<<<<<<<<<<
 *         """
 *         sets the maximum for a query bounding box to use
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_83setBBXMax, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_setBBXMax, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_setBBXMax, __pyx_t_3) < 0) __PYX_ERR(1, 923, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":929
 *         self.thisptr.setBBXMax(defs.point3d(max[0], max[1], max[2]))
 * 
 *     def setBBXMin(self, np.ndarray[DOUBLE_t, ndim=1] min):             # <<<<<<<<<<<<<<
 *         """
 *         sets the minimum for a query bounding box to use
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_85setBBXMin, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_setBBXMin, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_setBBXMin, __pyx_t_3) < 0) __PYX_ERR(1, 929, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":935
 *         self.thisptr.setBBXMin(defs.point3d(min[0], min[1], min[2]))
 * 
 *     def setResolution(self, double r):             # <<<<<<<<<<<<<<
 *         """
 *         Change the resolution of the octree, scaling all voxels. This will not preserve the (metric) scale!
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_87setResolution, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_setResolution, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_setResolution, __pyx_t_3) < 0) __PYX_ERR(1, 935, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":942
 *         self._mod_version += 1
 * 
 *     def size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.size()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_89size, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_size, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__126)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_size, __pyx_t_3) < 0) __PYX_ERR(1, 942, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":945
 *         return self.thisptr.size()
 * 
 *     def toMaxLikelihood(self):             # <<<<<<<<<<<<<<
 *         """
 *         Creates the maximum likelihood map by calling toMaxLikelihood on all tree nodes,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_91toMaxLikelihood, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_toMaxLikelihood, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_toMaxLikelihood, __pyx_t_3) < 0) __PYX_ERR(1, 945, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":953
 *         self._mod_version += 1
 * 
 *     def updateNodes(self, values, update, lazy_eval=False):             # <<<<<<<<<<<<<<
 *         """
 *         Integrate occupancy measurements and Manipulate log_odds value of voxel directly.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_93updateNodes, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_updateNodes, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__130);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_updateNodes, __pyx_t_3) < 0) __PYX_ERR(1, 953, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":994
 *         self._mod_version += 1
 * 
 *     def updateNode(self, value, update, lazy_eval=False):             # <<<<<<<<<<<<<<
 *         cdef defs.OcTreeKey update_key # Moved to top
 *         """
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_95updateNode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_updateNode, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__132)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__130);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_updateNode, __pyx_t_3) < 0) __PYX_ERR(1, 994, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1031
 *         return node
 * 
 *     def updateInnerOccupancy(self):             # <<<<<<<<<<<<<<
 *         """
 *         Updates the occupancy of all inner nodes to reflect their children's occupancy.
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_97updateInnerOccupancy, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_updateInnerOccupancy, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__133)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_updateInnerOccupancy, __pyx_t_3) < 0) __PYX_ERR(1, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1038
 *         self._mod_version += 1
 * 
 *     def useBBXLimit(self, enable):             # <<<<<<<<<<<<<<
 *         """
 *         use or ignore BBX limit (default: ignore)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_99useBBXLimit, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_useBBXLimit, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_useBBXLimit, __pyx_t_3) < 0) __PYX_ERR(1, 1038, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1044
 *         self.thisptr.useBBXLimit(bool(enable))
 * 
 *     def volume(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.volume()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_101volume, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_volume, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__136)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_volume, __pyx_t_3) < 0) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1047
 *         return self.thisptr.volume()
 * 
 *     def getClampingThresMax(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMax()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_103getClampingThresMax, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getClampingThresMax, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getClampingThresMax, __pyx_t_3) < 0) __PYX_ERR(1, 1047, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1050
 *         return self.thisptr.getClampingThresMax()
 * 
 *     def getClampingThresMaxLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMaxLog()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_105getClampingThresMaxLog, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getClampingThresMaxLog, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__138)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getClampingThresMaxLog, __pyx_t_3) < 0) __PYX_ERR(1, 1050, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1053
 *         return self.thisptr.getClampingThresMaxLog()
 * 
 *     def getClampingThresMin(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMin()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_107getClampingThresMin, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getClampingThresMin, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getClampingThresMin, __pyx_t_3) < 0) __PYX_ERR(1, 1053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1056
 *         return self.thisptr.getClampingThresMin()
 * 
 *     def getClampingThresMinLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getClampingThresMinLog()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_109getClampingThresMinLog, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getClampingThresMinLog, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__140)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getClampingThresMinLog, __pyx_t_3) < 0) __PYX_ERR(1, 1056, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1059
 *         return self.thisptr.getClampingThresMinLog()
 * 
 *     def getOccupancyThres(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getOccupancyThres()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_111getOccupancyThres, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getOccupancyThres, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getOccupancyThres, __pyx_t_3) < 0) __PYX_ERR(1, 1059, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1062
 *         return self.thisptr.getOccupancyThres()
 * 
 *     def getOccupancyThresLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getOccupancyThresLog()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_113getOccupancyThresLog, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getOccupancyThresLog, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__142)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getOccupancyThresLog, __pyx_t_3) < 0) __PYX_ERR(1, 1062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1065
 *         return self.thisptr.getOccupancyThresLog()
 * 
 *     def getProbHit(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbHit()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_115getProbHit, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getProbHit, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getProbHit, __pyx_t_3) < 0) __PYX_ERR(1, 1065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1068
 *         return self.thisptr.getProbHit()
 * 
 *     def getProbHitLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbHitLog()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_117getProbHitLog, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getProbHitLog, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__144)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getProbHitLog, __pyx_t_3) < 0) __PYX_ERR(1, 1068, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1071
 *         return self.thisptr.getProbHitLog()
 * 
 *     def getProbMiss(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbMiss()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_119getProbMiss, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getProbMiss, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__145)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getProbMiss, __pyx_t_3) < 0) __PYX_ERR(1, 1071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1074
 *         return self.thisptr.getProbMiss()
 * 
 *     def getProbMissLog(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getProbMissLog()
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_121getProbMissLog, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getProbMissLog, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__146)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getProbMissLog, __pyx_t_3) < 0) __PYX_ERR(1, 1074, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1077
 *         return self.thisptr.getProbMissLog()
 * 
 *     def setClampingThresMax(self, double thresProb):             # <<<<<<<<<<<<<<
 *         self.thisptr.setClampingThresMax(thresProb)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_123setClampingThresMax, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_setClampingThresMax, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__148)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_setClampingThresMax, __pyx_t_3) < 0) __PYX_ERR(1, 1077, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1080
 *         self.thisptr.setClampingThresMax(thresProb)
 * 
 *     def setClampingThresMin(self, double thresProb):             # <<<<<<<<<<<<<<
 *         self.thisptr.setClampingThresMin(thresProb)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_125setClampingThresMin, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_setClampingThresMin, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__149)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_setClampingThresMin, __pyx_t_3) < 0) __PYX_ERR(1, 1080, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1083
 *         self.thisptr.setClampingThresMin(thresProb)
 * 
 *     def setOccupancyThres(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setOccupancyThres(prob)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_127setOccupancyThres, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_setOccupancyThres, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_setOccupancyThres, __pyx_t_3) < 0) __PYX_ERR(1, 1083, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1086
 *         self.thisptr.setOccupancyThres(prob)
 * 
 *     def setProbHit(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setProbHit(prob)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_129setProbHit, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_setProbHit, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__152)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_setProbHit, __pyx_t_3) < 0) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1089
 *         self.thisptr.setProbHit(prob)
 * 
 *     def setProbMiss(self, double prob):             # <<<<<<<<<<<<<<
 *         self.thisptr.setProbMiss(prob)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_131setProbMiss, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_setProbMiss, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__153)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_setProbMiss, __pyx_t_3) < 0) __PYX_ERR(1, 1089, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1092
 *         self.thisptr.setProbMiss(prob)
 * 
 *     def getMetricSize(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_133getMetricSize, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getMetricSize, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__155)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getMetricSize, __pyx_t_3) < 0) __PYX_ERR(1, 1092, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1099
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def getMetricMin(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_135getMetricMin, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getMetricMin, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__156)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getMetricMin, __pyx_t_3) < 0) __PYX_ERR(1, 1099, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1106
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def getMetricMax(self):             # <<<<<<<<<<<<<<
 *         cdef double x = 0
 *         cdef double y = 0
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_137getMetricMax, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getMetricMax, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__157)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getMetricMax, __pyx_t_3) < 0) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1113
 *         return np.array([x, y, z], dtype=float)
 * 
 *     def expandNode(self, node):             # <<<<<<<<<<<<<<
 *         self.thisptr.expandNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_139expandNode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_expandNode, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__158)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_expandNode, __pyx_t_3) < 0) __PYX_ERR(1, 1113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1117
 *         self._mod_version += 1
 * 
 *     def createNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.createNodeChild((<OcTreeNode>node).thisptr, idx)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_141createNodeChild, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_createNodeChild, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__160)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_createNodeChild, __pyx_t_3) < 0) __PYX_ERR(1, 1117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1123
 *         return child
 * 
 *     def getNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         child = OcTreeNode()
 *         child.thisptr = self.thisptr.getNodeChild((<OcTreeNode>node).thisptr, idx)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_143getNodeChild, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_getNodeChild, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__161)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_getNodeChild, __pyx_t_3) < 0) __PYX_ERR(1, 1123, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1128
 *         return child
 * 
 *     def isNodeCollapsible(self, node):             # <<<<<<<<<<<<<<
 *         return self.thisptr.isNodeCollapsible((<OcTreeNode>node).thisptr)
 * 
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_145isNodeCollapsible, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_isNodeCollapsible, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__162)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_isNodeCollapsible, __pyx_t_3) < 0) __PYX_ERR(1, 1128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1131
 *         return self.thisptr.isNodeCollapsible((<OcTreeNode>node).thisptr)
 * 
 *     def deleteNodeChild(self, node, int idx):             # <<<<<<<<<<<<<<
 *         self.thisptr.deleteNodeChild((<OcTreeNode>node).thisptr, idx)
 *         self._mod_version += 1
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_147deleteNodeChild, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_deleteNodeChild, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__164)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_deleteNodeChild, __pyx_t_3) < 0) __PYX_ERR(1, 1131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1135
 *         self._mod_version += 1
 * 
 *     def pruneNode(self, node):             # <<<<<<<<<<<<<<
 *         cdef cppbool _ret_prune = self.thisptr.pruneNode((<OcTreeNode>node).thisptr)
 *         self._mod_version += 1
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_149pruneNode, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_pruneNode, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__166)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_pruneNode, __pyx_t_3) < 0) __PYX_ERR(1, 1135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1140
 *         return _ret_prune
 * 
 *     def nodeHasChildren(self, node):             # <<<<<<<<<<<<<<
 *         """
 *         Check if a node has children (recommended replacement for node.hasChildren()).
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_151nodeHasChildren, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_nodeHasChildren, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__167)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_nodeHasChildren, __pyx_t_3) < 0) __PYX_ERR(1, 1140, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1158
 *             raise TypeError("Expected OcTreeNode")
 * 
 *     def dynamicEDT_generate(self, maxdist,             # <<<<<<<<<<<<<<
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_min,
 *                             np.ndarray[DOUBLE_t, ndim=1] bbx_max,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_153dynamicEDT_generate, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_dynamicEDT_generate, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__169)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__130);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_dynamicEDT_generate, __pyx_t_3) < 0) __PYX_ERR(1, 1158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1173
 *                                                 <cppbool?>treatUnknownAsOccupied)
 * 
 *     def dynamicEDT_checkConsistency(self):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             return self.edtptr.checkConsistency()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_155dynamicEDT_checkConsistency, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_dynamicEDT_checkConsisten, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__170)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_dynamicEDT_checkConsistency, __pyx_t_3) < 0) __PYX_ERR(1, 1173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1179
 *             raise NullPointerException
 * 
 *     def dynamicEDT_update(self, updateRealDist):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             self.edtptr.update(<cppbool?>updateRealDist)
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_157dynamicEDT_update, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_dynamicEDT_update, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__172)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_dynamicEDT_update, __pyx_t_3) < 0) __PYX_ERR(1, 1179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1185
 *             raise NullPointerException
 * 
 *     def dynamicEDT_getMaxDist(self):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             return self.edtptr.getMaxDist()
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_159dynamicEDT_getMaxDist, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_dynamicEDT_getMaxDist, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__173)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_dynamicEDT_getMaxDist, __pyx_t_3) < 0) __PYX_ERR(1, 1185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1191
 *             raise NullPointerException
 * 
 *     def dynamicEDT_getDistance(self, p):             # <<<<<<<<<<<<<<
 *         if self.edtptr:
 *             if isinstance(p, OcTreeKey):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_161dynamicEDT_getDistance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_dynamicEDT_getDistance, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__174)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_dynamicEDT_getDistance, __pyx_t_3) < 0) __PYX_ERR(1, 1191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1204
 *             raise NullPointerException
 * 
 *     def addPointWithRayCasting(self,             # <<<<<<<<<<<<<<
 *                               point,
 *                               sensor_origin,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_163addPointWithRayCasting, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_addPointWithRayCasting, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__176)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__130);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_addPointWithRayCasting, __pyx_t_3) < 0) __PYX_ERR(1, 1204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1234
 *         return success
 * 
 *     def markFreeSpaceAlongRay(self,             # <<<<<<<<<<<<<<
 *                              origin,
 *                              end_point,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_165markFreeSpaceAlongRay, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_markFreeSpaceAlongRay, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__178)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__64);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_markFreeSpaceAlongRay, __pyx_t_3) < 0) __PYX_ERR(1, 1234, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1361
 *             self.updateNode(sample_point, False)  # Mark as free
 * 
 *     def addPointCloudWithRayCasting(self,             # <<<<<<<<<<<<<<
 *                                    point_cloud,
 *                                    sensor_origin,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_167addPointCloudWithRayCasting, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_addPointCloudWithRayCasti, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__180)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__181);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_addPointCloudWithRayCasting, __pyx_t_3) < 0) __PYX_ERR(1, 1361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1477
 *         return success_count
 * 
 *     def _discretizePointCloud(self, np.ndarray[DOUBLE_t, ndim=2] point_cloud, bint checked=True):             # <<<<<<<<<<<<<<
 *         """
 *         Discretize points to unique octree keys (reduces duplicates for batching).
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_169_discretizePointCloud, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree__discretizePointCloud, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__183)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__184);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_discretizePointCloud, __pyx_t_3) < 0) __PYX_ERR(1, 1477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1541
 *         # No return; assume success
 * 
 *     def insertPointCloudFast(self,             # <<<<<<<<<<<<<<
 *                          point_cloud,
 *                          sensor_origin,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_171insertPointCloudFast, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_insertPointCloudFast, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__186)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__90);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_insertPointCloudFast, __pyx_t_3) < 0) __PYX_ERR(1, 1541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1575
 *         return num_points if success else 0
 * 
 *     def insertPointCloud(self,             # <<<<<<<<<<<<<<
 *                      point_cloud,
 *                      sensor_origin,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_173insertPointCloud, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_insertPointCloud, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__188)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__90);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_insertPointCloud, __pyx_t_3) < 0) __PYX_ERR(1, 1575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "pyoctomap/octomap.pyx":1607
 *         return num_points if success else 0
 * 
 *     def insertPointCloudRaysFast(self,             # <<<<<<<<<<<<<<
 *                                 point_cloud,
 *                                 sensor_origin,
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_175insertPointCloudRaysFast, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree_insertPointCloudRaysFast, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__190)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__191);
  if (__Pyx_SetItemOnTypeDict((PyObject *)__pyx_ptype_9pyoctomap_7octomap_OcTree, __pyx_n_s_insertPointCloudRaysFast, __pyx_t_3) < 0) __PYX_ERR(1, 1607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_9pyoctomap_7octomap_OcTree);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_177__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree___reduce_cython, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__192)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_9pyoctomap_7octomap_6OcTree_179__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OcTree___setstate_cython, NULL, __pyx_n_s_pyoctomap_octomap, __pyx_d, ((PyObject *)__pyx_codeobj__193)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_3) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pyoctomap/octomap.pyx":1
 * from libcpp.string cimport string             # <<<<<<<<<<<<<<
 * from libcpp cimport bool as cppbool
 * from libc.string cimport memcpy
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init pyoctomap.octomap", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pyoctomap.octomap");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparsable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static int
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return -1;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return -1;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return -1;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i]) {
            PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
            return -1;
        }
        if (*ts != ',' && *ts != ')') {
            PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
            return -1;
        }
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim) {
        PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
        return -1;
    }
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return -1;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return 0;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (__pyx_buffmt_parse_array(ctx, &ts) < 0) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* PyFunctionFastCall */
  #if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
  #if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
  #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__6;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* PyObjectCallNoArg */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* SliceObject */
  static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object does not support slice %.10s",
        obj_type_name, value ? "assignment" : "deletion");
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return -1;
}

/* decode_c_bytes */
  static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyObjectCallOneArg */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* PyObjectSetAttrStr */
  #if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyIntCompare */
  static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + (unsigned long)b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        if (unlikely(__Pyx_PyLong_IsZero(op1))) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_PyLong_IsCompact(op1))) {
            a = __Pyx_PyLong_CompactValue(op1);
        } else {
            const digit* digits = __Pyx_PyLong_Digits(op1);
            const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntFromDouble */
  #if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* ObjectGetItem */
  #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* SwapException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* pyfrozenset_new */
  static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
  static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* FixUpExtensionType */
  #if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectGetMethod */
  static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
  static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
  #if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
  static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetupReduce */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* SetVTable */
  static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
  static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType_3_0_8
#define __PYX_HAVE_RT_ImportType_3_0_8
static PyTypeObject *__Pyx_ImportType_3_0_8(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_8 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_8 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_8 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Py3UpdateBases */
  static PyObject*
__Pyx_PEP560_update_bases(PyObject *bases)
{
    Py_ssize_t i, j, size_bases;
    PyObject *base, *meth, *new_base, *result, *new_bases = NULL;
    size_bases = PyTuple_GET_SIZE(bases);
    for (i = 0; i < size_bases; i++) {
        base  = PyTuple_GET_ITEM(bases, i);
        if (PyType_Check(base)) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        meth = __Pyx_PyObject_GetAttrStrNoError(base, __pyx_n_s_mro_entries);
        if (!meth && PyErr_Occurred()) {
            goto error;
        }
        if (!meth) {
            if (new_bases) {
                if (PyList_Append(new_bases, base) < 0) {
                    goto error;
                }
            }
            continue;
        }
        new_base = __Pyx_PyObject_CallOneArg(meth, bases);
        Py_DECREF(meth);
        if (!new_base) {
            goto error;
        }
        if (!PyTuple_Check(new_base)) {
            PyErr_SetString(PyExc_TypeError,
                            "__mro_entries__ must return a tuple");
            Py_DECREF(new_base);
            goto error;
        }
        if (!new_bases) {
            if (!(new_bases = PyList_New(i))) {
                goto error;
            }
            for (j = 0; j < i; j++) {
                base = PyTuple_GET_ITEM(bases, j);
                PyList_SET_ITEM(new_bases, j, base);
                Py_INCREF(base);
            }
        }
        j = PyList_GET_SIZE(new_bases);
        if (PyList_SetSlice(new_bases, j, j, new_base) < 0) {
            goto error;
        }
        Py_DECREF(new_base);
    }
    if (!new_bases) {
        Py_INCREF(bases);
        return bases;
    }
    result = PyList_AsTuple(new_bases);
    Py_DECREF(new_bases);
    return result;
error:
    Py_XDECREF(new_bases);
    return NULL;
}

/* CalculateMetaclass */
  static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases;
#if CYTHON_ASSUME_SAFE_MACROS
    nbases = PyTuple_GET_SIZE(bases);
#else
    nbases = PyTuple_Size(bases);
    if (nbases < 0) return NULL;
#endif
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
#if CYTHON_ASSUME_SAFE_MACROS
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *tmp = PyTuple_GetItem(bases, i);
        if (!tmp) return NULL;
#endif
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* FetchSharedCythonModule */
  static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef((char*) __PYX_ABI_MODULE_NAME);
}

/* FetchCommonType */
  static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
#if !CYTHON_USE_TYPE_SPECS
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    const char* object_name;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    object_name = strrchr(type->tp_name, '.');
    object_name = object_name ? object_name+1 : type->tp_name;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              object_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#else
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *cached_type = NULL;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, object_name);
    if (cached_type) {
        Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
        PyObject *py_basicsize;
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (unlikely(!py_basicsize)) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
#else
        basicsize = likely(PyType_Check(cached_type)) ? ((PyTypeObject*) cached_type)->tp_basicsize : -1;
#endif
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromModuleAndSpec(abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    if (PyObject_SetAttrString(abi_module, object_name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
  #if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
  #if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void *cfunc) {
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#elif PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
#if CYTHON_USE_TYPE_SPECS
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
#if !CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#endif
#endif
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(((PyCFunctionObject*)m)->m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyObject *py_name = NULL;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
#if CYTHON_COMPILING_IN_LIMITED_API
            py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
            if (!py_name) return NULL;
            PyErr_Format(PyExc_TypeError,
                "%.200S() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                py_name, size);
            Py_DECREF(py_name);
#else
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
#endif
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    py_name = __Pyx_CyFunction_get_name((__pyx_CyFunctionObject*)func, NULL);
    if (!py_name) return NULL;
    PyErr_Format(PyExc_TypeError, "%.200S() takes no keyword arguments",
                 py_name);
    Py_DECREF(py_name);
#else
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
#endif
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_MACROS
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(!argc) < 0) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", ((PyCFunctionObject*)cyfunc)->m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = ((PyCFunctionObject*)cyfunc)->m_ml;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = ((PyCFunctionObject*)cyfunc)->m_self;
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))def->ml_meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if (defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(PyCFunctionObject, vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if defined(_Py_TPFLAGS_HAVE_VECTORCALL) && CYTHON_METH_FASTCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if __PYX_NEED_TP_PRINT_SLOT
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(PyObject *module) {
#if CYTHON_USE_TYPE_SPECS
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(module, &__pyx_CyFunctionType_spec, NULL);
#else
    CYTHON_UNUSED_VAR(module);
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyObjectCall2Args */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectLookupSpecial */
  #if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* Py3ClassCreate */
  static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
#if PY_VERSION_HEX >= 0x03030000
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
#else
    CYTHON_MAYBE_UNUSED_VAR(qualname);
#endif
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
static int __Pyx_SetNamesPEP487(PyObject *type_obj) {
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *names_to_set, *key, *value, *set_name, *tmp;
    Py_ssize_t i = 0;
#if CYTHON_USE_TYPE_SLOTS
    names_to_set = PyDict_Copy(type->tp_dict);
#else
    {
        PyObject *d = PyObject_GetAttr(type_obj, __pyx_n_s_dict);
        names_to_set = NULL;
        if (likely(d)) {
            PyObject *names_to_set = PyDict_New();
            int ret = likely(names_to_set) ? PyDict_Update(names_to_set, d) : -1;
            Py_DECREF(d);
            if (unlikely(ret < 0))
                Py_CLEAR(names_to_set);
        }
    }
#endif
    if (unlikely(names_to_set == NULL))
        goto bad;
    while (PyDict_Next(names_to_set, &i, &key, &value)) {
        set_name = __Pyx_PyObject_LookupSpecialNoError(value, __pyx_n_s_set_name);
        if (unlikely(set_name != NULL)) {
            tmp = __Pyx_PyObject_Call2Args(set_name, type_obj, key);
            Py_DECREF(set_name);
            if (unlikely(tmp == NULL)) {
                __Pyx_TypeName value_type_name =
                    __Pyx_PyType_GetName(Py_TYPE(value));
                __Pyx_TypeName type_name = __Pyx_PyType_GetName(type);
                PyErr_Format(PyExc_RuntimeError,
#if PY_MAJOR_VERSION >= 3
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %R " "in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name, key, type_name);
#else
                    "Error calling __set_name__ on '" __Pyx_FMT_TYPENAME "' instance %.100s in '" __Pyx_FMT_TYPENAME "'",
                    value_type_name,
                    PyString_Check(key) ? PyString_AS_STRING(key) : "?",
                    type_name);
#endif
                goto bad;
            } else {
                Py_DECREF(tmp);
            }
        }
        else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
    Py_DECREF(names_to_set);
    return 0;
bad:
    Py_XDECREF(names_to_set);
    return -1;
}
static PyObject *__Pyx_InitSubclassPEP487(PyObject *type_obj, PyObject *mkw) {
#if CYTHON_USE_TYPE_SLOTS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyTypeObject *type = (PyTypeObject*) type_obj;
    PyObject *mro = type->tp_mro;
    Py_ssize_t i, nbases;
    if (unlikely(!mro)) goto done;
    (void) &__Pyx_GetBuiltinName;
    Py_INCREF(mro);
    nbases = PyTuple_GET_SIZE(mro);
    assert(PyTuple_GET_ITEM(mro, 0) == type_obj);
    for (i = 1; i < nbases-1; i++) {
        PyObject *base, *dict, *meth;
        base = PyTuple_GET_ITEM(mro, i);
        dict = ((PyTypeObject *)base)->tp_dict;
        meth = __Pyx_PyDict_GetItemStrWithError(dict, __pyx_n_s_init_subclass);
        if (unlikely(meth)) {
            descrgetfunc f = Py_TYPE(meth)->tp_descr_get;
            PyObject *res;
            Py_INCREF(meth);
            if (likely(f)) {
                res = f(meth, NULL, type_obj);
                Py_DECREF(meth);
                if (unlikely(!res)) goto bad;
                meth = res;
            }
            res = __Pyx_PyObject_FastCallDict(meth, NULL, 0, mkw);
            Py_DECREF(meth);
            if (unlikely(!res)) goto bad;
            Py_DECREF(res);
            goto done;
        } else if (unlikely(PyErr_Occurred())) {
            goto bad;
        }
    }
done:
    Py_XDECREF(mro);
    return type_obj;
bad:
    Py_XDECREF(mro);
    Py_DECREF(type_obj);
    return NULL;
#else
    PyObject *super_type, *super, *func, *res;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    super_type = __Pyx_GetBuiltinName(__pyx_n_s_super);
#else
    super_type = (PyObject*) &PySuper_Type;
    (void) &__Pyx_GetBuiltinName;
#endif
    super = likely(super_type) ? __Pyx_PyObject_Call2Args(super_type, type_obj, type_obj) : NULL;
#if CYTHON_COMPILING_IN_PYPY && !defined(PySuper_Type)
    Py_XDECREF(super_type);
#endif
    if (unlikely(!super)) {
        Py_CLEAR(type_obj);
        goto done;
    }
    func = __Pyx_PyObject_GetAttrStrNoError(super, __pyx_n_s_init_subclass);
    Py_DECREF(super);
    if (likely(!func)) {
        if (unlikely(PyErr_Occurred()))
            Py_CLEAR(type_obj);
        goto done;
    }
    res = __Pyx_PyObject_FastCallDict(func, NULL, 0, mkw);
    Py_DECREF(func);
    if (unlikely(!res))
        Py_CLEAR(type_obj);
    Py_XDECREF(res);
done:
    return type_obj;
#endif
}
#endif
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET,
#if PY_VERSION_HEX < 0x030600A4
        (metaclass == (PyObject*)&PyType_Type) ? NULL : mkw
#else
        mkw
#endif
    );
    Py_XDECREF(owned_metaclass);
#if PY_VERSION_HEX < 0x030600A4 && CYTHON_PEP487_INIT_SUBCLASS
    if (likely(result) && likely(PyType_Check(result))) {
        if (unlikely(__Pyx_SetNamesPEP487(result) < 0)) {
            Py_CLEAR(result);
        } else {
            result = __Pyx_InitSubclassPEP487(result, mkw);
        }
    }
#else
    (void) &__Pyx_GetBuiltinName;
#endif
    return result;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    __Pyx_TypeName obj_type_name;
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
                 "'" __Pyx_FMT_TYPENAME "' does not have the buffer interface",
                 obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


  /* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return ::std::complex< long double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return x + y*(__pyx_t_long_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      __pyx_t_long_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsl(b.real) >= fabsl(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                long double r = b.imag / b.real;
                long double s = (long double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_long_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            long double r = b.real / b.imag;
            long double s = (long double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_long_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            long double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_long_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtl(z.real*z.real + z.imag*z.imag);
          #else
            return hypotl(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
            __pyx_t_long_double_complex z;
            long double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    long double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_long__double(a, a);
                    case 3:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, a);
                    case 4:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powl(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2l(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_long__double(a);
                theta = atan2l(a.imag, a.real);
            }
            lnr = logl(r);
            z_r = expl(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosl(z_theta);
            z.imag = z_r * sinl(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
  static CYTHON_INLINE unsigned short __Pyx_PyInt_As_unsigned_short(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned short neg_one = (unsigned short) -1, const_zero = (unsigned short) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned short) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned short, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned short, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned short) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) >= 2 * PyLong_SHIFT)) {
                                return (unsigned short) (((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned short) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) >= 3 * PyLong_SHIFT)) {
                                return (unsigned short) (((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned short) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) >= 4 * PyLong_SHIFT)) {
                                return (unsigned short) (((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned short) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned short) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned short) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned short, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned short) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned short) (((unsigned short)-1)*(((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned short) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned short) ((((((unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned short) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned short) (((unsigned short)-1)*(((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned short) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned short) ((((((((unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned short) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned short) (((unsigned short)-1)*(((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned short) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned short, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned short) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned short) ((((((((((unsigned short)digits[3]) << PyLong_SHIFT) | (unsigned short)digits[2]) << PyLong_SHIFT) | (unsigned short)digits[1]) << PyLong_SHIFT) | (unsigned short)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned short) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned short) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned short, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned short val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned short) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned short) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned short) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned short) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned short) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned short) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned short) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned short) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned short) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned short) 1) << (sizeof(unsigned short) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned short) -1;
        }
    } else {
        unsigned short val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned short) -1;
        val = __Pyx_PyInt_As_unsigned_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned short");
    return (unsigned short) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned short");
    return (unsigned short) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                                return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                                return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                                return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                                return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                                return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                                return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT)) {
                                return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT)) {
                                return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT)) {
                                return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned int) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned int) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned int) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned int) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned int) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned int) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned int) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned int) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned int) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned int) 1) << (sizeof(unsigned int) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE octomap::key_type __Pyx_PyInt_As_octomap_3a__3a_key_type(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const octomap::key_type neg_one = (octomap::key_type) -1, const_zero = (octomap::key_type) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(octomap::key_type) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(octomap::key_type, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (octomap::key_type) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(octomap::key_type, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(octomap::key_type) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(octomap::key_type, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(octomap::key_type) >= 2 * PyLong_SHIFT)) {
                                return (octomap::key_type) (((((octomap::key_type)digits[1]) << PyLong_SHIFT) | (octomap::key_type)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(octomap::key_type) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(octomap::key_type, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(octomap::key_type) >= 3 * PyLong_SHIFT)) {
                                return (octomap::key_type) (((((((octomap::key_type)digits[2]) << PyLong_SHIFT) | (octomap::key_type)digits[1]) << PyLong_SHIFT) | (octomap::key_type)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(octomap::key_type) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(octomap::key_type, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(octomap::key_type) >= 4 * PyLong_SHIFT)) {
                                return (octomap::key_type) (((((((((octomap::key_type)digits[3]) << PyLong_SHIFT) | (octomap::key_type)digits[2]) << PyLong_SHIFT) | (octomap::key_type)digits[1]) << PyLong_SHIFT) | (octomap::key_type)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (octomap::key_type) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(octomap::key_type) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(octomap::key_type, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(octomap::key_type) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(octomap::key_type, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(octomap::key_type, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(octomap::key_type) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(octomap::key_type, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(octomap::key_type) - 1 > 2 * PyLong_SHIFT)) {
                                return (octomap::key_type) (((octomap::key_type)-1)*(((((octomap::key_type)digits[1]) << PyLong_SHIFT) | (octomap::key_type)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(octomap::key_type) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(octomap::key_type, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(octomap::key_type) - 1 > 2 * PyLong_SHIFT)) {
                                return (octomap::key_type) ((((((octomap::key_type)digits[1]) << PyLong_SHIFT) | (octomap::key_type)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(octomap::key_type) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(octomap::key_type, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(octomap::key_type) - 1 > 3 * PyLong_SHIFT)) {
                                return (octomap::key_type) (((octomap::key_type)-1)*(((((((octomap::key_type)digits[2]) << PyLong_SHIFT) | (octomap::key_type)digits[1]) << PyLong_SHIFT) | (octomap::key_type)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(octomap::key_type) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(octomap::key_type, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(octomap::key_type) - 1 > 3 * PyLong_SHIFT)) {
                                return (octomap::key_type) ((((((((octomap::key_type)digits[2]) << PyLong_SHIFT) | (octomap::key_type)digits[1]) << PyLong_SHIFT) | (octomap::key_type)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(octomap::key_type) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(octomap::key_type, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(octomap::key_type) - 1 > 4 * PyLong_SHIFT)) {
                                return (octomap::key_type) (((octomap::key_type)-1)*(((((((((octomap::key_type)digits[3]) << PyLong_SHIFT) | (octomap::key_type)digits[2]) << PyLong_SHIFT) | (octomap::key_type)digits[1]) << PyLong_SHIFT) | (octomap::key_type)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(octomap::key_type) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(octomap::key_type, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(octomap::key_type) - 1 > 4 * PyLong_SHIFT)) {
                                return (octomap::key_type) ((((((((((octomap::key_type)digits[3]) << PyLong_SHIFT) | (octomap::key_type)digits[2]) << PyLong_SHIFT) | (octomap::key_type)digits[1]) << PyLong_SHIFT) | (octomap::key_type)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(octomap::key_type) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(octomap::key_type, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(octomap::key_type) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(octomap::key_type, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            octomap::key_type val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (octomap::key_type) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (octomap::key_type) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (octomap::key_type) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (octomap::key_type) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (octomap::key_type) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(octomap::key_type) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((octomap::key_type) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(octomap::key_type) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((octomap::key_type) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((octomap::key_type) 1) << (sizeof(octomap::key_type) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (octomap::key_type) -1;
        }
    } else {
        octomap::key_type val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (octomap::key_type) -1;
        val = __Pyx_PyInt_As_octomap_3a__3a_key_type(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to octomap::key_type");
    return (octomap::key_type) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to octomap::key_type");
    return (octomap::key_type) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_octomap_3a__3a_key_type(octomap::key_type value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const octomap::key_type neg_one = (octomap::key_type) -1, const_zero = (octomap::key_type) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(octomap::key_type) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(octomap::key_type) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(octomap::key_type) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(octomap::key_type) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(octomap::key_type) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(octomap::key_type),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(octomap::key_type));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned char) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned char, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(unsigned char) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) >= 2 * PyLong_SHIFT)) {
                                return (unsigned char) (((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned char) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) >= 3 * PyLong_SHIFT)) {
                                return (unsigned char) (((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned char) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) >= 4 * PyLong_SHIFT)) {
                                return (unsigned char) (((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(unsigned char) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(unsigned char, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(unsigned char) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned char) (((unsigned char)-1)*(((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(unsigned char) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                                return (unsigned char) ((((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned char) (((unsigned char)-1)*(((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(unsigned char) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                                return (unsigned char) ((((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned char) (((unsigned char)-1)*(((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(unsigned char) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT)) {
                                return (unsigned char) ((((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(unsigned char) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(unsigned char) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            unsigned char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (unsigned char) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (unsigned char) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (unsigned char) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (unsigned char) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (unsigned char) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(unsigned char) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((unsigned char) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(unsigned char) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((unsigned char) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((unsigned char) 1) << (sizeof(unsigned char) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (unsigned char) -1;
        }
    } else {
        unsigned char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned char) -1;
        val = __Pyx_PyInt_As_unsigned_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned char");
    return (unsigned char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned char");
    return (unsigned char) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_intp(npy_intp value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_intp neg_one = (npy_intp) -1, const_zero = (npy_intp) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_intp) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_intp) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_intp) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_intp) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_intp) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(npy_intp),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(npy_intp));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
#else
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned PY_LONG_LONG));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__194);
    }
    return name;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            if (unlikely(__Pyx_PyLong_IsNeg(x))) {
                goto raise_neg_overflow;
            } else if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_DigitCount(x)) {
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                                return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                                return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                                return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                            }
                        }
                        break;
                }
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            if (__Pyx_PyLong_IsCompact(x)) {
                __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
            } else {
                const digit* digits = __Pyx_PyLong_Digits(x);
                assert(__Pyx_PyLong_DigitCount(x) > 1);
                switch (__Pyx_PyLong_SignedDigitCount(x)) {
                    case -2:
                        if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 2:
                        if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                                return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -3:
                        if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 3:
                        if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                                return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case -4:
                        if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                    case 4:
                        if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                            if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                                __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                            } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                                return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                            }
                        }
                        break;
                }
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
#if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
#endif
            if (likely(v)) {
                int ret = -1;
#if PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                ret = _PyLong_AsByteArray((PyLongObject *)v,
                                           bytes, sizeof(val),
                                           is_little, !is_unsigned);
#else
                PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
                int bits, remaining_bits, is_negative = 0;
                long idigit;
                int chunk_size = (sizeof(long) < 8) ? 30 : 62;
                if (unlikely(!PyLong_CheckExact(v))) {
                    PyObject *tmp = v;
                    v = PyNumber_Long(v);
                    assert(PyLong_CheckExact(v));
                    Py_DECREF(tmp);
                    if (unlikely(!v)) return (long) -1;
                }
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                if (Py_SIZE(x) == 0)
                    return (long) 0;
                is_negative = Py_SIZE(x) < 0;
#else
                {
                    int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                    if (unlikely(result < 0))
                        return (long) -1;
                    is_negative = result == 1;
                }
#endif
                if (is_unsigned && unlikely(is_negative)) {
                    goto raise_neg_overflow;
                } else if (is_negative) {
                    stepval = PyNumber_Invert(v);
                    if (unlikely(!stepval))
                        return (long) -1;
                } else {
                    stepval = __Pyx_NewRef(v);
                }
                val = (long) 0;
                mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
                shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
                for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
                    PyObject *tmp, *digit;
                    digit = PyNumber_And(stepval, mask);
                    if (unlikely(!digit)) goto done;
                    idigit = PyLong_AsLong(digit);
                    Py_DECREF(digit);
                    if (unlikely(idigit < 0)) goto done;
                    tmp = PyNumber_Rshift(stepval, shift);
                    if (unlikely(!tmp)) goto done;
                    Py_DECREF(stepval); stepval = tmp;
                    val |= ((long) idigit) << bits;
                    #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
                    if (Py_SIZE(stepval) == 0)
                        goto unpacking_done;
                    #endif
                }
                idigit = PyLong_AsLong(stepval);
                if (unlikely(idigit < 0)) goto done;
                remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
                if (unlikely(idigit >= (1L << remaining_bits)))
                    goto raise_overflow;
                val |= ((long) idigit) << bits;
            #if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030B0000
            unpacking_done:
            #endif
                if (!is_unsigned) {
                    if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                        goto raise_overflow;
                    if (is_negative)
                        val = ~val;
                }
                ret = 0;
            done:
                Py_XDECREF(shift);
                Py_XDECREF(mask);
                Py_XDECREF(stepval);
#endif
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
